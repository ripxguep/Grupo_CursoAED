
stm32429zi_driverstry2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022bc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002468  08002468  00012468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002510  08002510  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002510  08002510  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002510  08002510  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002514  08002514  00012514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000124  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c44  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006a3  00000000  00000000  00021cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  000223a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d0  00000000  00000000  000225c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c81  00000000  00000000  00022790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002463  00000000  00000000  00025411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ac0d  00000000  00000000  00027874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00032481  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001214  00000000  00000000  000324d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002450 	.word	0x08002450

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08002450 	.word	0x08002450

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <delay>:
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
void	delay(void){
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<50000/2;i++);
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e002      	b.n	800020e <delay+0x12>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000214:	4293      	cmp	r3, r2
 8000216:	d9f7      	bls.n	8000208 <delay+0xc>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <GPIO_ButtonInit>:
uint8_t rcv_buff[];
//some data

uint8_t rxcomplt;

void GPIO_ButtonInit(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t	GpioBtn,GpioLed;
	GpioBtn.pGPIOx=GPIOA;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <GPIO_ButtonInit+0x4c>)
 800022c:	60fb      	str	r3, [r7, #12]
			GpioBtn.GPIO_PinConfig.GPIO_PinNumber	=GPIO_PIN_NO_3;
 800022e:	2303      	movs	r3, #3
 8000230:	743b      	strb	r3, [r7, #16]
			GpioBtn.GPIO_PinConfig.GPIO_PinMode		=GPIO_MODE_IT_FT;
 8000232:	2304      	movs	r3, #4
 8000234:	747b      	strb	r3, [r7, #17]
						GpioBtn.GPIO_PinConfig.GPIO_PinSpeed	=GPIO_SPEED_FAST;
 8000236:	2302      	movs	r3, #2
 8000238:	74bb      	strb	r3, [r7, #18]
						GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PIN_PU;
 800023a:	2301      	movs	r3, #1
 800023c:	74fb      	strb	r3, [r7, #19]
			GPIO_Init(&GpioBtn);
 800023e:	f107 030c 	add.w	r3, r7, #12
 8000242:	4618      	mov	r0, r3
 8000244:	f001 f820 	bl	8001288 <GPIO_Init>

			GpioLed.pGPIOx=GPIOD;
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <GPIO_ButtonInit+0x50>)
 800024a:	603b      	str	r3, [r7, #0]
						GpioLed.GPIO_PinConfig.GPIO_PinNumber	=GPIO_PIN_NO_12;
 800024c:	230c      	movs	r3, #12
 800024e:	713b      	strb	r3, [r7, #4]
						GpioLed.GPIO_PinConfig.GPIO_PinMode		=GPIO_MODE_OUT;
 8000250:	2301      	movs	r3, #1
 8000252:	717b      	strb	r3, [r7, #5]

						GpioLed.GPIO_PinConfig.GPIO_PinSpeed	=GPIO_SPEED_LOW;
 8000254:	2300      	movs	r3, #0
 8000256:	71bb      	strb	r3, [r7, #6]
						GpioLed.GPIO_PinConfig.GPIO_PinOPType	=GPIO_OP_TYPE_PP;
 8000258:	2300      	movs	r3, #0
 800025a:	723b      	strb	r3, [r7, #8]
						GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 800025c:	2300      	movs	r3, #0
 800025e:	71fb      	strb	r3, [r7, #7]
						GPIO_Init(&GpioLed);
 8000260:	463b      	mov	r3, r7
 8000262:	4618      	mov	r0, r3
 8000264:	f001 f810 	bl	8001288 <GPIO_Init>
}
 8000268:	bf00      	nop
 800026a:	3718      	adds	r7, #24
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40020000 	.word	0x40020000
 8000274:	40020c00 	.word	0x40020c00

08000278 <I2C1_GPIOInits>:

void I2C1_GPIOInits(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
GPIO_Handle_t	I2CPins;
I2C1->CR1 |= (1<<15);
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <I2C1_GPIOInits+0x70>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <I2C1_GPIOInits+0x70>)
 8000284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000288:	6013      	str	r3, [r2, #0]
I2C1->CR1 &= ~(1<<15);
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <I2C1_GPIOInits+0x70>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <I2C1_GPIOInits+0x70>)
 8000290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000294:	6013      	str	r3, [r2, #0]
I2C2->CR1 |= (1<<15);
 8000296:	4b15      	ldr	r3, [pc, #84]	; (80002ec <I2C1_GPIOInits+0x74>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a14      	ldr	r2, [pc, #80]	; (80002ec <I2C1_GPIOInits+0x74>)
 800029c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002a0:	6013      	str	r3, [r2, #0]
I2C2->CR1 &= ~(1<<15);
 80002a2:	4b12      	ldr	r3, [pc, #72]	; (80002ec <I2C1_GPIOInits+0x74>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a11      	ldr	r2, [pc, #68]	; (80002ec <I2C1_GPIOInits+0x74>)
 80002a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002ac:	6013      	str	r3, [r2, #0]
I2CPins.pGPIOx=GPIOB;
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <I2C1_GPIOInits+0x78>)
 80002b0:	607b      	str	r3, [r7, #4]
I2CPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 80002b2:	2302      	movs	r3, #2
 80002b4:	727b      	strb	r3, [r7, #9]
I2CPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_OD;
 80002b6:	2301      	movs	r3, #1
 80002b8:	733b      	strb	r3, [r7, #12]
I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 80002ba:	2300      	movs	r3, #0
 80002bc:	72fb      	strb	r3, [r7, #11]
I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode=4;
 80002be:	2304      	movs	r3, #4
 80002c0:	737b      	strb	r3, [r7, #13]
I2CPins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_HIGH;
 80002c2:	2303      	movs	r3, #3
 80002c4:	72bb      	strb	r3, [r7, #10]
//SCL
I2CPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_8;
 80002c6:	2308      	movs	r3, #8
 80002c8:	723b      	strb	r3, [r7, #8]
GPIO_Init(&I2CPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 ffdb 	bl	8001288 <GPIO_Init>
//SDA

I2CPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_9;
 80002d2:	2309      	movs	r3, #9
 80002d4:	723b      	strb	r3, [r7, #8]
GPIO_Init(&I2CPins);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 ffd5 	bl	8001288 <GPIO_Init>

}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40005400 	.word	0x40005400
 80002ec:	40005800 	.word	0x40005800
 80002f0:	40020400 	.word	0x40020400

080002f4 <I2C1_Inits>:
void I2C1_Inits(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx=I2C1;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <I2C1_Inits+0x50>)
 80002fa:	4a13      	ldr	r2, [pc, #76]	; (8000348 <I2C1_Inits+0x54>)
 80002fc:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl=I2C_ACK_ENABLE;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <I2C1_Inits+0x50>)
 8000300:	2201      	movs	r2, #1
 8000302:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress=0x1;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <I2C1_Inits+0x50>)
 8000306:	2201      	movs	r2, #1
 8000308:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_SCLSpeed=I2C_FM_DUTY_2;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <I2C1_Inits+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_SCLSpeed=I2C_SCL_SPEED_SM;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <I2C1_Inits+0x50>)
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <I2C1_Inits+0x58>)
 8000314:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C1Handle);
 8000316:	480b      	ldr	r0, [pc, #44]	; (8000344 <I2C1_Inits+0x50>)
 8000318:	f000 faca 	bl	80008b0 <I2C_Init>
	I2C2Handle.pI2Cx=I2C2;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <I2C1_Inits+0x5c>)
 800031e:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <I2C1_Inits+0x60>)
 8000320:	601a      	str	r2, [r3, #0]
		I2C2Handle.I2C_Config.I2C_AckControl=I2C_ACK_ENABLE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <I2C1_Inits+0x5c>)
 8000324:	2201      	movs	r2, #1
 8000326:	725a      	strb	r2, [r3, #9]
		I2C2Handle.I2C_Config.I2C_DeviceAddress=0x1;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <I2C1_Inits+0x5c>)
 800032a:	2201      	movs	r2, #1
 800032c:	721a      	strb	r2, [r3, #8]
		I2C2Handle.I2C_Config.I2C_SCLSpeed=I2C_FM_DUTY_2;
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <I2C1_Inits+0x5c>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
		I2C2Handle.I2C_Config.I2C_SCLSpeed=I2C_SCL_SPEED_SM;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <I2C1_Inits+0x5c>)
 8000336:	4a05      	ldr	r2, [pc, #20]	; (800034c <I2C1_Inits+0x58>)
 8000338:	605a      	str	r2, [r3, #4]
		I2C_Init(&I2C2Handle);
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <I2C1_Inits+0x5c>)
 800033c:	f000 fab8 	bl	80008b0 <I2C_Init>
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200000ac 	.word	0x200000ac
 8000348:	40005400 	.word	0x40005400
 800034c:	000186a0 	.word	0x000186a0
 8000350:	200000d4 	.word	0x200000d4
 8000354:	40005800 	.word	0x40005800

08000358 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler (){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
I2C_EV_IRQHandling(&I2C2Handle);
 800035c:	4802      	ldr	r0, [pc, #8]	; (8000368 <I2C1_EV_IRQHandler+0x10>)
 800035e:	f000 fd48 	bl	8000df2 <I2C_EV_IRQHandling>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200000d4 	.word	0x200000d4

0800036c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler (){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C2Handle);
 8000370:	4802      	ldr	r0, [pc, #8]	; (800037c <I2C1_ER_IRQHandler+0x10>)
 8000372:	f000 fe1a 	bl	8000faa <I2C_ER_IRQHandling>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000d4 	.word	0x200000d4

08000380 <I2C_ApplicationEventCallback>:
void 	I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv){
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
	if(AppEv==I2C_EV_DATA_REQ)  {
 800038c:	78fb      	ldrb	r3, [r7, #3]
 800038e:	2b08      	cmp	r3, #8
 8000390:	d123      	bne.n	80003da <I2C_ApplicationEventCallback+0x5a>
		//Master wants some data that slave has to send
		if(commandCode==0x51){
 8000392:	4b2c      	ldr	r3, [pc, #176]	; (8000444 <I2C_ApplicationEventCallback+0xc4>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b51      	cmp	r3, #81	; 0x51
 8000398:	d10b      	bne.n	80003b2 <I2C_ApplicationEventCallback+0x32>
			//send the length info to the master
			I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)TX_buff));
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681c      	ldr	r4, [r3, #0]
 800039e:	482a      	ldr	r0, [pc, #168]	; (8000448 <I2C_ApplicationEventCallback+0xc8>)
 80003a0:	f7ff ff24 	bl	80001ec <strlen>
 80003a4:	4603      	mov	r3, r0
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	4619      	mov	r1, r3
 80003aa:	4620      	mov	r0, r4
 80003ac:	f000 fd07 	bl	8000dbe <I2C_SlaveSendData>
while(1);
}else if(AppEv==I2C_EV_STOP){
	//only during slave reception
	//master has ended i2c comm with slave
}
}
 80003b0:	e044      	b.n	800043c <I2C_ApplicationEventCallback+0xbc>
		}else if(commandCode==0x52){
 80003b2:	4b24      	ldr	r3, [pc, #144]	; (8000444 <I2C_ApplicationEventCallback+0xc4>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b52      	cmp	r3, #82	; 0x52
 80003b8:	d140      	bne.n	800043c <I2C_ApplicationEventCallback+0xbc>
				I2C_SlaveSendData(pI2CHandle->pI2Cx, TX_buff[Cnt++]);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	4b23      	ldr	r3, [pc, #140]	; (800044c <I2C_ApplicationEventCallback+0xcc>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	1c59      	adds	r1, r3, #1
 80003c4:	b2c8      	uxtb	r0, r1
 80003c6:	4921      	ldr	r1, [pc, #132]	; (800044c <I2C_ApplicationEventCallback+0xcc>)
 80003c8:	7008      	strb	r0, [r1, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <I2C_ApplicationEventCallback+0xc8>)
 80003ce:	5c5b      	ldrb	r3, [r3, r1]
 80003d0:	4619      	mov	r1, r3
 80003d2:	4610      	mov	r0, r2
 80003d4:	f000 fcf3 	bl	8000dbe <I2C_SlaveSendData>
}
 80003d8:	e030      	b.n	800043c <I2C_ApplicationEventCallback+0xbc>
	}else if(AppEv==I2C_EV_DATA_RCV){
 80003da:	78fb      	ldrb	r3, [r7, #3]
 80003dc:	2b09      	cmp	r3, #9
 80003de:	d109      	bne.n	80003f4 <I2C_ApplicationEventCallback+0x74>
	commandCode =I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fcf8 	bl	8000dda <I2C_SlaveReceiveData>
 80003ea:	4603      	mov	r3, r0
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <I2C_ApplicationEventCallback+0xc4>)
 80003f0:	701a      	strb	r2, [r3, #0]
}
 80003f2:	e023      	b.n	800043c <I2C_ApplicationEventCallback+0xbc>
	}	else if(AppEv==I2C_EV_TX_CMPLT)  {
 80003f4:	78fb      	ldrb	r3, [r7, #3]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d103      	bne.n	8000402 <I2C_ApplicationEventCallback+0x82>
	printf("Tx is completed\n");
 80003fa:	4815      	ldr	r0, [pc, #84]	; (8000450 <I2C_ApplicationEventCallback+0xd0>)
 80003fc:	f001 fa5a 	bl	80018b4 <puts>
}
 8000400:	e01c      	b.n	800043c <I2C_ApplicationEventCallback+0xbc>
}else if(AppEv==I2C_EV_RX_CMPLT){
 8000402:	78fb      	ldrb	r3, [r7, #3]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d106      	bne.n	8000416 <I2C_ApplicationEventCallback+0x96>
	printf("Rx is completed\n");
 8000408:	4812      	ldr	r0, [pc, #72]	; (8000454 <I2C_ApplicationEventCallback+0xd4>)
 800040a:	f001 fa53 	bl	80018b4 <puts>
	rxcomplt=SET;
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <I2C_ApplicationEventCallback+0xd8>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
}
 8000414:	e012      	b.n	800043c <I2C_ApplicationEventCallback+0xbc>
}else if(AppEv==I2C_ERROR_AF){
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	2b05      	cmp	r3, #5
 800041a:	d10f      	bne.n	800043c <I2C_ApplicationEventCallback+0xbc>
	printf("Error : Ack failure\n");
 800041c:	480f      	ldr	r0, [pc, #60]	; (800045c <I2C_ApplicationEventCallback+0xdc>)
 800041e:	f001 fa49 	bl	80018b4 <puts>
	commandCode=0xff;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <I2C_ApplicationEventCallback+0xc4>)
 8000424:	22ff      	movs	r2, #255	; 0xff
 8000426:	701a      	strb	r2, [r3, #0]
	Cnt=0;
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <I2C_ApplicationEventCallback+0xcc>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
	I2C_CloseSendData(pI2CHandle);
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f000 fca3 	bl	8000d7a <I2C_CloseSendData>
I2C_GenerateStopCondition(I2C1);
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <I2C_ApplicationEventCallback+0xe0>)
 8000436:	f000 f9a8 	bl	800078a <I2C_GenerateStopCondition>
while(1);
 800043a:	e7fe      	b.n	800043a <I2C_ApplicationEventCallback+0xba>
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bd90      	pop	{r4, r7, pc}
 8000444:	200000fd 	.word	0x200000fd
 8000448:	2000000c 	.word	0x2000000c
 800044c:	200000fe 	.word	0x200000fe
 8000450:	08002468 	.word	0x08002468
 8000454:	08002478 	.word	0x08002478
 8000458:	200000ff 	.word	0x200000ff
 800045c:	08002488 	.word	0x08002488
 8000460:	40005400 	.word	0x40005400

08000464 <main>:

void initialise_monitor_handles(void);
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af02      	add	r7, sp, #8
	uint8_t defaultvalue=0;
 800046a:	2300      	movs	r3, #0
 800046c:	71fb      	strb	r3, [r7, #7]
	GPIO_ButtonInit();
 800046e:	f7ff fed9 	bl	8000224 <GPIO_ButtonInit>
	I2C1_GPIOInits();
 8000472:	f7ff ff01 	bl	8000278 <I2C1_GPIOInits>
	I2C1_Inits();
 8000476:	f7ff ff3d 	bl	80002f4 <I2C1_Inits>
	I2C_PeripheralControl(I2C1, ENABLE);
 800047a:	2101      	movs	r1, #1
 800047c:	481b      	ldr	r0, [pc, #108]	; (80004ec <main+0x88>)
 800047e:	f000 f9c6 	bl	800080e <I2C_PeripheralControl>



	//i2c irq config
	I2C_IRQInterruptConfig(IRQ_NO_I2C2_EV, ENABLE);
 8000482:	2101      	movs	r1, #1
 8000484:	2021      	movs	r0, #33	; 0x21
 8000486:	f000 fb5d 	bl	8000b44 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C2_ER, ENABLE);
 800048a:	2101      	movs	r1, #1
 800048c:	2022      	movs	r0, #34	; 0x22
 800048e:	f000 fb59 	bl	8000b44 <I2C_IRQInterruptConfig>
		I2C_SlaveEnableDisableCallbackEvents(I2C2,ENABLE);
 8000492:	2101      	movs	r1, #1
 8000494:	4816      	ldr	r0, [pc, #88]	; (80004f0 <main+0x8c>)
 8000496:	f000 f987 	bl	80007a8 <I2C_SlaveEnableDisableCallbackEvents>
		//I2C PERI ENABLE
		I2C_PeripheralControl(I2C2, ENABLE);
 800049a:	2101      	movs	r1, #1
 800049c:	4814      	ldr	r0, [pc, #80]	; (80004f0 <main+0x8c>)
 800049e:	f000 f9b6 	bl	800080e <I2C_PeripheralControl>
		//ACK BIT MADE 1 AFTER PE=1
		I2C_ManageAcking(I2C2, I2C_ACK_ENABLE);
 80004a2:	2101      	movs	r1, #1
 80004a4:	4812      	ldr	r0, [pc, #72]	; (80004f0 <main+0x8c>)
 80004a6:	f000 fb31 	bl	8000b0c <I2C_ManageAcking>
	while(1){

		GPIO_IRQPriorityConfig(IRQ_NO_EXTI3, NVIC_IRQ_PRI15);
 80004aa:	210f      	movs	r1, #15
 80004ac:	2009      	movs	r0, #9
 80004ae:	f001 f917 	bl	80016e0 <GPIO_IRQPriorityConfig>
							GPIO_IRQConfig(IRQ_NO_EXTI3, ENABLE);
 80004b2:	2101      	movs	r1, #1
 80004b4:	2009      	movs	r0, #9
 80004b6:	f001 f88f 	bl	80015d8 <GPIO_IRQConfig>
							//wait till button is pressed
						while((pinn==defaultvalue));
 80004ba:	bf00      	nop
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <main+0x90>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	79fa      	ldrb	r2, [r7, #7]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d0fa      	beq.n	80004bc <main+0x58>
						pinn=defaultvalue;
 80004c6:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <main+0x90>)
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	7013      	strb	r3, [r2, #0]
		//send data to slave
	I2C_MasterSendData(&I2C1Handle, some_data,strlen((char*)some_data) , SLAVE_ADDRRESS,I2C_ENABLE_SR);
 80004cc:	480a      	ldr	r0, [pc, #40]	; (80004f8 <main+0x94>)
 80004ce:	f7ff fe8d 	bl	80001ec <strlen>
 80004d2:	4602      	mov	r2, r0
 80004d4:	2301      	movs	r3, #1
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2301      	movs	r3, #1
 80004da:	4907      	ldr	r1, [pc, #28]	; (80004f8 <main+0x94>)
 80004dc:	4807      	ldr	r0, [pc, #28]	; (80004fc <main+0x98>)
 80004de:	f000 fab2 	bl	8000a46 <I2C_MasterSendData>
	printf("address sent\n");
 80004e2:	4807      	ldr	r0, [pc, #28]	; (8000500 <main+0x9c>)
 80004e4:	f001 f9e6 	bl	80018b4 <puts>
		GPIO_IRQPriorityConfig(IRQ_NO_EXTI3, NVIC_IRQ_PRI15);
 80004e8:	e7df      	b.n	80004aa <main+0x46>
 80004ea:	bf00      	nop
 80004ec:	40005400 	.word	0x40005400
 80004f0:	40005800 	.word	0x40005800
 80004f4:	200000fc 	.word	0x200000fc
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200000ac 	.word	0x200000ac
 8000500:	0800249c 	.word	0x0800249c

08000504 <EXTI3_IRQHandler>:
	}
}

void EXTI3_IRQHandler(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
			delay();
 8000508:	f7ff fe78 	bl	80001fc <delay>
			GPIO_IRQHandling(GPIO_PIN_NO_3);
 800050c:	2003      	movs	r0, #3
 800050e:	f001 f911 	bl	8001734 <GPIO_IRQHandling>
			GPIO_TogglePin(GPIOD, GPIO_PIN_NO_12);
 8000512:	210c      	movs	r1, #12
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <EXTI3_IRQHandler+0x20>)
 8000516:	f001 f84b 	bl	80015b0 <GPIO_TogglePin>
			pinn=3;
 800051a:	4b03      	ldr	r3, [pc, #12]	; (8000528 <EXTI3_IRQHandler+0x24>)
 800051c:	2203      	movs	r2, #3
 800051e:	701a      	strb	r2, [r3, #0]
		}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020c00 	.word	0x40020c00
 8000528:	200000fc 	.word	0x200000fc

0800052c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <_sbrk+0x5c>)
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <_sbrk+0x60>)
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <_sbrk+0x64>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <_sbrk+0x68>)
 800054c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	429a      	cmp	r2, r3
 800055a:	d207      	bcs.n	800056c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800055c:	f001 f90a 	bl	8001774 <__errno>
 8000560:	4603      	mov	r3, r0
 8000562:	220c      	movs	r2, #12
 8000564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	e009      	b.n	8000580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <_sbrk+0x64>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <_sbrk+0x64>)
 800057c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20030000 	.word	0x20030000
 800058c:	00000400 	.word	0x00000400
 8000590:	20000100 	.word	0x20000100
 8000594:	200001b8 	.word	0x200001b8

08000598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800059c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c6:	f001 f8db 	bl	8001780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ca:	f7ff ff4b 	bl	8000464 <main>

080005ce <LoopForever>:

LoopForever:
  b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   r0, =_estack
 80005d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80005dc:	08002518 	.word	0x08002518
  ldr r2, =_sbss
 80005e0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80005e4:	200001b4 	.word	0x200001b4

080005e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC_IRQHandler>

080005ea <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	601a      	str	r2, [r3, #0]

}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <RCC_GetPLLOutputClock>:
uint32_t RCC_GetPLLOutputClock();
uint32_t RCC_GetPLLOutputClock(){
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

}
 800060c:	bf00      	nop
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
	...

08000618 <RCC_GetPCLK1Value>:
uint32_t RCC_GetPCLK1Value();
uint32_t	RCC_GetPCLK1Value(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
	uint32_t	pclk1,Systemclk;
	uint8_t	clksrc,temp,ahbp,apb1p;
	clksrc =((RCC->CFGR>>2)&0x3);
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <RCC_GetPCLK1Value+0x9c>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 0303 	and.w	r3, r3, #3
 800062a:	727b      	strb	r3, [r7, #9]
	if(clksrc ==0){
 800062c:	7a7b      	ldrb	r3, [r7, #9]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d102      	bne.n	8000638 <RCC_GetPCLK1Value+0x20>
		Systemclk=16000000;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <RCC_GetPCLK1Value+0xa0>)
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	e00b      	b.n	8000650 <RCC_GetPCLK1Value+0x38>

	}else	if(clksrc==1){
 8000638:	7a7b      	ldrb	r3, [r7, #9]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d102      	bne.n	8000644 <RCC_GetPCLK1Value+0x2c>
		Systemclk=8000000;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <RCC_GetPCLK1Value+0xa4>)
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e005      	b.n	8000650 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc==2 ){
 8000644:	7a7b      	ldrb	r3, [r7, #9]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d102      	bne.n	8000650 <RCC_GetPCLK1Value+0x38>
		Systemclk=RCC_GetPLLOutputClock();
 800064a:	f7ff ffdd 	bl	8000608 <RCC_GetPLLOutputClock>
 800064e:	60f8      	str	r0, [r7, #12]
	}
	//for ahb
	temp=((RCC->CFGR>>4)&0xF);
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <RCC_GetPCLK1Value+0x9c>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 030f 	and.w	r3, r3, #15
 800065c:	723b      	strb	r3, [r7, #8]
	if(temp<8){
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	2b07      	cmp	r3, #7
 8000662:	d802      	bhi.n	800066a <RCC_GetPCLK1Value+0x52>
		ahbp=1;
 8000664:	2301      	movs	r3, #1
 8000666:	72fb      	strb	r3, [r7, #11]
 8000668:	e005      	b.n	8000676 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp=AHB_PreScaler[temp-8];
 800066a:	7a3b      	ldrb	r3, [r7, #8]
 800066c:	3b08      	subs	r3, #8
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <RCC_GetPCLK1Value+0xa8>)
 8000670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000674:	72fb      	strb	r3, [r7, #11]
	}
	//for apb1
	temp=((RCC->CFGR>>10)&0x7);
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <RCC_GetPCLK1Value+0x9c>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	0a9b      	lsrs	r3, r3, #10
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	723b      	strb	r3, [r7, #8]
		if(temp<4){
 8000684:	7a3b      	ldrb	r3, [r7, #8]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d802      	bhi.n	8000690 <RCC_GetPCLK1Value+0x78>
			apb1p=1;
 800068a:	2301      	movs	r3, #1
 800068c:	72bb      	strb	r3, [r7, #10]
 800068e:	e004      	b.n	800069a <RCC_GetPCLK1Value+0x82>
		}else{
			apb1p=APB1_PreScaler[temp-4];
 8000690:	7a3b      	ldrb	r3, [r7, #8]
 8000692:	3b04      	subs	r3, #4
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <RCC_GetPCLK1Value+0xac>)
 8000696:	5cd3      	ldrb	r3, [r2, r3]
 8000698:	72bb      	strb	r3, [r7, #10]
		}
		pclk1=(Systemclk/ahbp)/apb1p;
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	fbb2 f2f3 	udiv	r2, r2, r3
 80006a2:	7abb      	ldrb	r3, [r7, #10]
 80006a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a8:	607b      	str	r3, [r7, #4]
	return pclk1;
 80006aa:	687b      	ldr	r3, [r7, #4]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	00f42400 	.word	0x00f42400
 80006bc:	007a1200 	.word	0x007a1200
 80006c0:	20000018 	.word	0x20000018
 80006c4:	20000028 	.word	0x20000028

080006c8 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	78fa      	ldrb	r2, [r7, #3]
 80006e6:	741a      	strb	r2, [r3, #16]


}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	460b      	mov	r3, r1
 80006fc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	78fa      	ldrb	r2, [r7, #3]
 8000710:	741a      	strb	r2, [r3, #16]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	2b00      	cmp	r3, #0
 8000730:	d01f      	beq.n	8000772 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7f1b      	ldrb	r3, [r3, #28]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d112      	bne.n	8000760 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d11f      	bne.n	8000782 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f9df 	bl	8000b0c <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800075e:	e010      	b.n	8000782 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	60fb      	str	r3, [r7, #12]
}
 8000770:	e007      	b.n	8000782 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	60fb      	str	r3, [r7, #12]
}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	601a      	str	r2, [r3, #0]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <I2C_SlaveEnableDisableCallbackEvents>:


 void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
 {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == ENABLE)
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d112      	bne.n	80007e0 <I2C_SlaveEnableDisableCallbackEvents+0x38>
	 {
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }

 }
 80007de:	e011      	b.n	8000804 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	605a      	str	r2, [r3, #4]
 }
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d106      	bne.n	800082e <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f043 0201 	orr.w	r2, r3, #1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 800082c:	e005      	b.n	800083a <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f023 0201 	bic.w	r2, r3, #1
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d11f      	bne.n	8000896 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <I2C_PeriClockControl+0x5c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <I2C_PeriClockControl+0x60>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <I2C_PeriClockControl+0x60>)
 8000864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 800086a:	e014      	b.n	8000896 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <I2C_PeriClockControl+0x64>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d106      	bne.n	8000882 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <I2C_PeriClockControl+0x60>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <I2C_PeriClockControl+0x60>)
 800087a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000880:	e009      	b.n	8000896 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <I2C_PeriClockControl+0x68>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d105      	bne.n	8000896 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <I2C_PeriClockControl+0x60>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <I2C_PeriClockControl+0x60>)
 8000890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40005800 	.word	0x40005800
 80008ac:	40005c00 	.word	0x40005c00

080008b0 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ffbe 	bl	8000844 <I2C_PeriClockControl>



	//configure the FREQ field of CR2
	tempreg = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 80008cc:	f7ff fea4 	bl	8000618 <RCC_GetPCLK1Value>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a50      	ldr	r2, [pc, #320]	; (8000a14 <I2C_Init+0x164>)
 80008d4:	fba2 2303 	umull	r2, r3, r2, r3
 80008d8:	0c9b      	lsrs	r3, r3, #18
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008ea:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7a1b      	ldrb	r3, [r3, #8]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
	tempreg &=~ ( 1 << 14);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000904:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	4a3f      	ldr	r2, [pc, #252]	; (8000a18 <I2C_Init+0x168>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d80f      	bhi.n	8000940 <I2C_Init+0x90>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000920:	f7ff fe7a 	bl	8000618 <RCC_GetPCLK1Value>
 8000924:	4602      	mov	r2, r0
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000930:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000932:	897b      	ldrh	r3, [r7, #10]
 8000934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e02d      	b.n	800099c <I2C_Init+0xec>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000946:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	7a9b      	ldrb	r3, [r3, #10]
 800094c:	039b      	lsls	r3, r3, #14
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4313      	orrs	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a9b      	ldrb	r3, [r3, #10]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10b      	bne.n	8000976 <I2C_Init+0xc6>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800095e:	f7ff fe5b 	bl	8000618 <RCC_GetPCLK1Value>
 8000962:	4601      	mov	r1, r0
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000972:	817b      	strh	r3, [r7, #10]
 8000974:	e00c      	b.n	8000990 <I2C_Init+0xe0>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000976:	f7ff fe4f 	bl	8000618 <RCC_GetPCLK1Value>
 800097a:	4601      	mov	r1, r0
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	4613      	mov	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	009a      	lsls	r2, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	fbb1 f3f3 	udiv	r3, r1, r3
 800098e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000990:	897b      	ldrh	r3, [r7, #10]
 8000992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4313      	orrs	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <I2C_Init+0x168>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d809      	bhi.n	80009c2 <I2C_Init+0x112>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80009ae:	f7ff fe33 	bl	8000618 <RCC_GetPCLK1Value>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <I2C_Init+0x164>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	0c9b      	lsrs	r3, r3, #18
 80009bc:	3301      	adds	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e00d      	b.n	80009de <I2C_Init+0x12e>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80009c2:	f7ff fe29 	bl	8000618 <RCC_GetPCLK1Value>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	0a5b      	lsrs	r3, r3, #9
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <I2C_Init+0x16c>)
 80009d4:	fba2 2303 	umull	r2, r3, r2, r3
 80009d8:	09db      	lsrs	r3, r3, #7
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009e8:	621a      	str	r2, [r3, #32]
pI2CHandle->pI2Cx->CR1|=(1<<0);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f042 0201 	orr.w	r2, r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
//ack control bit

	pI2CHandle->pI2Cx->CR1 |= (1<<10);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a08:	601a      	str	r2, [r3, #0]

}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	000186a0 	.word	0x000186a0
 8000a1c:	00044b83 	.word	0x00044b83

08000a20 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	695a      	ldr	r2, [r3, #20]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <I2C_GetFlagStatus+0x1a>
	{
		return (uint8_t)FLAG_SET;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <I2C_GetFlagStatus+0x1c>
	}
	return (uint8_t)FLAG_RESET;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fdc6 	bl	80005ea <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000a5e:	bf00      	nop
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2101      	movs	r1, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffda 	bl	8000a20 <I2C_GetFlagStatus>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f6      	beq.n	8000a60 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	78fa      	ldrb	r2, [r7, #3]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fe24 	bl	80006c8 <I2C_ExecuteAddressPhaseWrite>

	//3.5 wait for
	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000a80:	bf00      	nop
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2102      	movs	r1, #2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ffc9 	bl	8000a20 <I2C_GetFlagStatus>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f6      	beq.n	8000a82 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fe41 	bl	800071c <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000a9a:	e014      	b.n	8000ac6 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000a9c:	bf00      	nop
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffbb 	bl	8000a20 <I2C_GetFlagStatus>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f6      	beq.n	8000a9e <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	741a      	strb	r2, [r3, #16]
		pTxbuffer++;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
		Len--;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1e7      	bne.n	8000a9c <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000acc:	bf00      	nop
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ffa3 	bl	8000a20 <I2C_GetFlagStatus>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f6      	beq.n	8000ace <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000ae0:	bf00      	nop
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff99 	bl	8000a20 <I2C_GetFlagStatus>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f6      	beq.n	8000ae2 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000af4:	7e3b      	ldrb	r3, [r7, #24]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d104      	bne.n	8000b04 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe43 	bl	800078a <I2C_GenerateStopCondition>

}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d106      	bne.n	8000b2c <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000b2a:	e005      	b.n	8000b38 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <I2C_IRQInterruptConfig>:
 *
 * @Note              -

 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d133      	bne.n	8000bc2 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b1f      	cmp	r3, #31
 8000b5e:	d80a      	bhi.n	8000b76 <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000b60:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <I2C_IRQInterruptConfig+0xf0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	2101      	movs	r1, #1
 8000b68:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4a31      	ldr	r2, [pc, #196]	; (8000c34 <I2C_IRQInterruptConfig+0xf0>)
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000b74:	e059      	b.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b1f      	cmp	r3, #31
 8000b7a:	d90f      	bls.n	8000b9c <I2C_IRQInterruptConfig+0x58>
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b80:	d80c      	bhi.n	8000b9c <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000b82:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <I2C_IRQInterruptConfig+0xf4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	f002 021f 	and.w	r2, r2, #31
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	4611      	mov	r1, r2
 8000b94:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <I2C_IRQInterruptConfig+0xf4>)
 8000b96:	430b      	orrs	r3, r1
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e046      	b.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000ba0:	d943      	bls.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b5f      	cmp	r3, #95	; 0x5f
 8000ba6:	d840      	bhi.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <I2C_IRQInterruptConfig+0xf8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	79fa      	ldrb	r2, [r7, #7]
 8000bae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <I2C_IRQInterruptConfig+0xf8>)
 8000bbc:	430b      	orrs	r3, r1
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	e033      	b.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b1f      	cmp	r3, #31
 8000bc6:	d80a      	bhi.n	8000bde <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <I2C_IRQInterruptConfig+0xfc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4a1a      	ldr	r2, [pc, #104]	; (8000c40 <I2C_IRQInterruptConfig+0xfc>)
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	e025      	b.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b1f      	cmp	r3, #31
 8000be2:	d90f      	bls.n	8000c04 <I2C_IRQInterruptConfig+0xc0>
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b3f      	cmp	r3, #63	; 0x3f
 8000be8:	d80c      	bhi.n	8000c04 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <I2C_IRQInterruptConfig+0x100>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	f002 021f 	and.w	r2, r2, #31
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <I2C_IRQInterruptConfig+0x100>)
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e012      	b.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	d90f      	bls.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c0e:	d80c      	bhi.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <I2C_IRQInterruptConfig+0x104>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	79fa      	ldrb	r2, [r7, #7]
 8000c16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c20:	4611      	mov	r1, r2
 8000c22:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <I2C_IRQInterruptConfig+0x104>)
 8000c24:	430b      	orrs	r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	e7ff      	b.n	8000c2a <I2C_IRQInterruptConfig+0xe6>
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000e104 	.word	0xe000e104
 8000c3c:	e000e10c 	.word	0xe000e10c
 8000c40:	e000e180 	.word	0xe000e180
 8000c44:	e000e184 	.word	0xe000e184
 8000c48:	e000e18c 	.word	0xe000e18c

08000c4c <I2C_MasterHandleTXEInterrupt>:

	return busystate;
}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00f      	beq.n	8000c7c <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	741a      	strb	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	60da      	str	r2, [r3, #12]

	}

}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d10b      	bne.n	8000cae <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	7c12      	ldrb	r2, [r2, #16]
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d91a      	bls.n	8000cec <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d105      	bne.n	8000cca <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff21 	bl	8000b0c <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	7c12      	ldrb	r2, [r2, #16]
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	1e5a      	subs	r2, r3, #1
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d110      	bne.n	8000d16 <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d104      	bne.n	8000d08 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd41 	bl	800078a <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 f808 	bl	8000d1e <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8000d0e:	2101      	movs	r1, #1
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fb35 	bl	8000380 <I2C_ApplicationEventCallback>
	}
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <I2C_CloseReceiveData>:


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d34:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d44:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7a5b      	ldrb	r3, [r3, #9]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d105      	bne.n	8000d72 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fecd 	bl	8000b0c <I2C_ManageAcking>
	}

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d90:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000da0:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <I2C_SlaveSendData>:


void I2C_SlaveSendData(I2C_RegDef_t *pI2C,uint8_t data)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	741a      	strb	r2, [r3, #16]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
    return (uint8_t) pI2C->DR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7c1b      	ldrb	r3, [r3, #16]
 8000de6:	b2db      	uxtb	r3, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <I2C_EV_IRQHandling>:



void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITEVTEN) ;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e04:	617b      	str	r3, [r7, #20]
	temp2   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITBUFEN) ;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e10:	613b      	str	r3, [r7, #16]

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
	//1. Handle For interrupt generated by SB event
	//	Note : SB flag is only applicable in Master mode
	if(temp1 && temp3)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d01b      	beq.n	8000e5c <I2C_EV_IRQHandling+0x6a>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d018      	beq.n	8000e5c <I2C_EV_IRQHandling+0x6a>
	{
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7f1b      	ldrb	r3, [r3, #28]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d108      	bne.n	8000e44 <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7f5b      	ldrb	r3, [r3, #29]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	f7ff fc43 	bl	80006c8 <I2C_ExecuteAddressPhaseWrite>
 8000e42:	e00b      	b.n	8000e5c <I2C_EV_IRQHandling+0x6a>
		}else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX )
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7f1b      	ldrb	r3, [r3, #28]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d107      	bne.n	8000e5c <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7f5b      	ldrb	r3, [r3, #29]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4610      	mov	r0, r2
 8000e58:	f7ff fc4b 	bl	80006f2 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_ADDR);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d005      	beq.n	8000e7a <I2C_EV_IRQHandling+0x88>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <I2C_EV_IRQHandling+0x88>
	{
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fc51 	bl	800071c <I2C_ClearADDRFlag>
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_BTF);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d022      	beq.n	8000ed2 <I2C_EV_IRQHandling+0xe0>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d01f      	beq.n	8000ed2 <I2C_EV_IRQHandling+0xe0>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7f1b      	ldrb	r3, [r3, #28]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d11b      	bne.n	8000ed2 <I2C_EV_IRQHandling+0xe0>
		{
			//make sure that TXE is also set .
			if(pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE) )
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d014      	beq.n	8000ed2 <I2C_EV_IRQHandling+0xe0>
			{
				//BTF, TXE = 1
				if(pI2CHandle->TxLen == 0 )
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d110      	bne.n	8000ed2 <I2C_EV_IRQHandling+0xe0>
				{
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fc63 	bl	800078a <I2C_GenerateStopCondition>

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff58 	bl	8000d7a <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fa57 	bl	8000380 <I2C_ApplicationEventCallback>
		{
			;
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_STOPF);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	//The below code block will not be executed by the master since STOPF will not set in master mode
	if(temp1 && temp3)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00c      	beq.n	8000efe <I2C_EV_IRQHandling+0x10c>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d009      	beq.n	8000efe <I2C_EV_IRQHandling+0x10c>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )

		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fa41 	bl	8000380 <I2C_ApplicationEventCallback>
	}


	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d01f      	beq.n	8000f50 <I2C_EV_IRQHandling+0x15e>
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d01c      	beq.n	8000f50 <I2C_EV_IRQHandling+0x15e>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d019      	beq.n	8000f50 <I2C_EV_IRQHandling+0x15e>
	{
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d007      	beq.n	8000f3a <I2C_EV_IRQHandling+0x148>
		{
			//TXE flag is set
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7f1b      	ldrb	r3, [r3, #28]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d10e      	bne.n	8000f50 <I2C_EV_IRQHandling+0x15e>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fe8a 	bl	8000c4c <I2C_MasterHandleTXEInterrupt>
 8000f38:	e00a      	b.n	8000f50 <I2C_EV_IRQHandling+0x15e>
			}
		}else
		{
			//slave
			//make sure that the slave is really in transmitter mode
		    if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <I2C_EV_IRQHandling+0x15e>
		    {
		    	I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 8000f48:	2108      	movs	r1, #8
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fa18 	bl	8000380 <I2C_ApplicationEventCallback>
		    }
		}
	}

	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_RXNE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5a:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d01f      	beq.n	8000fa2 <I2C_EV_IRQHandling+0x1b0>
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01c      	beq.n	8000fa2 <I2C_EV_IRQHandling+0x1b0>
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d019      	beq.n	8000fa2 <I2C_EV_IRQHandling+0x1b0>
	{
		//check device mode .
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d007      	beq.n	8000f8c <I2C_EV_IRQHandling+0x19a>
		{
			//The device is master

			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7f1b      	ldrb	r3, [r3, #28]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d10e      	bne.n	8000fa2 <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fe7e 	bl	8000c86 <I2C_MasterHandleRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
			}
		}
	}
}
 8000f8a:	e00a      	b.n	8000fa2 <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA)))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 8000f9a:	2109      	movs	r1, #9
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff f9ef 	bl	8000380 <I2C_ApplicationEventCallback>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <I2C_ER_IRQHandling>:
						#define I2C_ERROR_TIMEOUT 7

 */

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fbc:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc8:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00e      	beq.n	8000fee <I2C_ER_IRQHandling+0x44>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	695a      	ldr	r2, [r3, #20]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fe4:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff f9c9 	bl	8000380 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff8:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00e      	beq.n	800101e <I2C_ER_IRQHandling+0x74>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001014:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8001016:	2104      	movs	r1, #4
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff f9b1 	bl	8000380 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001028:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00e      	beq.n	800104e <I2C_ER_IRQHandling+0xa4>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001044:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001046:	2105      	movs	r1, #5
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff f999 	bl	8000380 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001058:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <I2C_ER_IRQHandling+0xd4>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001074:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001076:	2106      	movs	r1, #6
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f981 	bl	8000380 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001088:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00e      	beq.n	80010ae <I2C_ER_IRQHandling+0x104>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010a4:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 80010a6:	2107      	movs	r1, #7
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff f969 	bl	8000380 <I2C_ApplicationEventCallback>
	}

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <GPIO_PeriClockControl>:
//@param[in]		-ENABLE or Disable	macros
//@param[in]		-
//@return			-none
//@Note				-none

void	GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi){
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE){
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d162      	bne.n	8001190 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx==GPIOA){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a64      	ldr	r2, [pc, #400]	; (8001260 <GPIO_PeriClockControl+0x1a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d106      	bne.n	80010e0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLCK_EN();
 80010d2:	4b64      	ldr	r3, [pc, #400]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a63      	ldr	r2, [pc, #396]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
			else if(pGPIOx==GPIOI)
						{
					GPIOI_PCLCK_DI();
						}
	}
}
 80010de:	e0b9      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
	else if(pGPIOx==GPIOB)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a61      	ldr	r2, [pc, #388]	; (8001268 <GPIO_PeriClockControl+0x1b0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d106      	bne.n	80010f6 <GPIO_PeriClockControl+0x3e>
		GPIOB_PCLCK_EN();
 80010e8:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a5d      	ldr	r2, [pc, #372]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010f4:	e0ae      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
	else if(pGPIOx==GPIOC)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a5c      	ldr	r2, [pc, #368]	; (800126c <GPIO_PeriClockControl+0x1b4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d106      	bne.n	800110c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLCK_EN();
 80010fe:	4b59      	ldr	r3, [pc, #356]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a58      	ldr	r2, [pc, #352]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
}
 800110a:	e0a3      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
	else if(pGPIOx==GPIOD)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a58      	ldr	r2, [pc, #352]	; (8001270 <GPIO_PeriClockControl+0x1b8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d106      	bne.n	8001122 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLCK_EN();
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001120:	e098      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
	else if(pGPIOx==GPIOE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a53      	ldr	r2, [pc, #332]	; (8001274 <GPIO_PeriClockControl+0x1bc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d106      	bne.n	8001138 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLCK_EN();
 800112a:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a4d      	ldr	r2, [pc, #308]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001130:	f043 0310 	orr.w	r3, r3, #16
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001136:	e08d      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
	else if(pGPIOx==GPIOF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4f      	ldr	r2, [pc, #316]	; (8001278 <GPIO_PeriClockControl+0x1c0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d106      	bne.n	800114e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLCK_EN();
 8001140:	4b48      	ldr	r3, [pc, #288]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a47      	ldr	r2, [pc, #284]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001146:	f043 0320 	orr.w	r3, r3, #32
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800114c:	e082      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
	else if(pGPIOx==GPIOG)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	; (800127c <GPIO_PeriClockControl+0x1c4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d106      	bne.n	8001164 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLCK_EN();
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a42      	ldr	r2, [pc, #264]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800115c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001162:	e077      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
	else if(pGPIOx==GPIOH)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a46      	ldr	r2, [pc, #280]	; (8001280 <GPIO_PeriClockControl+0x1c8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d106      	bne.n	800117a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLCK_EN();
 800116c:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	4a3c      	ldr	r2, [pc, #240]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001176:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001178:	e06c      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
	else if(pGPIOx==GPIOI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a41      	ldr	r2, [pc, #260]	; (8001284 <GPIO_PeriClockControl+0x1cc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d168      	bne.n	8001254 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLCK_EN();
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a37      	ldr	r2, [pc, #220]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800118e:	e061      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx==GPIOA){
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a33      	ldr	r2, [pc, #204]	; (8001260 <GPIO_PeriClockControl+0x1a8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d106      	bne.n	80011a6 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLCK_DI();
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011a4:	e056      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
			else if(pGPIOx==GPIOB)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <GPIO_PeriClockControl+0x1b0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d106      	bne.n	80011bc <GPIO_PeriClockControl+0x104>
				GPIOB_PCLCK_DI();
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80011b4:	f023 0302 	bic.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011ba:	e04b      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
			else if(pGPIOx==GPIOC)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a2b      	ldr	r2, [pc, #172]	; (800126c <GPIO_PeriClockControl+0x1b4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d106      	bne.n	80011d2 <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLCK_DI();
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a26      	ldr	r2, [pc, #152]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011d0:	e040      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
			else if(pGPIOx==GPIOD)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a26      	ldr	r2, [pc, #152]	; (8001270 <GPIO_PeriClockControl+0x1b8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d106      	bne.n	80011e8 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLCK_DI();
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a21      	ldr	r2, [pc, #132]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80011e0:	f023 0308 	bic.w	r3, r3, #8
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011e6:	e035      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
			else if(pGPIOx==GPIOE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a22      	ldr	r2, [pc, #136]	; (8001274 <GPIO_PeriClockControl+0x1bc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d106      	bne.n	80011fe <GPIO_PeriClockControl+0x146>
					GPIOE_PCLCK_DI();
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 80011f6:	f023 0310 	bic.w	r3, r3, #16
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011fc:	e02a      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
			else if(pGPIOx==GPIOF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <GPIO_PeriClockControl+0x1c0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d106      	bne.n	8001214 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLCK_DI();
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800120c:	f023 0320 	bic.w	r3, r3, #32
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001212:	e01f      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
			else if(pGPIOx==GPIOG)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a19      	ldr	r2, [pc, #100]	; (800127c <GPIO_PeriClockControl+0x1c4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d106      	bne.n	800122a <GPIO_PeriClockControl+0x172>
					GPIOG_PCLCK_DI();
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a10      	ldr	r2, [pc, #64]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001228:	e014      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
			else if(pGPIOx==GPIOH)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <GPIO_PeriClockControl+0x1c8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d106      	bne.n	8001240 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLCK_DI();
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 8001238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800123e:	e009      	b.n	8001254 <GPIO_PeriClockControl+0x19c>
			else if(pGPIOx==GPIOI)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <GPIO_PeriClockControl+0x1cc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d105      	bne.n	8001254 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLCK_DI();
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <GPIO_PeriClockControl+0x1ac>)
 800124e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40020000 	.word	0x40020000
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400
 800126c:	40020800 	.word	0x40020800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40021000 	.word	0x40021000
 8001278:	40021400 	.word	0x40021400
 800127c:	40021800 	.word	0x40021800
 8001280:	40021c00 	.word	0x40021c00
 8001284:	40022000 	.word	0x40022000

08001288 <GPIO_Init>:
//@param[in]		-base address of gpio peripheral
//@param[in]		-ENABLE or Disable	macros
//@param[in]		-
//@return			-none
//@Note				-none
void	GPIO_Init(GPIO_Handle_t	*pGPIOHandle){
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	// 1.configure mode of gpio pin
	uint32_t temp=0;	//temp register
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff0c 	bl	80010b8 <GPIO_PeriClockControl>
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	795b      	ldrb	r3, [r3, #5]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d820      	bhi.n	80012ea <GPIO_Init+0x62>
		//no interrupt mode
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	795b      	ldrb	r3, [r3, #5]
 80012ac:	461a      	mov	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	617b      	str	r3, [r7, #20]
		//clear
		pGPIOHandle->pGPIOx->MODER&=~(0x3<<2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	791b      	ldrb	r3, [r3, #4]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2103      	movs	r1, #3
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
	//setting
		pGPIOHandle->pGPIOx->MODER|=temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e0cb      	b.n	8001482 <GPIO_Init+0x1fa>
	}else	//interrupt mode
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT){
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	795b      	ldrb	r3, [r3, #5]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d117      	bne.n	8001322 <GPIO_Init+0x9a>
			//1. configure the FTSR

			EXTI->FTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <GPIO_Init+0x198>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	7912      	ldrb	r2, [r2, #4]
 80012fa:	4611      	mov	r1, r2
 80012fc:	2201      	movs	r2, #1
 80012fe:	408a      	lsls	r2, r1
 8001300:	4611      	mov	r1, r2
 8001302:	4a47      	ldr	r2, [pc, #284]	; (8001420 <GPIO_Init+0x198>)
 8001304:	430b      	orrs	r3, r1
 8001306:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR&=~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <GPIO_Init+0x198>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	7912      	ldrb	r2, [r2, #4]
 8001310:	4611      	mov	r1, r2
 8001312:	2201      	movs	r2, #1
 8001314:	408a      	lsls	r2, r1
 8001316:	43d2      	mvns	r2, r2
 8001318:	4611      	mov	r1, r2
 800131a:	4a41      	ldr	r2, [pc, #260]	; (8001420 <GPIO_Init+0x198>)
 800131c:	400b      	ands	r3, r1
 800131e:	6093      	str	r3, [r2, #8]
 8001320:	e035      	b.n	800138e <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT){
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	795b      	ldrb	r3, [r3, #5]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d117      	bne.n	800135a <GPIO_Init+0xd2>
			//1.configure RTSR
			EXTI->RTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <GPIO_Init+0x198>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	7912      	ldrb	r2, [r2, #4]
 8001332:	4611      	mov	r1, r2
 8001334:	2201      	movs	r2, #1
 8001336:	408a      	lsls	r2, r1
 8001338:	4611      	mov	r1, r2
 800133a:	4a39      	ldr	r2, [pc, #228]	; (8001420 <GPIO_Init+0x198>)
 800133c:	430b      	orrs	r3, r1
 800133e:	6093      	str	r3, [r2, #8]
						//Clear the corresponding RTSR bit
						EXTI->FTSR&=~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001340:	4b37      	ldr	r3, [pc, #220]	; (8001420 <GPIO_Init+0x198>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	7912      	ldrb	r2, [r2, #4]
 8001348:	4611      	mov	r1, r2
 800134a:	2201      	movs	r2, #1
 800134c:	408a      	lsls	r2, r1
 800134e:	43d2      	mvns	r2, r2
 8001350:	4611      	mov	r1, r2
 8001352:	4a33      	ldr	r2, [pc, #204]	; (8001420 <GPIO_Init+0x198>)
 8001354:	400b      	ands	r3, r1
 8001356:	60d3      	str	r3, [r2, #12]
 8001358:	e019      	b.n	800138e <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	795b      	ldrb	r3, [r3, #5]
 800135e:	2b06      	cmp	r3, #6
 8001360:	d115      	bne.n	800138e <GPIO_Init+0x106>
			//1.configure both FTSR and RTSR
			EXTI->FTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <GPIO_Init+0x198>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	7912      	ldrb	r2, [r2, #4]
 800136a:	4611      	mov	r1, r2
 800136c:	2201      	movs	r2, #1
 800136e:	408a      	lsls	r2, r1
 8001370:	4611      	mov	r1, r2
 8001372:	4a2b      	ldr	r2, [pc, #172]	; (8001420 <GPIO_Init+0x198>)
 8001374:	430b      	orrs	r3, r1
 8001376:	60d3      	str	r3, [r2, #12]
						//Clear the corresponding RTSR bit
						EXTI->RTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <GPIO_Init+0x198>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	7912      	ldrb	r2, [r2, #4]
 8001380:	4611      	mov	r1, r2
 8001382:	2201      	movs	r2, #1
 8001384:	408a      	lsls	r2, r1
 8001386:	4611      	mov	r1, r2
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <GPIO_Init+0x198>)
 800138a:	430b      	orrs	r3, r1
 800138c:	6093      	str	r3, [r2, #8]

		}
		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t	temp1	=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	791b      	ldrb	r3, [r3, #4]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	74fb      	strb	r3, [r7, #19]
		uint8_t	temp2	=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	791b      	ldrb	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	74bb      	strb	r3, [r7, #18]
		uint8_t	portcode	=GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <GPIO_Init+0x19c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d04e      	beq.n	8001448 <GPIO_Init+0x1c0>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <GPIO_Init+0x1a0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d032      	beq.n	800141a <GPIO_Init+0x192>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1c      	ldr	r2, [pc, #112]	; (800142c <GPIO_Init+0x1a4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d02b      	beq.n	8001416 <GPIO_Init+0x18e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <GPIO_Init+0x1a8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d024      	beq.n	8001412 <GPIO_Init+0x18a>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <GPIO_Init+0x1ac>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01d      	beq.n	800140e <GPIO_Init+0x186>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <GPIO_Init+0x1b0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d016      	beq.n	800140a <GPIO_Init+0x182>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a16      	ldr	r2, [pc, #88]	; (800143c <GPIO_Init+0x1b4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00f      	beq.n	8001406 <GPIO_Init+0x17e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <GPIO_Init+0x1b8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d008      	beq.n	8001402 <GPIO_Init+0x17a>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <GPIO_Init+0x1bc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <GPIO_Init+0x176>
 80013fa:	2308      	movs	r3, #8
 80013fc:	e025      	b.n	800144a <GPIO_Init+0x1c2>
 80013fe:	2300      	movs	r3, #0
 8001400:	e023      	b.n	800144a <GPIO_Init+0x1c2>
 8001402:	2307      	movs	r3, #7
 8001404:	e021      	b.n	800144a <GPIO_Init+0x1c2>
 8001406:	2306      	movs	r3, #6
 8001408:	e01f      	b.n	800144a <GPIO_Init+0x1c2>
 800140a:	2305      	movs	r3, #5
 800140c:	e01d      	b.n	800144a <GPIO_Init+0x1c2>
 800140e:	2304      	movs	r3, #4
 8001410:	e01b      	b.n	800144a <GPIO_Init+0x1c2>
 8001412:	2303      	movs	r3, #3
 8001414:	e019      	b.n	800144a <GPIO_Init+0x1c2>
 8001416:	2302      	movs	r3, #2
 8001418:	e017      	b.n	800144a <GPIO_Init+0x1c2>
 800141a:	2301      	movs	r3, #1
 800141c:	e015      	b.n	800144a <GPIO_Init+0x1c2>
 800141e:	bf00      	nop
 8001420:	40013c00 	.word	0x40013c00
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40021400 	.word	0x40021400
 800143c:	40021800 	.word	0x40021800
 8001440:	40021c00 	.word	0x40021c00
 8001444:	40022000 	.word	0x40022000
 8001448:	2300      	movs	r3, #0
 800144a:	747b      	strb	r3, [r7, #17]
						SYSCFG_PCLK_EN();
 800144c:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <GPIO_Init+0x31c>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	4a54      	ldr	r2, [pc, #336]	; (80015a4 <GPIO_Init+0x31c>)
 8001452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001456:	6453      	str	r3, [r2, #68]	; 0x44
							SYSCFG->EXTICR[temp1]=portcode<<(temp2*4);
 8001458:	7c7a      	ldrb	r2, [r7, #17]
 800145a:	7cbb      	ldrb	r3, [r7, #18]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	fa02 f103 	lsl.w	r1, r2, r3
 8001462:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <GPIO_Init+0x320>)
 8001464:	7cfb      	ldrb	r3, [r7, #19]
 8001466:	3302      	adds	r3, #2
 8001468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3.enable the exti interrupt delivery using IMR
		EXTI->IMR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800146c:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <GPIO_Init+0x324>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	7912      	ldrb	r2, [r2, #4]
 8001474:	4611      	mov	r1, r2
 8001476:	2201      	movs	r2, #1
 8001478:	408a      	lsls	r2, r1
 800147a:	4611      	mov	r1, r2
 800147c:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <GPIO_Init+0x324>)
 800147e:	430b      	orrs	r3, r1
 8001480:	6013      	str	r3, [r2, #0]
	}
	temp=0;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]


	// 2.configure speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	799b      	ldrb	r3, [r3, #6]
 800148a:	461a      	mov	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR|=temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6899      	ldr	r1, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	609a      	str	r2, [r3, #8]
	temp=0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
	// 3.configure pupd settings
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	79db      	ldrb	r3, [r3, #7]
 80014b0:	461a      	mov	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	791b      	ldrb	r3, [r3, #4]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
	//clear
			pGPIOHandle->pGPIOx->PUPDR&=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	4619      	mov	r1, r3
 80014ca:	2303      	movs	r3, #3
 80014cc:	408b      	lsls	r3, r1
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	400a      	ands	r2, r1
 80014d8:	60da      	str	r2, [r3, #12]
		//setting
			pGPIOHandle->pGPIOx->PUPDR|=temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68d9      	ldr	r1, [r3, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	60da      	str	r2, [r3, #12]
		temp=0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7a1b      	ldrb	r3, [r3, #8]
 80014f2:	461a      	mov	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	791b      	ldrb	r3, [r3, #4]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
		//clear
				pGPIOHandle->pGPIOx->OTYPER&=~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	4619      	mov	r1, r3
 800150a:	2301      	movs	r3, #1
 800150c:	408b      	lsls	r3, r1
 800150e:	43db      	mvns	r3, r3
 8001510:	4619      	mov	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	400a      	ands	r2, r1
 8001518:	605a      	str	r2, [r3, #4]
			//setting
		pGPIOHandle->pGPIOx->OTYPER|=temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]
				temp=0;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
				if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	795b      	ldrb	r3, [r3, #5]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d132      	bne.n	800159c <GPIO_Init+0x314>
				{
					//CONFIGURE THE ALT FUNCTION REGISTERS.
					uint32_t	temp1,temp2;
					temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	791b      	ldrb	r3, [r3, #4]
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	60fb      	str	r3, [r7, #12]
					temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	60bb      	str	r3, [r7, #8]

					//CLEAR
					pGPIOHandle->pGPIOx->AFR[temp1]&=~(0xF<<(4*temp2));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	3208      	adds	r2, #8
 8001552:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	210f      	movs	r1, #15
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	4619      	mov	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4011      	ands	r1, r2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	3208      	adds	r2, #8
 800156e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					//SET
					pGPIOHandle->pGPIOx->AFR[temp1]|=(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	3208      	adds	r2, #8
 800157a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7a5b      	ldrb	r3, [r3, #9]
 8001582:	4619      	mov	r1, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	4619      	mov	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4311      	orrs	r1, r2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	3208      	adds	r2, #8
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				}


}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40013800 	.word	0x40013800
 80015ac:	40013c00 	.word	0x40013c00

080015b0 <GPIO_TogglePin>:
//@param[in]		-base address of gpio peripheral
//@param[in]		-Number of pin
//@param[in]		-
//@return			-none
//@Note				-uses XOR Operator to XOR desired pin
void	GPIO_TogglePin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber){
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR^=(1<<PinNumber);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	405a      	eors	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	615a      	str	r2, [r3, #20]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <GPIO_IRQConfig>:
//@param[in]		-number of interruption
//@param[in]		-Interruption priority
//@param[in]		-Disable or enable the interruption
//@return			-none
//@Note				-none
void	GPIO_IRQConfig(uint8_t	IRQNumber,uint8_t	EnorDi){
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
	{

		if(EnorDi == ENABLE)
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d133      	bne.n	8001656 <GPIO_IRQConfig+0x7e>
		{
			if(IRQNumber <= 31)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b1f      	cmp	r3, #31
 80015f2:	d80a      	bhi.n	800160a <GPIO_IRQConfig+0x32>
			{
				//program ISER0 register
				*NVIC_ISER0 |= ( 1 << IRQNumber );
 80015f4:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <GPIO_IRQConfig+0xf0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	4611      	mov	r1, r2
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <GPIO_IRQConfig+0xf0>)
 8001604:	430b      	orrs	r3, r1
 8001606:	6013      	str	r3, [r2, #0]
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
			}
		}

	}
}
 8001608:	e059      	b.n	80016be <GPIO_IRQConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	2b1f      	cmp	r3, #31
 800160e:	d90f      	bls.n	8001630 <GPIO_IRQConfig+0x58>
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b3f      	cmp	r3, #63	; 0x3f
 8001614:	d80c      	bhi.n	8001630 <GPIO_IRQConfig+0x58>
				*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <GPIO_IRQConfig+0xf4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	f002 021f 	and.w	r2, r2, #31
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f202 	lsl.w	r2, r1, r2
 8001626:	4611      	mov	r1, r2
 8001628:	4a28      	ldr	r2, [pc, #160]	; (80016cc <GPIO_IRQConfig+0xf4>)
 800162a:	430b      	orrs	r3, r1
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e046      	b.n	80016be <GPIO_IRQConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b3f      	cmp	r3, #63	; 0x3f
 8001634:	d943      	bls.n	80016be <GPIO_IRQConfig+0xe6>
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b5f      	cmp	r3, #95	; 0x5f
 800163a:	d840      	bhi.n	80016be <GPIO_IRQConfig+0xe6>
				*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <GPIO_IRQConfig+0xf8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4611      	mov	r1, r2
 800164e:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <GPIO_IRQConfig+0xf8>)
 8001650:	430b      	orrs	r3, r1
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	e033      	b.n	80016be <GPIO_IRQConfig+0xe6>
			if(IRQNumber <= 31)
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b1f      	cmp	r3, #31
 800165a:	d80a      	bhi.n	8001672 <GPIO_IRQConfig+0x9a>
				*NVIC_ICER0 |= ( 1 << IRQNumber );
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <GPIO_IRQConfig+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	79fa      	ldrb	r2, [r7, #7]
 8001662:	2101      	movs	r1, #1
 8001664:	fa01 f202 	lsl.w	r2, r1, r2
 8001668:	4611      	mov	r1, r2
 800166a:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <GPIO_IRQConfig+0xfc>)
 800166c:	430b      	orrs	r3, r1
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	e025      	b.n	80016be <GPIO_IRQConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b1f      	cmp	r3, #31
 8001676:	d90f      	bls.n	8001698 <GPIO_IRQConfig+0xc0>
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b3f      	cmp	r3, #63	; 0x3f
 800167c:	d80c      	bhi.n	8001698 <GPIO_IRQConfig+0xc0>
				*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <GPIO_IRQConfig+0x100>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	f002 021f 	and.w	r2, r2, #31
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	4611      	mov	r1, r2
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <GPIO_IRQConfig+0x100>)
 8001692:	430b      	orrs	r3, r1
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e012      	b.n	80016be <GPIO_IRQConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b3f      	cmp	r3, #63	; 0x3f
 800169c:	d90f      	bls.n	80016be <GPIO_IRQConfig+0xe6>
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b5f      	cmp	r3, #95	; 0x5f
 80016a2:	d80c      	bhi.n	80016be <GPIO_IRQConfig+0xe6>
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <GPIO_IRQConfig+0x104>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	79fa      	ldrb	r2, [r7, #7]
 80016aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	4611      	mov	r1, r2
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <GPIO_IRQConfig+0x104>)
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	e7ff      	b.n	80016be <GPIO_IRQConfig+0xe6>
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000e104 	.word	0xe000e104
 80016d0:	e000e108 	.word	0xe000e108
 80016d4:	e000e180 	.word	0xe000e180
 80016d8:	e000e184 	.word	0xe000e184
 80016dc:	e000e188 	.word	0xe000e188

080016e0 <GPIO_IRQPriorityConfig>:
//@param[in]		-number of IRQ
//@param[in]		-priority stablished
//@param[in]		-
//@return			-none
//@Note				-none
void	GPIO_IRQPriorityConfig(uint8_t	IRQNumber,uint32_t	IRQPriority){
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx	=IRQNumber/4;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section	=IRQNumber%4;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	73bb      	strb	r3, [r7, #14]
	uint8_t	shift_amount	=(8*iprx_section)+(8-NO_PR_BITS_IMPLEMENTED);
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3304      	adds	r3, #4
 8001702:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR+iprx)|=(IRQPriority<<(shift_amount));
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800170c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001710:	6819      	ldr	r1, [r3, #0]
 8001712:	7b7b      	ldrb	r3, [r7, #13]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	409a      	lsls	r2, r3
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001720:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
	...

08001734 <GPIO_IRQHandling>:
//@param[in]		-number of pin where it happened
//@param[in]		-
//@param[in]		-
//@return			-none
//@Note				-none
void	GPIO_IRQHandling(uint8_t PinNumber){
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]

	if(EXTI->PR &(1<<PinNumber)){
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <GPIO_IRQHandling+0x3c>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d009      	beq.n	8001764 <GPIO_IRQHandling+0x30>
		//clear

		EXTI->PR|=(1<<PinNumber);
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <GPIO_IRQHandling+0x3c>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4611      	mov	r1, r2
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <GPIO_IRQHandling+0x3c>)
 8001760:	430b      	orrs	r3, r1
 8001762:	6153      	str	r3, [r2, #20]
	}
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40013c00 	.word	0x40013c00

08001774 <__errno>:
 8001774:	4b01      	ldr	r3, [pc, #4]	; (800177c <__errno+0x8>)
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000002c 	.word	0x2000002c

08001780 <__libc_init_array>:
 8001780:	b570      	push	{r4, r5, r6, lr}
 8001782:	4d0d      	ldr	r5, [pc, #52]	; (80017b8 <__libc_init_array+0x38>)
 8001784:	4c0d      	ldr	r4, [pc, #52]	; (80017bc <__libc_init_array+0x3c>)
 8001786:	1b64      	subs	r4, r4, r5
 8001788:	10a4      	asrs	r4, r4, #2
 800178a:	2600      	movs	r6, #0
 800178c:	42a6      	cmp	r6, r4
 800178e:	d109      	bne.n	80017a4 <__libc_init_array+0x24>
 8001790:	4d0b      	ldr	r5, [pc, #44]	; (80017c0 <__libc_init_array+0x40>)
 8001792:	4c0c      	ldr	r4, [pc, #48]	; (80017c4 <__libc_init_array+0x44>)
 8001794:	f000 fe5c 	bl	8002450 <_init>
 8001798:	1b64      	subs	r4, r4, r5
 800179a:	10a4      	asrs	r4, r4, #2
 800179c:	2600      	movs	r6, #0
 800179e:	42a6      	cmp	r6, r4
 80017a0:	d105      	bne.n	80017ae <__libc_init_array+0x2e>
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
 80017a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a8:	4798      	blx	r3
 80017aa:	3601      	adds	r6, #1
 80017ac:	e7ee      	b.n	800178c <__libc_init_array+0xc>
 80017ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b2:	4798      	blx	r3
 80017b4:	3601      	adds	r6, #1
 80017b6:	e7f2      	b.n	800179e <__libc_init_array+0x1e>
 80017b8:	08002510 	.word	0x08002510
 80017bc:	08002510 	.word	0x08002510
 80017c0:	08002510 	.word	0x08002510
 80017c4:	08002514 	.word	0x08002514

080017c8 <memset>:
 80017c8:	4402      	add	r2, r0
 80017ca:	4603      	mov	r3, r0
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d100      	bne.n	80017d2 <memset+0xa>
 80017d0:	4770      	bx	lr
 80017d2:	f803 1b01 	strb.w	r1, [r3], #1
 80017d6:	e7f9      	b.n	80017cc <memset+0x4>

080017d8 <_puts_r>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	460e      	mov	r6, r1
 80017dc:	4605      	mov	r5, r0
 80017de:	b118      	cbz	r0, 80017e8 <_puts_r+0x10>
 80017e0:	6983      	ldr	r3, [r0, #24]
 80017e2:	b90b      	cbnz	r3, 80017e8 <_puts_r+0x10>
 80017e4:	f000 fa44 	bl	8001c70 <__sinit>
 80017e8:	69ab      	ldr	r3, [r5, #24]
 80017ea:	68ac      	ldr	r4, [r5, #8]
 80017ec:	b913      	cbnz	r3, 80017f4 <_puts_r+0x1c>
 80017ee:	4628      	mov	r0, r5
 80017f0:	f000 fa3e 	bl	8001c70 <__sinit>
 80017f4:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <_puts_r+0xd0>)
 80017f6:	429c      	cmp	r4, r3
 80017f8:	d120      	bne.n	800183c <_puts_r+0x64>
 80017fa:	686c      	ldr	r4, [r5, #4]
 80017fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017fe:	07db      	lsls	r3, r3, #31
 8001800:	d405      	bmi.n	800180e <_puts_r+0x36>
 8001802:	89a3      	ldrh	r3, [r4, #12]
 8001804:	0598      	lsls	r0, r3, #22
 8001806:	d402      	bmi.n	800180e <_puts_r+0x36>
 8001808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800180a:	f000 facf 	bl	8001dac <__retarget_lock_acquire_recursive>
 800180e:	89a3      	ldrh	r3, [r4, #12]
 8001810:	0719      	lsls	r1, r3, #28
 8001812:	d51d      	bpl.n	8001850 <_puts_r+0x78>
 8001814:	6923      	ldr	r3, [r4, #16]
 8001816:	b1db      	cbz	r3, 8001850 <_puts_r+0x78>
 8001818:	3e01      	subs	r6, #1
 800181a:	68a3      	ldr	r3, [r4, #8]
 800181c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001820:	3b01      	subs	r3, #1
 8001822:	60a3      	str	r3, [r4, #8]
 8001824:	bb39      	cbnz	r1, 8001876 <_puts_r+0x9e>
 8001826:	2b00      	cmp	r3, #0
 8001828:	da38      	bge.n	800189c <_puts_r+0xc4>
 800182a:	4622      	mov	r2, r4
 800182c:	210a      	movs	r1, #10
 800182e:	4628      	mov	r0, r5
 8001830:	f000 f848 	bl	80018c4 <__swbuf_r>
 8001834:	3001      	adds	r0, #1
 8001836:	d011      	beq.n	800185c <_puts_r+0x84>
 8001838:	250a      	movs	r5, #10
 800183a:	e011      	b.n	8001860 <_puts_r+0x88>
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <_puts_r+0xd4>)
 800183e:	429c      	cmp	r4, r3
 8001840:	d101      	bne.n	8001846 <_puts_r+0x6e>
 8001842:	68ac      	ldr	r4, [r5, #8]
 8001844:	e7da      	b.n	80017fc <_puts_r+0x24>
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <_puts_r+0xd8>)
 8001848:	429c      	cmp	r4, r3
 800184a:	bf08      	it	eq
 800184c:	68ec      	ldreq	r4, [r5, #12]
 800184e:	e7d5      	b.n	80017fc <_puts_r+0x24>
 8001850:	4621      	mov	r1, r4
 8001852:	4628      	mov	r0, r5
 8001854:	f000 f888 	bl	8001968 <__swsetup_r>
 8001858:	2800      	cmp	r0, #0
 800185a:	d0dd      	beq.n	8001818 <_puts_r+0x40>
 800185c:	f04f 35ff 	mov.w	r5, #4294967295
 8001860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001862:	07da      	lsls	r2, r3, #31
 8001864:	d405      	bmi.n	8001872 <_puts_r+0x9a>
 8001866:	89a3      	ldrh	r3, [r4, #12]
 8001868:	059b      	lsls	r3, r3, #22
 800186a:	d402      	bmi.n	8001872 <_puts_r+0x9a>
 800186c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800186e:	f000 fa9e 	bl	8001dae <__retarget_lock_release_recursive>
 8001872:	4628      	mov	r0, r5
 8001874:	bd70      	pop	{r4, r5, r6, pc}
 8001876:	2b00      	cmp	r3, #0
 8001878:	da04      	bge.n	8001884 <_puts_r+0xac>
 800187a:	69a2      	ldr	r2, [r4, #24]
 800187c:	429a      	cmp	r2, r3
 800187e:	dc06      	bgt.n	800188e <_puts_r+0xb6>
 8001880:	290a      	cmp	r1, #10
 8001882:	d004      	beq.n	800188e <_puts_r+0xb6>
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	6022      	str	r2, [r4, #0]
 800188a:	7019      	strb	r1, [r3, #0]
 800188c:	e7c5      	b.n	800181a <_puts_r+0x42>
 800188e:	4622      	mov	r2, r4
 8001890:	4628      	mov	r0, r5
 8001892:	f000 f817 	bl	80018c4 <__swbuf_r>
 8001896:	3001      	adds	r0, #1
 8001898:	d1bf      	bne.n	800181a <_puts_r+0x42>
 800189a:	e7df      	b.n	800185c <_puts_r+0x84>
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	250a      	movs	r5, #10
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	6022      	str	r2, [r4, #0]
 80018a4:	701d      	strb	r5, [r3, #0]
 80018a6:	e7db      	b.n	8001860 <_puts_r+0x88>
 80018a8:	080024d0 	.word	0x080024d0
 80018ac:	080024f0 	.word	0x080024f0
 80018b0:	080024b0 	.word	0x080024b0

080018b4 <puts>:
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <puts+0xc>)
 80018b6:	4601      	mov	r1, r0
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	f7ff bf8d 	b.w	80017d8 <_puts_r>
 80018be:	bf00      	nop
 80018c0:	2000002c 	.word	0x2000002c

080018c4 <__swbuf_r>:
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c6:	460e      	mov	r6, r1
 80018c8:	4614      	mov	r4, r2
 80018ca:	4605      	mov	r5, r0
 80018cc:	b118      	cbz	r0, 80018d6 <__swbuf_r+0x12>
 80018ce:	6983      	ldr	r3, [r0, #24]
 80018d0:	b90b      	cbnz	r3, 80018d6 <__swbuf_r+0x12>
 80018d2:	f000 f9cd 	bl	8001c70 <__sinit>
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <__swbuf_r+0x98>)
 80018d8:	429c      	cmp	r4, r3
 80018da:	d12b      	bne.n	8001934 <__swbuf_r+0x70>
 80018dc:	686c      	ldr	r4, [r5, #4]
 80018de:	69a3      	ldr	r3, [r4, #24]
 80018e0:	60a3      	str	r3, [r4, #8]
 80018e2:	89a3      	ldrh	r3, [r4, #12]
 80018e4:	071a      	lsls	r2, r3, #28
 80018e6:	d52f      	bpl.n	8001948 <__swbuf_r+0x84>
 80018e8:	6923      	ldr	r3, [r4, #16]
 80018ea:	b36b      	cbz	r3, 8001948 <__swbuf_r+0x84>
 80018ec:	6923      	ldr	r3, [r4, #16]
 80018ee:	6820      	ldr	r0, [r4, #0]
 80018f0:	1ac0      	subs	r0, r0, r3
 80018f2:	6963      	ldr	r3, [r4, #20]
 80018f4:	b2f6      	uxtb	r6, r6
 80018f6:	4283      	cmp	r3, r0
 80018f8:	4637      	mov	r7, r6
 80018fa:	dc04      	bgt.n	8001906 <__swbuf_r+0x42>
 80018fc:	4621      	mov	r1, r4
 80018fe:	4628      	mov	r0, r5
 8001900:	f000 f922 	bl	8001b48 <_fflush_r>
 8001904:	bb30      	cbnz	r0, 8001954 <__swbuf_r+0x90>
 8001906:	68a3      	ldr	r3, [r4, #8]
 8001908:	3b01      	subs	r3, #1
 800190a:	60a3      	str	r3, [r4, #8]
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	6022      	str	r2, [r4, #0]
 8001912:	701e      	strb	r6, [r3, #0]
 8001914:	6963      	ldr	r3, [r4, #20]
 8001916:	3001      	adds	r0, #1
 8001918:	4283      	cmp	r3, r0
 800191a:	d004      	beq.n	8001926 <__swbuf_r+0x62>
 800191c:	89a3      	ldrh	r3, [r4, #12]
 800191e:	07db      	lsls	r3, r3, #31
 8001920:	d506      	bpl.n	8001930 <__swbuf_r+0x6c>
 8001922:	2e0a      	cmp	r6, #10
 8001924:	d104      	bne.n	8001930 <__swbuf_r+0x6c>
 8001926:	4621      	mov	r1, r4
 8001928:	4628      	mov	r0, r5
 800192a:	f000 f90d 	bl	8001b48 <_fflush_r>
 800192e:	b988      	cbnz	r0, 8001954 <__swbuf_r+0x90>
 8001930:	4638      	mov	r0, r7
 8001932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <__swbuf_r+0x9c>)
 8001936:	429c      	cmp	r4, r3
 8001938:	d101      	bne.n	800193e <__swbuf_r+0x7a>
 800193a:	68ac      	ldr	r4, [r5, #8]
 800193c:	e7cf      	b.n	80018de <__swbuf_r+0x1a>
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <__swbuf_r+0xa0>)
 8001940:	429c      	cmp	r4, r3
 8001942:	bf08      	it	eq
 8001944:	68ec      	ldreq	r4, [r5, #12]
 8001946:	e7ca      	b.n	80018de <__swbuf_r+0x1a>
 8001948:	4621      	mov	r1, r4
 800194a:	4628      	mov	r0, r5
 800194c:	f000 f80c 	bl	8001968 <__swsetup_r>
 8001950:	2800      	cmp	r0, #0
 8001952:	d0cb      	beq.n	80018ec <__swbuf_r+0x28>
 8001954:	f04f 37ff 	mov.w	r7, #4294967295
 8001958:	e7ea      	b.n	8001930 <__swbuf_r+0x6c>
 800195a:	bf00      	nop
 800195c:	080024d0 	.word	0x080024d0
 8001960:	080024f0 	.word	0x080024f0
 8001964:	080024b0 	.word	0x080024b0

08001968 <__swsetup_r>:
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <__swsetup_r+0xcc>)
 800196a:	b570      	push	{r4, r5, r6, lr}
 800196c:	681d      	ldr	r5, [r3, #0]
 800196e:	4606      	mov	r6, r0
 8001970:	460c      	mov	r4, r1
 8001972:	b125      	cbz	r5, 800197e <__swsetup_r+0x16>
 8001974:	69ab      	ldr	r3, [r5, #24]
 8001976:	b913      	cbnz	r3, 800197e <__swsetup_r+0x16>
 8001978:	4628      	mov	r0, r5
 800197a:	f000 f979 	bl	8001c70 <__sinit>
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <__swsetup_r+0xd0>)
 8001980:	429c      	cmp	r4, r3
 8001982:	d10f      	bne.n	80019a4 <__swsetup_r+0x3c>
 8001984:	686c      	ldr	r4, [r5, #4]
 8001986:	89a3      	ldrh	r3, [r4, #12]
 8001988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800198c:	0719      	lsls	r1, r3, #28
 800198e:	d42c      	bmi.n	80019ea <__swsetup_r+0x82>
 8001990:	06dd      	lsls	r5, r3, #27
 8001992:	d411      	bmi.n	80019b8 <__swsetup_r+0x50>
 8001994:	2309      	movs	r3, #9
 8001996:	6033      	str	r3, [r6, #0]
 8001998:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800199c:	81a3      	strh	r3, [r4, #12]
 800199e:	f04f 30ff 	mov.w	r0, #4294967295
 80019a2:	e03e      	b.n	8001a22 <__swsetup_r+0xba>
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <__swsetup_r+0xd4>)
 80019a6:	429c      	cmp	r4, r3
 80019a8:	d101      	bne.n	80019ae <__swsetup_r+0x46>
 80019aa:	68ac      	ldr	r4, [r5, #8]
 80019ac:	e7eb      	b.n	8001986 <__swsetup_r+0x1e>
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <__swsetup_r+0xd8>)
 80019b0:	429c      	cmp	r4, r3
 80019b2:	bf08      	it	eq
 80019b4:	68ec      	ldreq	r4, [r5, #12]
 80019b6:	e7e6      	b.n	8001986 <__swsetup_r+0x1e>
 80019b8:	0758      	lsls	r0, r3, #29
 80019ba:	d512      	bpl.n	80019e2 <__swsetup_r+0x7a>
 80019bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019be:	b141      	cbz	r1, 80019d2 <__swsetup_r+0x6a>
 80019c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019c4:	4299      	cmp	r1, r3
 80019c6:	d002      	beq.n	80019ce <__swsetup_r+0x66>
 80019c8:	4630      	mov	r0, r6
 80019ca:	f000 fa57 	bl	8001e7c <_free_r>
 80019ce:	2300      	movs	r3, #0
 80019d0:	6363      	str	r3, [r4, #52]	; 0x34
 80019d2:	89a3      	ldrh	r3, [r4, #12]
 80019d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019d8:	81a3      	strh	r3, [r4, #12]
 80019da:	2300      	movs	r3, #0
 80019dc:	6063      	str	r3, [r4, #4]
 80019de:	6923      	ldr	r3, [r4, #16]
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	89a3      	ldrh	r3, [r4, #12]
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	81a3      	strh	r3, [r4, #12]
 80019ea:	6923      	ldr	r3, [r4, #16]
 80019ec:	b94b      	cbnz	r3, 8001a02 <__swsetup_r+0x9a>
 80019ee:	89a3      	ldrh	r3, [r4, #12]
 80019f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f8:	d003      	beq.n	8001a02 <__swsetup_r+0x9a>
 80019fa:	4621      	mov	r1, r4
 80019fc:	4630      	mov	r0, r6
 80019fe:	f000 f9fd 	bl	8001dfc <__smakebuf_r>
 8001a02:	89a0      	ldrh	r0, [r4, #12]
 8001a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a08:	f010 0301 	ands.w	r3, r0, #1
 8001a0c:	d00a      	beq.n	8001a24 <__swsetup_r+0xbc>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60a3      	str	r3, [r4, #8]
 8001a12:	6963      	ldr	r3, [r4, #20]
 8001a14:	425b      	negs	r3, r3
 8001a16:	61a3      	str	r3, [r4, #24]
 8001a18:	6923      	ldr	r3, [r4, #16]
 8001a1a:	b943      	cbnz	r3, 8001a2e <__swsetup_r+0xc6>
 8001a1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a20:	d1ba      	bne.n	8001998 <__swsetup_r+0x30>
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
 8001a24:	0781      	lsls	r1, r0, #30
 8001a26:	bf58      	it	pl
 8001a28:	6963      	ldrpl	r3, [r4, #20]
 8001a2a:	60a3      	str	r3, [r4, #8]
 8001a2c:	e7f4      	b.n	8001a18 <__swsetup_r+0xb0>
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e7f7      	b.n	8001a22 <__swsetup_r+0xba>
 8001a32:	bf00      	nop
 8001a34:	2000002c 	.word	0x2000002c
 8001a38:	080024d0 	.word	0x080024d0
 8001a3c:	080024f0 	.word	0x080024f0
 8001a40:	080024b0 	.word	0x080024b0

08001a44 <__sflush_r>:
 8001a44:	898a      	ldrh	r2, [r1, #12]
 8001a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a48:	4605      	mov	r5, r0
 8001a4a:	0710      	lsls	r0, r2, #28
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	d457      	bmi.n	8001b00 <__sflush_r+0xbc>
 8001a50:	684b      	ldr	r3, [r1, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dc04      	bgt.n	8001a60 <__sflush_r+0x1c>
 8001a56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	dc01      	bgt.n	8001a60 <__sflush_r+0x1c>
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a62:	2e00      	cmp	r6, #0
 8001a64:	d0fa      	beq.n	8001a5c <__sflush_r+0x18>
 8001a66:	2300      	movs	r3, #0
 8001a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a6c:	682f      	ldr	r7, [r5, #0]
 8001a6e:	602b      	str	r3, [r5, #0]
 8001a70:	d032      	beq.n	8001ad8 <__sflush_r+0x94>
 8001a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	075a      	lsls	r2, r3, #29
 8001a78:	d505      	bpl.n	8001a86 <__sflush_r+0x42>
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	1ac0      	subs	r0, r0, r3
 8001a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a80:	b10b      	cbz	r3, 8001a86 <__sflush_r+0x42>
 8001a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a84:	1ac0      	subs	r0, r0, r3
 8001a86:	2300      	movs	r3, #0
 8001a88:	4602      	mov	r2, r0
 8001a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a8c:	6a21      	ldr	r1, [r4, #32]
 8001a8e:	4628      	mov	r0, r5
 8001a90:	47b0      	blx	r6
 8001a92:	1c43      	adds	r3, r0, #1
 8001a94:	89a3      	ldrh	r3, [r4, #12]
 8001a96:	d106      	bne.n	8001aa6 <__sflush_r+0x62>
 8001a98:	6829      	ldr	r1, [r5, #0]
 8001a9a:	291d      	cmp	r1, #29
 8001a9c:	d82c      	bhi.n	8001af8 <__sflush_r+0xb4>
 8001a9e:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <__sflush_r+0x100>)
 8001aa0:	40ca      	lsrs	r2, r1
 8001aa2:	07d6      	lsls	r6, r2, #31
 8001aa4:	d528      	bpl.n	8001af8 <__sflush_r+0xb4>
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	6062      	str	r2, [r4, #4]
 8001aaa:	04d9      	lsls	r1, r3, #19
 8001aac:	6922      	ldr	r2, [r4, #16]
 8001aae:	6022      	str	r2, [r4, #0]
 8001ab0:	d504      	bpl.n	8001abc <__sflush_r+0x78>
 8001ab2:	1c42      	adds	r2, r0, #1
 8001ab4:	d101      	bne.n	8001aba <__sflush_r+0x76>
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	b903      	cbnz	r3, 8001abc <__sflush_r+0x78>
 8001aba:	6560      	str	r0, [r4, #84]	; 0x54
 8001abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001abe:	602f      	str	r7, [r5, #0]
 8001ac0:	2900      	cmp	r1, #0
 8001ac2:	d0cb      	beq.n	8001a5c <__sflush_r+0x18>
 8001ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ac8:	4299      	cmp	r1, r3
 8001aca:	d002      	beq.n	8001ad2 <__sflush_r+0x8e>
 8001acc:	4628      	mov	r0, r5
 8001ace:	f000 f9d5 	bl	8001e7c <_free_r>
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8001ad6:	e7c2      	b.n	8001a5e <__sflush_r+0x1a>
 8001ad8:	6a21      	ldr	r1, [r4, #32]
 8001ada:	2301      	movs	r3, #1
 8001adc:	4628      	mov	r0, r5
 8001ade:	47b0      	blx	r6
 8001ae0:	1c41      	adds	r1, r0, #1
 8001ae2:	d1c7      	bne.n	8001a74 <__sflush_r+0x30>
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0c4      	beq.n	8001a74 <__sflush_r+0x30>
 8001aea:	2b1d      	cmp	r3, #29
 8001aec:	d001      	beq.n	8001af2 <__sflush_r+0xae>
 8001aee:	2b16      	cmp	r3, #22
 8001af0:	d101      	bne.n	8001af6 <__sflush_r+0xb2>
 8001af2:	602f      	str	r7, [r5, #0]
 8001af4:	e7b2      	b.n	8001a5c <__sflush_r+0x18>
 8001af6:	89a3      	ldrh	r3, [r4, #12]
 8001af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afc:	81a3      	strh	r3, [r4, #12]
 8001afe:	e7ae      	b.n	8001a5e <__sflush_r+0x1a>
 8001b00:	690f      	ldr	r7, [r1, #16]
 8001b02:	2f00      	cmp	r7, #0
 8001b04:	d0aa      	beq.n	8001a5c <__sflush_r+0x18>
 8001b06:	0793      	lsls	r3, r2, #30
 8001b08:	680e      	ldr	r6, [r1, #0]
 8001b0a:	bf08      	it	eq
 8001b0c:	694b      	ldreq	r3, [r1, #20]
 8001b0e:	600f      	str	r7, [r1, #0]
 8001b10:	bf18      	it	ne
 8001b12:	2300      	movne	r3, #0
 8001b14:	1bf6      	subs	r6, r6, r7
 8001b16:	608b      	str	r3, [r1, #8]
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	dd9f      	ble.n	8001a5c <__sflush_r+0x18>
 8001b1c:	6a21      	ldr	r1, [r4, #32]
 8001b1e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001b22:	4633      	mov	r3, r6
 8001b24:	463a      	mov	r2, r7
 8001b26:	4628      	mov	r0, r5
 8001b28:	47e0      	blx	ip
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	dc06      	bgt.n	8001b3c <__sflush_r+0xf8>
 8001b2e:	89a3      	ldrh	r3, [r4, #12]
 8001b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b34:	81a3      	strh	r3, [r4, #12]
 8001b36:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3a:	e790      	b.n	8001a5e <__sflush_r+0x1a>
 8001b3c:	4407      	add	r7, r0
 8001b3e:	1a36      	subs	r6, r6, r0
 8001b40:	e7ea      	b.n	8001b18 <__sflush_r+0xd4>
 8001b42:	bf00      	nop
 8001b44:	20400001 	.word	0x20400001

08001b48 <_fflush_r>:
 8001b48:	b538      	push	{r3, r4, r5, lr}
 8001b4a:	690b      	ldr	r3, [r1, #16]
 8001b4c:	4605      	mov	r5, r0
 8001b4e:	460c      	mov	r4, r1
 8001b50:	b913      	cbnz	r3, 8001b58 <_fflush_r+0x10>
 8001b52:	2500      	movs	r5, #0
 8001b54:	4628      	mov	r0, r5
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
 8001b58:	b118      	cbz	r0, 8001b62 <_fflush_r+0x1a>
 8001b5a:	6983      	ldr	r3, [r0, #24]
 8001b5c:	b90b      	cbnz	r3, 8001b62 <_fflush_r+0x1a>
 8001b5e:	f000 f887 	bl	8001c70 <__sinit>
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <_fflush_r+0x6c>)
 8001b64:	429c      	cmp	r4, r3
 8001b66:	d11b      	bne.n	8001ba0 <_fflush_r+0x58>
 8001b68:	686c      	ldr	r4, [r5, #4]
 8001b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0ef      	beq.n	8001b52 <_fflush_r+0xa>
 8001b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b74:	07d0      	lsls	r0, r2, #31
 8001b76:	d404      	bmi.n	8001b82 <_fflush_r+0x3a>
 8001b78:	0599      	lsls	r1, r3, #22
 8001b7a:	d402      	bmi.n	8001b82 <_fflush_r+0x3a>
 8001b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b7e:	f000 f915 	bl	8001dac <__retarget_lock_acquire_recursive>
 8001b82:	4628      	mov	r0, r5
 8001b84:	4621      	mov	r1, r4
 8001b86:	f7ff ff5d 	bl	8001a44 <__sflush_r>
 8001b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b8c:	07da      	lsls	r2, r3, #31
 8001b8e:	4605      	mov	r5, r0
 8001b90:	d4e0      	bmi.n	8001b54 <_fflush_r+0xc>
 8001b92:	89a3      	ldrh	r3, [r4, #12]
 8001b94:	059b      	lsls	r3, r3, #22
 8001b96:	d4dd      	bmi.n	8001b54 <_fflush_r+0xc>
 8001b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b9a:	f000 f908 	bl	8001dae <__retarget_lock_release_recursive>
 8001b9e:	e7d9      	b.n	8001b54 <_fflush_r+0xc>
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <_fflush_r+0x70>)
 8001ba2:	429c      	cmp	r4, r3
 8001ba4:	d101      	bne.n	8001baa <_fflush_r+0x62>
 8001ba6:	68ac      	ldr	r4, [r5, #8]
 8001ba8:	e7df      	b.n	8001b6a <_fflush_r+0x22>
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <_fflush_r+0x74>)
 8001bac:	429c      	cmp	r4, r3
 8001bae:	bf08      	it	eq
 8001bb0:	68ec      	ldreq	r4, [r5, #12]
 8001bb2:	e7da      	b.n	8001b6a <_fflush_r+0x22>
 8001bb4:	080024d0 	.word	0x080024d0
 8001bb8:	080024f0 	.word	0x080024f0
 8001bbc:	080024b0 	.word	0x080024b0

08001bc0 <std>:
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	b510      	push	{r4, lr}
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8001bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bce:	6083      	str	r3, [r0, #8]
 8001bd0:	8181      	strh	r1, [r0, #12]
 8001bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8001bd4:	81c2      	strh	r2, [r0, #14]
 8001bd6:	6183      	str	r3, [r0, #24]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2208      	movs	r2, #8
 8001bdc:	305c      	adds	r0, #92	; 0x5c
 8001bde:	f7ff fdf3 	bl	80017c8 <memset>
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <std+0x38>)
 8001be4:	6263      	str	r3, [r4, #36]	; 0x24
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <std+0x3c>)
 8001be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <std+0x40>)
 8001bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <std+0x44>)
 8001bf0:	6224      	str	r4, [r4, #32]
 8001bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8001bf4:	bd10      	pop	{r4, pc}
 8001bf6:	bf00      	nop
 8001bf8:	08002059 	.word	0x08002059
 8001bfc:	0800207b 	.word	0x0800207b
 8001c00:	080020b3 	.word	0x080020b3
 8001c04:	080020d7 	.word	0x080020d7

08001c08 <_cleanup_r>:
 8001c08:	4901      	ldr	r1, [pc, #4]	; (8001c10 <_cleanup_r+0x8>)
 8001c0a:	f000 b8af 	b.w	8001d6c <_fwalk_reent>
 8001c0e:	bf00      	nop
 8001c10:	08001b49 	.word	0x08001b49

08001c14 <__sfmoreglue>:
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	2268      	movs	r2, #104	; 0x68
 8001c18:	1e4d      	subs	r5, r1, #1
 8001c1a:	4355      	muls	r5, r2
 8001c1c:	460e      	mov	r6, r1
 8001c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c22:	f000 f995 	bl	8001f50 <_malloc_r>
 8001c26:	4604      	mov	r4, r0
 8001c28:	b140      	cbz	r0, 8001c3c <__sfmoreglue+0x28>
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8001c30:	300c      	adds	r0, #12
 8001c32:	60a0      	str	r0, [r4, #8]
 8001c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c38:	f7ff fdc6 	bl	80017c8 <memset>
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}

08001c40 <__sfp_lock_acquire>:
 8001c40:	4801      	ldr	r0, [pc, #4]	; (8001c48 <__sfp_lock_acquire+0x8>)
 8001c42:	f000 b8b3 	b.w	8001dac <__retarget_lock_acquire_recursive>
 8001c46:	bf00      	nop
 8001c48:	20000105 	.word	0x20000105

08001c4c <__sfp_lock_release>:
 8001c4c:	4801      	ldr	r0, [pc, #4]	; (8001c54 <__sfp_lock_release+0x8>)
 8001c4e:	f000 b8ae 	b.w	8001dae <__retarget_lock_release_recursive>
 8001c52:	bf00      	nop
 8001c54:	20000105 	.word	0x20000105

08001c58 <__sinit_lock_acquire>:
 8001c58:	4801      	ldr	r0, [pc, #4]	; (8001c60 <__sinit_lock_acquire+0x8>)
 8001c5a:	f000 b8a7 	b.w	8001dac <__retarget_lock_acquire_recursive>
 8001c5e:	bf00      	nop
 8001c60:	20000106 	.word	0x20000106

08001c64 <__sinit_lock_release>:
 8001c64:	4801      	ldr	r0, [pc, #4]	; (8001c6c <__sinit_lock_release+0x8>)
 8001c66:	f000 b8a2 	b.w	8001dae <__retarget_lock_release_recursive>
 8001c6a:	bf00      	nop
 8001c6c:	20000106 	.word	0x20000106

08001c70 <__sinit>:
 8001c70:	b510      	push	{r4, lr}
 8001c72:	4604      	mov	r4, r0
 8001c74:	f7ff fff0 	bl	8001c58 <__sinit_lock_acquire>
 8001c78:	69a3      	ldr	r3, [r4, #24]
 8001c7a:	b11b      	cbz	r3, 8001c84 <__sinit+0x14>
 8001c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c80:	f7ff bff0 	b.w	8001c64 <__sinit_lock_release>
 8001c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c88:	6523      	str	r3, [r4, #80]	; 0x50
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <__sinit+0x68>)
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <__sinit+0x6c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c92:	42a3      	cmp	r3, r4
 8001c94:	bf04      	itt	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	61a3      	streq	r3, [r4, #24]
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f000 f820 	bl	8001ce0 <__sfp>
 8001ca0:	6060      	str	r0, [r4, #4]
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 f81c 	bl	8001ce0 <__sfp>
 8001ca8:	60a0      	str	r0, [r4, #8]
 8001caa:	4620      	mov	r0, r4
 8001cac:	f000 f818 	bl	8001ce0 <__sfp>
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60e0      	str	r0, [r4, #12]
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	6860      	ldr	r0, [r4, #4]
 8001cb8:	f7ff ff82 	bl	8001bc0 <std>
 8001cbc:	68a0      	ldr	r0, [r4, #8]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2109      	movs	r1, #9
 8001cc2:	f7ff ff7d 	bl	8001bc0 <std>
 8001cc6:	68e0      	ldr	r0, [r4, #12]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	2112      	movs	r1, #18
 8001ccc:	f7ff ff78 	bl	8001bc0 <std>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61a3      	str	r3, [r4, #24]
 8001cd4:	e7d2      	b.n	8001c7c <__sinit+0xc>
 8001cd6:	bf00      	nop
 8001cd8:	080024ac 	.word	0x080024ac
 8001cdc:	08001c09 	.word	0x08001c09

08001ce0 <__sfp>:
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	4607      	mov	r7, r0
 8001ce4:	f7ff ffac 	bl	8001c40 <__sfp_lock_acquire>
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <__sfp+0x84>)
 8001cea:	681e      	ldr	r6, [r3, #0]
 8001cec:	69b3      	ldr	r3, [r6, #24]
 8001cee:	b913      	cbnz	r3, 8001cf6 <__sfp+0x16>
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f7ff ffbd 	bl	8001c70 <__sinit>
 8001cf6:	3648      	adds	r6, #72	; 0x48
 8001cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	d503      	bpl.n	8001d08 <__sfp+0x28>
 8001d00:	6833      	ldr	r3, [r6, #0]
 8001d02:	b30b      	cbz	r3, 8001d48 <__sfp+0x68>
 8001d04:	6836      	ldr	r6, [r6, #0]
 8001d06:	e7f7      	b.n	8001cf8 <__sfp+0x18>
 8001d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d0c:	b9d5      	cbnz	r5, 8001d44 <__sfp+0x64>
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <__sfp+0x88>)
 8001d10:	60e3      	str	r3, [r4, #12]
 8001d12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001d16:	6665      	str	r5, [r4, #100]	; 0x64
 8001d18:	f000 f847 	bl	8001daa <__retarget_lock_init_recursive>
 8001d1c:	f7ff ff96 	bl	8001c4c <__sfp_lock_release>
 8001d20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d28:	6025      	str	r5, [r4, #0]
 8001d2a:	61a5      	str	r5, [r4, #24]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	4629      	mov	r1, r5
 8001d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d34:	f7ff fd48 	bl	80017c8 <memset>
 8001d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d40:	4620      	mov	r0, r4
 8001d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d44:	3468      	adds	r4, #104	; 0x68
 8001d46:	e7d9      	b.n	8001cfc <__sfp+0x1c>
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	f7ff ff62 	bl	8001c14 <__sfmoreglue>
 8001d50:	4604      	mov	r4, r0
 8001d52:	6030      	str	r0, [r6, #0]
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d1d5      	bne.n	8001d04 <__sfp+0x24>
 8001d58:	f7ff ff78 	bl	8001c4c <__sfp_lock_release>
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	e7ee      	b.n	8001d40 <__sfp+0x60>
 8001d62:	bf00      	nop
 8001d64:	080024ac 	.word	0x080024ac
 8001d68:	ffff0001 	.word	0xffff0001

08001d6c <_fwalk_reent>:
 8001d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d70:	4606      	mov	r6, r0
 8001d72:	4688      	mov	r8, r1
 8001d74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d78:	2700      	movs	r7, #0
 8001d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8001d82:	d505      	bpl.n	8001d90 <_fwalk_reent+0x24>
 8001d84:	6824      	ldr	r4, [r4, #0]
 8001d86:	2c00      	cmp	r4, #0
 8001d88:	d1f7      	bne.n	8001d7a <_fwalk_reent+0xe>
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d90:	89ab      	ldrh	r3, [r5, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d907      	bls.n	8001da6 <_fwalk_reent+0x3a>
 8001d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	d003      	beq.n	8001da6 <_fwalk_reent+0x3a>
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4630      	mov	r0, r6
 8001da2:	47c0      	blx	r8
 8001da4:	4307      	orrs	r7, r0
 8001da6:	3568      	adds	r5, #104	; 0x68
 8001da8:	e7e9      	b.n	8001d7e <_fwalk_reent+0x12>

08001daa <__retarget_lock_init_recursive>:
 8001daa:	4770      	bx	lr

08001dac <__retarget_lock_acquire_recursive>:
 8001dac:	4770      	bx	lr

08001dae <__retarget_lock_release_recursive>:
 8001dae:	4770      	bx	lr

08001db0 <__swhatbuf_r>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	460e      	mov	r6, r1
 8001db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db8:	2900      	cmp	r1, #0
 8001dba:	b096      	sub	sp, #88	; 0x58
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	da08      	bge.n	8001dd4 <__swhatbuf_r+0x24>
 8001dc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	602a      	str	r2, [r5, #0]
 8001dca:	061a      	lsls	r2, r3, #24
 8001dcc:	d410      	bmi.n	8001df0 <__swhatbuf_r+0x40>
 8001dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd2:	e00e      	b.n	8001df2 <__swhatbuf_r+0x42>
 8001dd4:	466a      	mov	r2, sp
 8001dd6:	f000 f9a5 	bl	8002124 <_fstat_r>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	dbf1      	blt.n	8001dc2 <__swhatbuf_r+0x12>
 8001dde:	9a01      	ldr	r2, [sp, #4]
 8001de0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001de4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001de8:	425a      	negs	r2, r3
 8001dea:	415a      	adcs	r2, r3
 8001dec:	602a      	str	r2, [r5, #0]
 8001dee:	e7ee      	b.n	8001dce <__swhatbuf_r+0x1e>
 8001df0:	2340      	movs	r3, #64	; 0x40
 8001df2:	2000      	movs	r0, #0
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	b016      	add	sp, #88	; 0x58
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001dfc <__smakebuf_r>:
 8001dfc:	898b      	ldrh	r3, [r1, #12]
 8001dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e00:	079d      	lsls	r5, r3, #30
 8001e02:	4606      	mov	r6, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	d507      	bpl.n	8001e18 <__smakebuf_r+0x1c>
 8001e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e0c:	6023      	str	r3, [r4, #0]
 8001e0e:	6123      	str	r3, [r4, #16]
 8001e10:	2301      	movs	r3, #1
 8001e12:	6163      	str	r3, [r4, #20]
 8001e14:	b002      	add	sp, #8
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
 8001e18:	ab01      	add	r3, sp, #4
 8001e1a:	466a      	mov	r2, sp
 8001e1c:	f7ff ffc8 	bl	8001db0 <__swhatbuf_r>
 8001e20:	9900      	ldr	r1, [sp, #0]
 8001e22:	4605      	mov	r5, r0
 8001e24:	4630      	mov	r0, r6
 8001e26:	f000 f893 	bl	8001f50 <_malloc_r>
 8001e2a:	b948      	cbnz	r0, 8001e40 <__smakebuf_r+0x44>
 8001e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e30:	059a      	lsls	r2, r3, #22
 8001e32:	d4ef      	bmi.n	8001e14 <__smakebuf_r+0x18>
 8001e34:	f023 0303 	bic.w	r3, r3, #3
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	81a3      	strh	r3, [r4, #12]
 8001e3e:	e7e3      	b.n	8001e08 <__smakebuf_r+0xc>
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <__smakebuf_r+0x7c>)
 8001e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e44:	89a3      	ldrh	r3, [r4, #12]
 8001e46:	6020      	str	r0, [r4, #0]
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	81a3      	strh	r3, [r4, #12]
 8001e4e:	9b00      	ldr	r3, [sp, #0]
 8001e50:	6163      	str	r3, [r4, #20]
 8001e52:	9b01      	ldr	r3, [sp, #4]
 8001e54:	6120      	str	r0, [r4, #16]
 8001e56:	b15b      	cbz	r3, 8001e70 <__smakebuf_r+0x74>
 8001e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f000 f973 	bl	8002148 <_isatty_r>
 8001e62:	b128      	cbz	r0, 8001e70 <__smakebuf_r+0x74>
 8001e64:	89a3      	ldrh	r3, [r4, #12]
 8001e66:	f023 0303 	bic.w	r3, r3, #3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	81a3      	strh	r3, [r4, #12]
 8001e70:	89a0      	ldrh	r0, [r4, #12]
 8001e72:	4305      	orrs	r5, r0
 8001e74:	81a5      	strh	r5, [r4, #12]
 8001e76:	e7cd      	b.n	8001e14 <__smakebuf_r+0x18>
 8001e78:	08001c09 	.word	0x08001c09

08001e7c <_free_r>:
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	4605      	mov	r5, r0
 8001e80:	2900      	cmp	r1, #0
 8001e82:	d041      	beq.n	8001f08 <_free_r+0x8c>
 8001e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e88:	1f0c      	subs	r4, r1, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bfb8      	it	lt
 8001e8e:	18e4      	addlt	r4, r4, r3
 8001e90:	f000 f97c 	bl	800218c <__malloc_lock>
 8001e94:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <_free_r+0x90>)
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	b933      	cbnz	r3, 8001ea8 <_free_r+0x2c>
 8001e9a:	6063      	str	r3, [r4, #4]
 8001e9c:	6014      	str	r4, [r2, #0]
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ea4:	f000 b978 	b.w	8002198 <__malloc_unlock>
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	d908      	bls.n	8001ebe <_free_r+0x42>
 8001eac:	6820      	ldr	r0, [r4, #0]
 8001eae:	1821      	adds	r1, r4, r0
 8001eb0:	428b      	cmp	r3, r1
 8001eb2:	bf01      	itttt	eq
 8001eb4:	6819      	ldreq	r1, [r3, #0]
 8001eb6:	685b      	ldreq	r3, [r3, #4]
 8001eb8:	1809      	addeq	r1, r1, r0
 8001eba:	6021      	streq	r1, [r4, #0]
 8001ebc:	e7ed      	b.n	8001e9a <_free_r+0x1e>
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	b10b      	cbz	r3, 8001ec8 <_free_r+0x4c>
 8001ec4:	42a3      	cmp	r3, r4
 8001ec6:	d9fa      	bls.n	8001ebe <_free_r+0x42>
 8001ec8:	6811      	ldr	r1, [r2, #0]
 8001eca:	1850      	adds	r0, r2, r1
 8001ecc:	42a0      	cmp	r0, r4
 8001ece:	d10b      	bne.n	8001ee8 <_free_r+0x6c>
 8001ed0:	6820      	ldr	r0, [r4, #0]
 8001ed2:	4401      	add	r1, r0
 8001ed4:	1850      	adds	r0, r2, r1
 8001ed6:	4283      	cmp	r3, r0
 8001ed8:	6011      	str	r1, [r2, #0]
 8001eda:	d1e0      	bne.n	8001e9e <_free_r+0x22>
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	6053      	str	r3, [r2, #4]
 8001ee2:	4401      	add	r1, r0
 8001ee4:	6011      	str	r1, [r2, #0]
 8001ee6:	e7da      	b.n	8001e9e <_free_r+0x22>
 8001ee8:	d902      	bls.n	8001ef0 <_free_r+0x74>
 8001eea:	230c      	movs	r3, #12
 8001eec:	602b      	str	r3, [r5, #0]
 8001eee:	e7d6      	b.n	8001e9e <_free_r+0x22>
 8001ef0:	6820      	ldr	r0, [r4, #0]
 8001ef2:	1821      	adds	r1, r4, r0
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	bf04      	itt	eq
 8001ef8:	6819      	ldreq	r1, [r3, #0]
 8001efa:	685b      	ldreq	r3, [r3, #4]
 8001efc:	6063      	str	r3, [r4, #4]
 8001efe:	bf04      	itt	eq
 8001f00:	1809      	addeq	r1, r1, r0
 8001f02:	6021      	streq	r1, [r4, #0]
 8001f04:	6054      	str	r4, [r2, #4]
 8001f06:	e7ca      	b.n	8001e9e <_free_r+0x22>
 8001f08:	bd38      	pop	{r3, r4, r5, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000108 	.word	0x20000108

08001f10 <sbrk_aligned>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4e0e      	ldr	r6, [pc, #56]	; (8001f4c <sbrk_aligned+0x3c>)
 8001f14:	460c      	mov	r4, r1
 8001f16:	6831      	ldr	r1, [r6, #0]
 8001f18:	4605      	mov	r5, r0
 8001f1a:	b911      	cbnz	r1, 8001f22 <sbrk_aligned+0x12>
 8001f1c:	f000 f88c 	bl	8002038 <_sbrk_r>
 8001f20:	6030      	str	r0, [r6, #0]
 8001f22:	4621      	mov	r1, r4
 8001f24:	4628      	mov	r0, r5
 8001f26:	f000 f887 	bl	8002038 <_sbrk_r>
 8001f2a:	1c43      	adds	r3, r0, #1
 8001f2c:	d00a      	beq.n	8001f44 <sbrk_aligned+0x34>
 8001f2e:	1cc4      	adds	r4, r0, #3
 8001f30:	f024 0403 	bic.w	r4, r4, #3
 8001f34:	42a0      	cmp	r0, r4
 8001f36:	d007      	beq.n	8001f48 <sbrk_aligned+0x38>
 8001f38:	1a21      	subs	r1, r4, r0
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	f000 f87c 	bl	8002038 <_sbrk_r>
 8001f40:	3001      	adds	r0, #1
 8001f42:	d101      	bne.n	8001f48 <sbrk_aligned+0x38>
 8001f44:	f04f 34ff 	mov.w	r4, #4294967295
 8001f48:	4620      	mov	r0, r4
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
 8001f4c:	2000010c 	.word	0x2000010c

08001f50 <_malloc_r>:
 8001f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f54:	1ccd      	adds	r5, r1, #3
 8001f56:	f025 0503 	bic.w	r5, r5, #3
 8001f5a:	3508      	adds	r5, #8
 8001f5c:	2d0c      	cmp	r5, #12
 8001f5e:	bf38      	it	cc
 8001f60:	250c      	movcc	r5, #12
 8001f62:	2d00      	cmp	r5, #0
 8001f64:	4607      	mov	r7, r0
 8001f66:	db01      	blt.n	8001f6c <_malloc_r+0x1c>
 8001f68:	42a9      	cmp	r1, r5
 8001f6a:	d905      	bls.n	8001f78 <_malloc_r+0x28>
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	2600      	movs	r6, #0
 8001f72:	4630      	mov	r0, r6
 8001f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f78:	4e2e      	ldr	r6, [pc, #184]	; (8002034 <_malloc_r+0xe4>)
 8001f7a:	f000 f907 	bl	800218c <__malloc_lock>
 8001f7e:	6833      	ldr	r3, [r6, #0]
 8001f80:	461c      	mov	r4, r3
 8001f82:	bb34      	cbnz	r4, 8001fd2 <_malloc_r+0x82>
 8001f84:	4629      	mov	r1, r5
 8001f86:	4638      	mov	r0, r7
 8001f88:	f7ff ffc2 	bl	8001f10 <sbrk_aligned>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	4604      	mov	r4, r0
 8001f90:	d14d      	bne.n	800202e <_malloc_r+0xde>
 8001f92:	6834      	ldr	r4, [r6, #0]
 8001f94:	4626      	mov	r6, r4
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	d140      	bne.n	800201c <_malloc_r+0xcc>
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	4638      	mov	r0, r7
 8001fa0:	eb04 0803 	add.w	r8, r4, r3
 8001fa4:	f000 f848 	bl	8002038 <_sbrk_r>
 8001fa8:	4580      	cmp	r8, r0
 8001faa:	d13a      	bne.n	8002022 <_malloc_r+0xd2>
 8001fac:	6821      	ldr	r1, [r4, #0]
 8001fae:	3503      	adds	r5, #3
 8001fb0:	1a6d      	subs	r5, r5, r1
 8001fb2:	f025 0503 	bic.w	r5, r5, #3
 8001fb6:	3508      	adds	r5, #8
 8001fb8:	2d0c      	cmp	r5, #12
 8001fba:	bf38      	it	cc
 8001fbc:	250c      	movcc	r5, #12
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	4638      	mov	r0, r7
 8001fc2:	f7ff ffa5 	bl	8001f10 <sbrk_aligned>
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	d02b      	beq.n	8002022 <_malloc_r+0xd2>
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	442b      	add	r3, r5
 8001fce:	6023      	str	r3, [r4, #0]
 8001fd0:	e00e      	b.n	8001ff0 <_malloc_r+0xa0>
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	1b52      	subs	r2, r2, r5
 8001fd6:	d41e      	bmi.n	8002016 <_malloc_r+0xc6>
 8001fd8:	2a0b      	cmp	r2, #11
 8001fda:	d916      	bls.n	800200a <_malloc_r+0xba>
 8001fdc:	1961      	adds	r1, r4, r5
 8001fde:	42a3      	cmp	r3, r4
 8001fe0:	6025      	str	r5, [r4, #0]
 8001fe2:	bf18      	it	ne
 8001fe4:	6059      	strne	r1, [r3, #4]
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	bf08      	it	eq
 8001fea:	6031      	streq	r1, [r6, #0]
 8001fec:	5162      	str	r2, [r4, r5]
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	4638      	mov	r0, r7
 8001ff2:	f104 060b 	add.w	r6, r4, #11
 8001ff6:	f000 f8cf 	bl	8002198 <__malloc_unlock>
 8001ffa:	f026 0607 	bic.w	r6, r6, #7
 8001ffe:	1d23      	adds	r3, r4, #4
 8002000:	1af2      	subs	r2, r6, r3
 8002002:	d0b6      	beq.n	8001f72 <_malloc_r+0x22>
 8002004:	1b9b      	subs	r3, r3, r6
 8002006:	50a3      	str	r3, [r4, r2]
 8002008:	e7b3      	b.n	8001f72 <_malloc_r+0x22>
 800200a:	6862      	ldr	r2, [r4, #4]
 800200c:	42a3      	cmp	r3, r4
 800200e:	bf0c      	ite	eq
 8002010:	6032      	streq	r2, [r6, #0]
 8002012:	605a      	strne	r2, [r3, #4]
 8002014:	e7ec      	b.n	8001ff0 <_malloc_r+0xa0>
 8002016:	4623      	mov	r3, r4
 8002018:	6864      	ldr	r4, [r4, #4]
 800201a:	e7b2      	b.n	8001f82 <_malloc_r+0x32>
 800201c:	4634      	mov	r4, r6
 800201e:	6876      	ldr	r6, [r6, #4]
 8002020:	e7b9      	b.n	8001f96 <_malloc_r+0x46>
 8002022:	230c      	movs	r3, #12
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4638      	mov	r0, r7
 8002028:	f000 f8b6 	bl	8002198 <__malloc_unlock>
 800202c:	e7a1      	b.n	8001f72 <_malloc_r+0x22>
 800202e:	6025      	str	r5, [r4, #0]
 8002030:	e7de      	b.n	8001ff0 <_malloc_r+0xa0>
 8002032:	bf00      	nop
 8002034:	20000108 	.word	0x20000108

08002038 <_sbrk_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4d06      	ldr	r5, [pc, #24]	; (8002054 <_sbrk_r+0x1c>)
 800203c:	2300      	movs	r3, #0
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	f7fe fa72 	bl	800052c <_sbrk>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_sbrk_r+0x1a>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_sbrk_r+0x1a>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	20000110 	.word	0x20000110

08002058 <__sread>:
 8002058:	b510      	push	{r4, lr}
 800205a:	460c      	mov	r4, r1
 800205c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002060:	f000 f8a0 	bl	80021a4 <_read_r>
 8002064:	2800      	cmp	r0, #0
 8002066:	bfab      	itete	ge
 8002068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800206a:	89a3      	ldrhlt	r3, [r4, #12]
 800206c:	181b      	addge	r3, r3, r0
 800206e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002072:	bfac      	ite	ge
 8002074:	6563      	strge	r3, [r4, #84]	; 0x54
 8002076:	81a3      	strhlt	r3, [r4, #12]
 8002078:	bd10      	pop	{r4, pc}

0800207a <__swrite>:
 800207a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800207e:	461f      	mov	r7, r3
 8002080:	898b      	ldrh	r3, [r1, #12]
 8002082:	05db      	lsls	r3, r3, #23
 8002084:	4605      	mov	r5, r0
 8002086:	460c      	mov	r4, r1
 8002088:	4616      	mov	r6, r2
 800208a:	d505      	bpl.n	8002098 <__swrite+0x1e>
 800208c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002090:	2302      	movs	r3, #2
 8002092:	2200      	movs	r2, #0
 8002094:	f000 f868 	bl	8002168 <_lseek_r>
 8002098:	89a3      	ldrh	r3, [r4, #12]
 800209a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800209e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020a2:	81a3      	strh	r3, [r4, #12]
 80020a4:	4632      	mov	r2, r6
 80020a6:	463b      	mov	r3, r7
 80020a8:	4628      	mov	r0, r5
 80020aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ae:	f000 b817 	b.w	80020e0 <_write_r>

080020b2 <__sseek>:
 80020b2:	b510      	push	{r4, lr}
 80020b4:	460c      	mov	r4, r1
 80020b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ba:	f000 f855 	bl	8002168 <_lseek_r>
 80020be:	1c43      	adds	r3, r0, #1
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	bf15      	itete	ne
 80020c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80020c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020ce:	81a3      	strheq	r3, [r4, #12]
 80020d0:	bf18      	it	ne
 80020d2:	81a3      	strhne	r3, [r4, #12]
 80020d4:	bd10      	pop	{r4, pc}

080020d6 <__sclose>:
 80020d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020da:	f000 b813 	b.w	8002104 <_close_r>
	...

080020e0 <_write_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4d07      	ldr	r5, [pc, #28]	; (8002100 <_write_r+0x20>)
 80020e4:	4604      	mov	r4, r0
 80020e6:	4608      	mov	r0, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	2200      	movs	r2, #0
 80020ec:	602a      	str	r2, [r5, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f000 f90f 	bl	8002312 <_write>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	d102      	bne.n	80020fe <_write_r+0x1e>
 80020f8:	682b      	ldr	r3, [r5, #0]
 80020fa:	b103      	cbz	r3, 80020fe <_write_r+0x1e>
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
 8002100:	20000110 	.word	0x20000110

08002104 <_close_r>:
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4d06      	ldr	r5, [pc, #24]	; (8002120 <_close_r+0x1c>)
 8002108:	2300      	movs	r3, #0
 800210a:	4604      	mov	r4, r0
 800210c:	4608      	mov	r0, r1
 800210e:	602b      	str	r3, [r5, #0]
 8002110:	f000 f92c 	bl	800236c <_close>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d102      	bne.n	800211e <_close_r+0x1a>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	b103      	cbz	r3, 800211e <_close_r+0x1a>
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	20000110 	.word	0x20000110

08002124 <_fstat_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4d07      	ldr	r5, [pc, #28]	; (8002144 <_fstat_r+0x20>)
 8002128:	2300      	movs	r3, #0
 800212a:	4604      	mov	r4, r0
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	602b      	str	r3, [r5, #0]
 8002132:	f000 f962 	bl	80023fa <_fstat>
 8002136:	1c43      	adds	r3, r0, #1
 8002138:	d102      	bne.n	8002140 <_fstat_r+0x1c>
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	b103      	cbz	r3, 8002140 <_fstat_r+0x1c>
 800213e:	6023      	str	r3, [r4, #0]
 8002140:	bd38      	pop	{r3, r4, r5, pc}
 8002142:	bf00      	nop
 8002144:	20000110 	.word	0x20000110

08002148 <_isatty_r>:
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4d06      	ldr	r5, [pc, #24]	; (8002164 <_isatty_r+0x1c>)
 800214c:	2300      	movs	r3, #0
 800214e:	4604      	mov	r4, r0
 8002150:	4608      	mov	r0, r1
 8002152:	602b      	str	r3, [r5, #0]
 8002154:	f000 f95f 	bl	8002416 <_isatty>
 8002158:	1c43      	adds	r3, r0, #1
 800215a:	d102      	bne.n	8002162 <_isatty_r+0x1a>
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	b103      	cbz	r3, 8002162 <_isatty_r+0x1a>
 8002160:	6023      	str	r3, [r4, #0]
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	20000110 	.word	0x20000110

08002168 <_lseek_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	4d07      	ldr	r5, [pc, #28]	; (8002188 <_lseek_r+0x20>)
 800216c:	4604      	mov	r4, r0
 800216e:	4608      	mov	r0, r1
 8002170:	4611      	mov	r1, r2
 8002172:	2200      	movs	r2, #0
 8002174:	602a      	str	r2, [r5, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	f000 f8b9 	bl	80022ee <_lseek>
 800217c:	1c43      	adds	r3, r0, #1
 800217e:	d102      	bne.n	8002186 <_lseek_r+0x1e>
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	b103      	cbz	r3, 8002186 <_lseek_r+0x1e>
 8002184:	6023      	str	r3, [r4, #0]
 8002186:	bd38      	pop	{r3, r4, r5, pc}
 8002188:	20000110 	.word	0x20000110

0800218c <__malloc_lock>:
 800218c:	4801      	ldr	r0, [pc, #4]	; (8002194 <__malloc_lock+0x8>)
 800218e:	f7ff be0d 	b.w	8001dac <__retarget_lock_acquire_recursive>
 8002192:	bf00      	nop
 8002194:	20000104 	.word	0x20000104

08002198 <__malloc_unlock>:
 8002198:	4801      	ldr	r0, [pc, #4]	; (80021a0 <__malloc_unlock+0x8>)
 800219a:	f7ff be08 	b.w	8001dae <__retarget_lock_release_recursive>
 800219e:	bf00      	nop
 80021a0:	20000104 	.word	0x20000104

080021a4 <_read_r>:
 80021a4:	b538      	push	{r3, r4, r5, lr}
 80021a6:	4d07      	ldr	r5, [pc, #28]	; (80021c4 <_read_r+0x20>)
 80021a8:	4604      	mov	r4, r0
 80021aa:	4608      	mov	r0, r1
 80021ac:	4611      	mov	r1, r2
 80021ae:	2200      	movs	r2, #0
 80021b0:	602a      	str	r2, [r5, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f000 f845 	bl	8002242 <_read>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	d102      	bne.n	80021c2 <_read_r+0x1e>
 80021bc:	682b      	ldr	r3, [r5, #0]
 80021be:	b103      	cbz	r3, 80021c2 <_read_r+0x1e>
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	20000110 	.word	0x20000110

080021c8 <findslot>:
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <findslot+0x2c>)
 80021ca:	b510      	push	{r4, lr}
 80021cc:	4604      	mov	r4, r0
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	b118      	cbz	r0, 80021da <findslot+0x12>
 80021d2:	6983      	ldr	r3, [r0, #24]
 80021d4:	b90b      	cbnz	r3, 80021da <findslot+0x12>
 80021d6:	f7ff fd4b 	bl	8001c70 <__sinit>
 80021da:	2c13      	cmp	r4, #19
 80021dc:	d807      	bhi.n	80021ee <findslot+0x26>
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <findslot+0x30>)
 80021e0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80021e4:	3201      	adds	r2, #1
 80021e6:	d002      	beq.n	80021ee <findslot+0x26>
 80021e8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80021ec:	bd10      	pop	{r4, pc}
 80021ee:	2000      	movs	r0, #0
 80021f0:	e7fc      	b.n	80021ec <findslot+0x24>
 80021f2:	bf00      	nop
 80021f4:	2000002c 	.word	0x2000002c
 80021f8:	20000114 	.word	0x20000114

080021fc <error>:
 80021fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fe:	4604      	mov	r4, r0
 8002200:	f7ff fab8 	bl	8001774 <__errno>
 8002204:	2613      	movs	r6, #19
 8002206:	4605      	mov	r5, r0
 8002208:	2700      	movs	r7, #0
 800220a:	4630      	mov	r0, r6
 800220c:	4639      	mov	r1, r7
 800220e:	beab      	bkpt	0x00ab
 8002210:	4606      	mov	r6, r0
 8002212:	602e      	str	r6, [r5, #0]
 8002214:	4620      	mov	r0, r4
 8002216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002218 <checkerror>:
 8002218:	1c43      	adds	r3, r0, #1
 800221a:	d101      	bne.n	8002220 <checkerror+0x8>
 800221c:	f7ff bfee 	b.w	80021fc <error>
 8002220:	4770      	bx	lr

08002222 <_swiread>:
 8002222:	b530      	push	{r4, r5, lr}
 8002224:	b085      	sub	sp, #20
 8002226:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800222a:	9203      	str	r2, [sp, #12]
 800222c:	2406      	movs	r4, #6
 800222e:	ad01      	add	r5, sp, #4
 8002230:	4620      	mov	r0, r4
 8002232:	4629      	mov	r1, r5
 8002234:	beab      	bkpt	0x00ab
 8002236:	4604      	mov	r4, r0
 8002238:	4620      	mov	r0, r4
 800223a:	f7ff ffed 	bl	8002218 <checkerror>
 800223e:	b005      	add	sp, #20
 8002240:	bd30      	pop	{r4, r5, pc}

08002242 <_read>:
 8002242:	b570      	push	{r4, r5, r6, lr}
 8002244:	460e      	mov	r6, r1
 8002246:	4615      	mov	r5, r2
 8002248:	f7ff ffbe 	bl	80021c8 <findslot>
 800224c:	4604      	mov	r4, r0
 800224e:	b930      	cbnz	r0, 800225e <_read+0x1c>
 8002250:	f7ff fa90 	bl	8001774 <__errno>
 8002254:	2309      	movs	r3, #9
 8002256:	6003      	str	r3, [r0, #0]
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	bd70      	pop	{r4, r5, r6, pc}
 800225e:	6800      	ldr	r0, [r0, #0]
 8002260:	462a      	mov	r2, r5
 8002262:	4631      	mov	r1, r6
 8002264:	f7ff ffdd 	bl	8002222 <_swiread>
 8002268:	1c43      	adds	r3, r0, #1
 800226a:	bf1f      	itttt	ne
 800226c:	6863      	ldrne	r3, [r4, #4]
 800226e:	1a28      	subne	r0, r5, r0
 8002270:	181b      	addne	r3, r3, r0
 8002272:	6063      	strne	r3, [r4, #4]
 8002274:	e7f2      	b.n	800225c <_read+0x1a>

08002276 <_swilseek>:
 8002276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002278:	460c      	mov	r4, r1
 800227a:	4616      	mov	r6, r2
 800227c:	f7ff ffa4 	bl	80021c8 <findslot>
 8002280:	4605      	mov	r5, r0
 8002282:	b940      	cbnz	r0, 8002296 <_swilseek+0x20>
 8002284:	f7ff fa76 	bl	8001774 <__errno>
 8002288:	2309      	movs	r3, #9
 800228a:	6003      	str	r3, [r0, #0]
 800228c:	f04f 34ff 	mov.w	r4, #4294967295
 8002290:	4620      	mov	r0, r4
 8002292:	b003      	add	sp, #12
 8002294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002296:	2e02      	cmp	r6, #2
 8002298:	d903      	bls.n	80022a2 <_swilseek+0x2c>
 800229a:	f7ff fa6b 	bl	8001774 <__errno>
 800229e:	2316      	movs	r3, #22
 80022a0:	e7f3      	b.n	800228a <_swilseek+0x14>
 80022a2:	2e01      	cmp	r6, #1
 80022a4:	d112      	bne.n	80022cc <_swilseek+0x56>
 80022a6:	6843      	ldr	r3, [r0, #4]
 80022a8:	18e4      	adds	r4, r4, r3
 80022aa:	d4f6      	bmi.n	800229a <_swilseek+0x24>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	260a      	movs	r6, #10
 80022b0:	e9cd 3400 	strd	r3, r4, [sp]
 80022b4:	466f      	mov	r7, sp
 80022b6:	4630      	mov	r0, r6
 80022b8:	4639      	mov	r1, r7
 80022ba:	beab      	bkpt	0x00ab
 80022bc:	4606      	mov	r6, r0
 80022be:	4630      	mov	r0, r6
 80022c0:	f7ff ffaa 	bl	8002218 <checkerror>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	dbe1      	blt.n	800228c <_swilseek+0x16>
 80022c8:	606c      	str	r4, [r5, #4]
 80022ca:	e7e1      	b.n	8002290 <_swilseek+0x1a>
 80022cc:	2e02      	cmp	r6, #2
 80022ce:	d1ed      	bne.n	80022ac <_swilseek+0x36>
 80022d0:	6803      	ldr	r3, [r0, #0]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	260c      	movs	r6, #12
 80022d6:	466f      	mov	r7, sp
 80022d8:	4630      	mov	r0, r6
 80022da:	4639      	mov	r1, r7
 80022dc:	beab      	bkpt	0x00ab
 80022de:	4606      	mov	r6, r0
 80022e0:	4630      	mov	r0, r6
 80022e2:	f7ff ff99 	bl	8002218 <checkerror>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	d0d0      	beq.n	800228c <_swilseek+0x16>
 80022ea:	4404      	add	r4, r0
 80022ec:	e7de      	b.n	80022ac <_swilseek+0x36>

080022ee <_lseek>:
 80022ee:	f7ff bfc2 	b.w	8002276 <_swilseek>

080022f2 <_swiwrite>:
 80022f2:	b530      	push	{r4, r5, lr}
 80022f4:	b085      	sub	sp, #20
 80022f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80022fa:	9203      	str	r2, [sp, #12]
 80022fc:	2405      	movs	r4, #5
 80022fe:	ad01      	add	r5, sp, #4
 8002300:	4620      	mov	r0, r4
 8002302:	4629      	mov	r1, r5
 8002304:	beab      	bkpt	0x00ab
 8002306:	4604      	mov	r4, r0
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff ff85 	bl	8002218 <checkerror>
 800230e:	b005      	add	sp, #20
 8002310:	bd30      	pop	{r4, r5, pc}

08002312 <_write>:
 8002312:	b570      	push	{r4, r5, r6, lr}
 8002314:	460e      	mov	r6, r1
 8002316:	4615      	mov	r5, r2
 8002318:	f7ff ff56 	bl	80021c8 <findslot>
 800231c:	4604      	mov	r4, r0
 800231e:	b930      	cbnz	r0, 800232e <_write+0x1c>
 8002320:	f7ff fa28 	bl	8001774 <__errno>
 8002324:	2309      	movs	r3, #9
 8002326:	6003      	str	r3, [r0, #0]
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	bd70      	pop	{r4, r5, r6, pc}
 800232e:	6800      	ldr	r0, [r0, #0]
 8002330:	462a      	mov	r2, r5
 8002332:	4631      	mov	r1, r6
 8002334:	f7ff ffdd 	bl	80022f2 <_swiwrite>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	dbf5      	blt.n	8002328 <_write+0x16>
 800233c:	6862      	ldr	r2, [r4, #4]
 800233e:	1ae8      	subs	r0, r5, r3
 8002340:	4402      	add	r2, r0
 8002342:	42ab      	cmp	r3, r5
 8002344:	6062      	str	r2, [r4, #4]
 8002346:	d1f1      	bne.n	800232c <_write+0x1a>
 8002348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff bf55 	b.w	80021fc <error>

08002352 <_swiclose>:
 8002352:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002354:	2402      	movs	r4, #2
 8002356:	9001      	str	r0, [sp, #4]
 8002358:	ad01      	add	r5, sp, #4
 800235a:	4620      	mov	r0, r4
 800235c:	4629      	mov	r1, r5
 800235e:	beab      	bkpt	0x00ab
 8002360:	4604      	mov	r4, r0
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ff58 	bl	8002218 <checkerror>
 8002368:	b003      	add	sp, #12
 800236a:	bd30      	pop	{r4, r5, pc}

0800236c <_close>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	4605      	mov	r5, r0
 8002370:	f7ff ff2a 	bl	80021c8 <findslot>
 8002374:	4604      	mov	r4, r0
 8002376:	b930      	cbnz	r0, 8002386 <_close+0x1a>
 8002378:	f7ff f9fc 	bl	8001774 <__errno>
 800237c:	2309      	movs	r3, #9
 800237e:	6003      	str	r3, [r0, #0]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	bd38      	pop	{r3, r4, r5, pc}
 8002386:	3d01      	subs	r5, #1
 8002388:	2d01      	cmp	r5, #1
 800238a:	d809      	bhi.n	80023a0 <_close+0x34>
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <_close+0x48>)
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	429a      	cmp	r2, r3
 8002394:	d104      	bne.n	80023a0 <_close+0x34>
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	6003      	str	r3, [r0, #0]
 800239c:	2000      	movs	r0, #0
 800239e:	e7f1      	b.n	8002384 <_close+0x18>
 80023a0:	6820      	ldr	r0, [r4, #0]
 80023a2:	f7ff ffd6 	bl	8002352 <_swiclose>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d1ec      	bne.n	8002384 <_close+0x18>
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	6023      	str	r3, [r4, #0]
 80023b0:	e7e8      	b.n	8002384 <_close+0x18>
 80023b2:	bf00      	nop
 80023b4:	20000114 	.word	0x20000114

080023b8 <_swistat>:
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	460c      	mov	r4, r1
 80023bc:	f7ff ff04 	bl	80021c8 <findslot>
 80023c0:	4605      	mov	r5, r0
 80023c2:	b930      	cbnz	r0, 80023d2 <_swistat+0x1a>
 80023c4:	f7ff f9d6 	bl	8001774 <__errno>
 80023c8:	2309      	movs	r3, #9
 80023ca:	6003      	str	r3, [r0, #0]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	bd70      	pop	{r4, r5, r6, pc}
 80023d2:	6863      	ldr	r3, [r4, #4]
 80023d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023d8:	6063      	str	r3, [r4, #4]
 80023da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023de:	64a3      	str	r3, [r4, #72]	; 0x48
 80023e0:	260c      	movs	r6, #12
 80023e2:	4630      	mov	r0, r6
 80023e4:	4629      	mov	r1, r5
 80023e6:	beab      	bkpt	0x00ab
 80023e8:	4605      	mov	r5, r0
 80023ea:	4628      	mov	r0, r5
 80023ec:	f7ff ff14 	bl	8002218 <checkerror>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	bf1c      	itt	ne
 80023f4:	6120      	strne	r0, [r4, #16]
 80023f6:	2000      	movne	r0, #0
 80023f8:	e7ea      	b.n	80023d0 <_swistat+0x18>

080023fa <_fstat>:
 80023fa:	460b      	mov	r3, r1
 80023fc:	b510      	push	{r4, lr}
 80023fe:	2100      	movs	r1, #0
 8002400:	4604      	mov	r4, r0
 8002402:	2258      	movs	r2, #88	; 0x58
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f9df 	bl	80017c8 <memset>
 800240a:	4601      	mov	r1, r0
 800240c:	4620      	mov	r0, r4
 800240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002412:	f7ff bfd1 	b.w	80023b8 <_swistat>

08002416 <_isatty>:
 8002416:	b570      	push	{r4, r5, r6, lr}
 8002418:	f7ff fed6 	bl	80021c8 <findslot>
 800241c:	2509      	movs	r5, #9
 800241e:	4604      	mov	r4, r0
 8002420:	b920      	cbnz	r0, 800242c <_isatty+0x16>
 8002422:	f7ff f9a7 	bl	8001774 <__errno>
 8002426:	6005      	str	r5, [r0, #0]
 8002428:	4620      	mov	r0, r4
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	4628      	mov	r0, r5
 800242e:	4621      	mov	r1, r4
 8002430:	beab      	bkpt	0x00ab
 8002432:	4604      	mov	r4, r0
 8002434:	2c01      	cmp	r4, #1
 8002436:	d0f7      	beq.n	8002428 <_isatty+0x12>
 8002438:	f7ff f99c 	bl	8001774 <__errno>
 800243c:	2400      	movs	r4, #0
 800243e:	4605      	mov	r5, r0
 8002440:	2613      	movs	r6, #19
 8002442:	4630      	mov	r0, r6
 8002444:	4621      	mov	r1, r4
 8002446:	beab      	bkpt	0x00ab
 8002448:	4606      	mov	r6, r0
 800244a:	602e      	str	r6, [r5, #0]
 800244c:	e7ec      	b.n	8002428 <_isatty+0x12>
	...

08002450 <_init>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	bf00      	nop
 8002454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002456:	bc08      	pop	{r3}
 8002458:	469e      	mov	lr, r3
 800245a:	4770      	bx	lr

0800245c <_fini>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	bf00      	nop
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr
