
STM32F429ZICANI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005848  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae4  08005ae4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aec  08005aec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001293d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002159  00000000  00000000  000329dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00034b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  00035bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259a6  00000000  00000000  00036ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001369a  00000000  00000000  0005c54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5d21  00000000  00000000  0006fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155909  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b80  00000000  00000000  0015595c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080059e0 	.word	0x080059e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080059e0 	.word	0x080059e0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
#ifndef MASTER_BOARD
//does the addr match?
__IO	uint32_t	uwtfrq =0;
#endif
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

	HAL_Init();
 80005aa:	f000 fdb7 	bl	800111c <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ); //50 mhz
 80005ae:	2032      	movs	r0, #50	; 0x32
 80005b0:	f000 f83e 	bl	8000630 <SystemClock_Config_HSE>

	GPIO_Init(); //sets buttons and leds
 80005b4:	f000 f968 	bl	8000888 <GPIO_Init>



	TIMER6_Init(); //can stuff
 80005b8:	f000 f9b6 	bl	8000928 <TIMER6_Init>
	I2C1_Init();
 80005bc:	f000 fb1e 	bl	8000bfc <I2C1_Init>
	I2C2_Init();
 80005c0:	f000 fb4a 	bl	8000c58 <I2C2_Init>
	CAN1_Init();
 80005c4:	f000 f9cc 	bl	8000960 <CAN1_Init>

	//we start can coms
		CAN_Filter_Config();
 80005c8:	f000 f938 	bl	800083c <CAN_Filter_Config>


		if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 80005cc:	f240 4103 	movw	r1, #1027	; 0x403
 80005d0:	4814      	ldr	r0, [pc, #80]	; (8000624 <main+0x80>)
 80005d2:	f001 fa22 	bl	8001a1a <HAL_CAN_ActivateNotification>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <main+0x3c>
			{
					Error_handler();
 80005dc:	f000 fbcc 	bl	8000d78 <Error_handler>
			}


			if( HAL_CAN_Start(&hcan1) != HAL_OK)
 80005e0:	4810      	ldr	r0, [pc, #64]	; (8000624 <main+0x80>)
 80005e2:	f000 ffe9 	bl	80015b8 <HAL_CAN_Start>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <main+0x4c>
			{
				Error_handler();
 80005ec:	f000 fbc4 	bl	8000d78 <Error_handler>
			}

//we wait for button event
for(int n=0;n<INPUTPINCOUNT;n++){
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	e007      	b.n	8000606 <main+0x62>
	ledst[n]=0;
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <main+0x84>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
for(int n=0;n<INPUTPINCOUNT;n++){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b04      	cmp	r3, #4
 800060a:	ddf4      	ble.n	80005f6 <main+0x52>
	#endif  /*master or slave*/

		  //wait for End of transfer in this test case of last
		  //msg receiver(master)

		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 800060c:	bf00      	nop
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0x88>)
 8000610:	f002 fb2c 	bl	8002c6c <HAL_I2C_GetState>
 8000614:	4603      	mov	r3, r0
 8000616:	2b20      	cmp	r3, #32
 8000618:	d1f9      	bne.n	800060e <main+0x6a>





	return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000017c 	.word	0x2000017c
 8000628:	20000210 	.word	0x20000210
 800062c:	20000090 	.word	0x20000090

08000630 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 800063a:	2300      	movs	r3, #0
 800063c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b78      	cmp	r3, #120	; 0x78
 8000658:	d034      	beq.n	80006c4 <SystemClock_Config_HSE+0x94>
 800065a:	2b78      	cmp	r3, #120	; 0x78
 800065c:	dc76      	bgt.n	800074c <SystemClock_Config_HSE+0x11c>
 800065e:	2b32      	cmp	r3, #50	; 0x32
 8000660:	d002      	beq.n	8000668 <SystemClock_Config_HSE+0x38>
 8000662:	2b54      	cmp	r3, #84	; 0x54
 8000664:	d017      	beq.n	8000696 <SystemClock_Config_HSE+0x66>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 8000666:	e071      	b.n	800074c <SystemClock_Config_HSE+0x11c>
		  Osc_Init.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 50;
 800066c:	2332      	movs	r3, #50	; 0x32
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
          flash_latency = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 8000694:	e02e      	b.n	80006f4 <SystemClock_Config_HSE+0xc4>
		  Osc_Init.PLL.PLLM = 4;
 8000696:	2304      	movs	r3, #4
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 84;
 800069a:	2354      	movs	r3, #84	; 0x54
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
          flash_latency = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80006c2:	e017      	b.n	80006f4 <SystemClock_Config_HSE+0xc4>
		  Osc_Init.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 120;
 80006c8:	2378      	movs	r3, #120	; 0x78
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]
          flash_latency = 3;
 80006ec:	2303      	movs	r3, #3
 80006ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80006f2:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fd21 	bl	8004140 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config_HSE+0xd8>
	{
			Error_handler();
 8000704:	f000 fb38 	bl	8000d78 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000708:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f003 ff8c 	bl	8004630 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config_HSE+0xf2>
	{
		Error_handler();
 800071e:	f000 fb2b 	bl	8000d78 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000722:	f004 f971 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8000726:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SystemClock_Config_HSE+0x124>)
 800072c:	fba2 2303 	umull	r2, r3, r2, r3
 8000730:	099b      	lsrs	r3, r3, #6
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fcad 	bl	8002092 <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000738:	2004      	movs	r0, #4
 800073a:	f001 fcb7 	bl	80020ac <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	f04f 30ff 	mov.w	r0, #4294967295
 8000746:	f001 fc7a 	bl	800203e <HAL_NVIC_SetPriority>
 800074a:	e000      	b.n	800074e <SystemClock_Config_HSE+0x11e>
	   return ;
 800074c:	bf00      	nop



 }
 800074e:	3758      	adds	r7, #88	; 0x58
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	10624dd3 	.word	0x10624dd3

08000758 <determinamensajeCAN>:


uint8_t determinamensajeCAN(uint8_t pinn,uint8_t trigger){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]

	switch(trigger){
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d014      	beq.n	8000798 <determinamensajeCAN+0x40>
 800076e:	2b02      	cmp	r3, #2
 8000770:	dc1b      	bgt.n	80007aa <determinamensajeCAN+0x52>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <determinamensajeCAN+0x24>
 8000776:	2b01      	cmp	r3, #1
 8000778:	d00c      	beq.n	8000794 <determinamensajeCAN+0x3c>
 800077a:	e016      	b.n	80007aa <determinamensajeCAN+0x52>
	case 0:
		if(pinn<=5){
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b05      	cmp	r3, #5
 8000780:	d801      	bhi.n	8000786 <determinamensajeCAN+0x2e>
			return 0;
 8000782:	2300      	movs	r3, #0
 8000784:	e011      	b.n	80007aa <determinamensajeCAN+0x52>
		}else if(pinn==6){
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b06      	cmp	r3, #6
 800078a:	d101      	bne.n	8000790 <determinamensajeCAN+0x38>
			return 1;
 800078c:	2301      	movs	r3, #1
 800078e:	e00c      	b.n	80007aa <determinamensajeCAN+0x52>
		}else {
			return 2;
 8000790:	2302      	movs	r3, #2
 8000792:	e00a      	b.n	80007aa <determinamensajeCAN+0x52>
		}
		break;
	case 1:
		return pinn;
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	e008      	b.n	80007aa <determinamensajeCAN+0x52>
	break;
	case 2:
		if (memory[pinn]==0){
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <determinamensajeCAN+0x60>)
 800079c:	5cd3      	ldrb	r3, [r2, r3]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <determinamensajeCAN+0x4e>
			return 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e001      	b.n	80007aa <determinamensajeCAN+0x52>
			memory[pinn]=1;
		}

		else {return 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e7ff      	b.n	80007aa <determinamensajeCAN+0x52>
		memory[pinn]=0;}
		break;

}}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	2000008c 	.word	0x2000008c

080007bc <CAN1_Tx>:


void CAN1_Tx()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

	uint32_t TxMailbox;

	uint8_t message;

	TxHeader.DLC = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = 0x5B0;
 80007c6:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
 80007ca:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE   = CAN_ID_STD;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

	while(trigger!=3){
 80007d4:	e021      	b.n	800081a <CAN1_Tx+0x5e>
	message =determinamensajeCAN(pinn,trigger);
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <CAN1_Tx+0x70>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <CAN1_Tx+0x74>)
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffb8 	bl	8000758 <determinamensajeCAN>
 80007e8:	4603      	mov	r3, r0
 80007ea:	70fb      	strb	r3, [r7, #3]
	trigger++;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <CAN1_Tx+0x74>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <CAN1_Tx+0x74>)
 80007f6:	701a      	strb	r2, [r3, #0]


	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80007f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <CAN1_Tx+0x78>)
 80007fe:	f001 fe74 	bl	80024ea <HAL_GPIO_TogglePin>

	if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	1cfa      	adds	r2, r7, #3
 8000806:	f107 0108 	add.w	r1, r7, #8
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <CAN1_Tx+0x7c>)
 800080c:	f000 ff18 	bl	8001640 <HAL_CAN_AddTxMessage>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <CAN1_Tx+0x5e>
	{
		Error_handler();
 8000816:	f000 faaf 	bl	8000d78 <Error_handler>
	while(trigger!=3){
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <CAN1_Tx+0x74>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d1d9      	bne.n	80007d6 <CAN1_Tx+0x1a>
	}
	}

}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000020c 	.word	0x2000020c
 8000830:	20000215 	.word	0x20000215
 8000834:	40020400 	.word	0x40020400
 8000838:	2000017c 	.word	0x2000017c

0800083c <CAN_Filter_Config>:
			    }
			  }
}

void CAN_Filter_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0X01C0;
 8000856:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800085a:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <CAN_Filter_Config+0x48>)
 800086e:	f000 fdc3 	bl	80013f8 <HAL_CAN_ConfigFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <CAN_Filter_Config+0x40>
	{
		Error_handler();
 8000878:	f000 fa7e 	bl	8000d78 <Error_handler>
	}

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000017c 	.word	0x2000017c

08000888 <GPIO_Init>:


void GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	; 0x38
 800088c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <GPIO_Init+0x94>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a21      	ldr	r2, [pc, #132]	; (800091c <GPIO_Init+0x94>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <GPIO_Init+0x94>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <GPIO_Init+0x94>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a1a      	ldr	r2, [pc, #104]	; (800091c <GPIO_Init+0x94>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <GPIO_Init+0x94>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <GPIO_Init+0x94>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <GPIO_Init+0x94>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <GPIO_Init+0x94>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]


	GPIO_InitTypeDef ledgpio,buttongpio;


	ledgpio.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80008e2:	237c      	movs	r3, #124	; 0x7c
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
	ledgpio.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE,&ledgpio);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	480a      	ldr	r0, [pc, #40]	; (8000920 <GPIO_Init+0x98>)
 80008f6:	f001 fc33 	bl	8002160 <HAL_GPIO_Init>



	buttongpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80008fa:	23f8      	movs	r3, #248	; 0xf8
 80008fc:	613b      	str	r3, [r7, #16]
	buttongpio.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
	buttongpio.Pull = GPIO_PULLUP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC,&buttongpio);
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <GPIO_Init+0x9c>)
 800090e:	f001 fc27 	bl	8002160 <HAL_GPIO_Init>




}
 8000912:	bf00      	nop
 8000914:	3738      	adds	r7, #56	; 0x38
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40021000 	.word	0x40021000
 8000924:	40020800 	.word	0x40020800

08000928 <TIMER6_Init>:


void TIMER6_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <TIMER6_Init+0x30>)
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <TIMER6_Init+0x34>)
 8000930:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 4999;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <TIMER6_Init+0x30>)
 8000934:	f241 3287 	movw	r2, #4999	; 0x1387
 8000938:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 10000-1;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <TIMER6_Init+0x30>)
 800093c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000940:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <TIMER6_Init+0x30>)
 8000944:	f004 f880 	bl	8004a48 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <TIMER6_Init+0x2a>
	{
		Error_handler();
 800094e:	f000 fa13 	bl	8000d78 <Error_handler>
	}

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001a4 	.word	0x200001a4
 800095c:	40001000 	.word	0x40001000

08000960 <CAN1_Init>:



void CAN1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <CAN1_Init+0x64>)
 8000966:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <CAN1_Init+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <CAN1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <CAN1_Init+0x64>)
 8000972:	2201      	movs	r2, #1
 8000974:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <CAN1_Init+0x64>)
 8000978:	2201      	movs	r2, #1
 800097a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <CAN1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <CAN1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <CAN1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <CAN1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	775a      	strb	r2, [r3, #29]

	//Settings related to CAN bit timings
	hcan1.Init.Prescaler = 3;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <CAN1_Init+0x64>)
 8000996:	2203      	movs	r2, #3
 8000998:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <CAN1_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <CAN1_Init+0x64>)
 80009a2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80009a6:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <CAN1_Init+0x64>)
 80009aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009ae:	615a      	str	r2, [r3, #20]

	if ( HAL_CAN_Init (&hcan1) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <CAN1_Init+0x64>)
 80009b2:	f000 fc25 	bl	8001200 <HAL_CAN_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <CAN1_Init+0x60>
	{
		Error_handler();
 80009bc:	f000 f9dc 	bl	8000d78 <Error_handler>
	}

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000017c 	.word	0x2000017c
 80009c8:	40006400 	.word	0x40006400

080009cc <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b090      	sub	sp, #64	; 0x40
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted:M0\r\n");
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	490a      	ldr	r1, [pc, #40]	; (8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 fb92 	bl	8005104 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fc03 	bl	80001f0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	f107 010c 	add.w	r1, r7, #12
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009f8:	f004 fa5a 	bl	8004eb0 <HAL_UART_Transmit>

}
 80009fc:	bf00      	nop
 80009fe:	3740      	adds	r7, #64	; 0x40
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	08005a10 	.word	0x08005a10
 8000a08:	20000138 	.word	0x20000138

08000a0c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b090      	sub	sp, #64	; 0x40
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted:M1\r\n");
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	490a      	ldr	r1, [pc, #40]	; (8000a44 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fb72 	bl	8005104 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbe3 	bl	80001f0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 010c 	add.w	r1, r7, #12
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a38:	f004 fa3a 	bl	8004eb0 <HAL_UART_Transmit>

}
 8000a3c:	bf00      	nop
 8000a3e:	3740      	adds	r7, #64	; 0x40
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08005a2c 	.word	0x08005a2c
 8000a48:	20000138 	.word	0x20000138

08000a4c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	; 0x40
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted:M2\r\n");
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	490a      	ldr	r1, [pc, #40]	; (8000a84 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 fb52 	bl	8005104 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbc3 	bl	80001f0 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	f107 010c 	add.w	r1, r7, #12
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a78:	f004 fa1a 	bl	8004eb0 <HAL_UART_Transmit>

}
 8000a7c:	bf00      	nop
 8000a7e:	3740      	adds	r7, #64	; 0x40
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08005a48 	.word	0x08005a48
 8000a88:	20000138 	.word	0x20000138

08000a8c <HAL_CAN_RxFifo0MsgPendingCallback>:

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b092      	sub	sp, #72	; 0x48
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	uint8_t rcvd_msg[8];

	char msg[50];

	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 8000a94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 feaa 	bl	80017f6 <HAL_CAN_GetRxMessage>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
		Error_handler();
 8000aa8:	f000 f966 	bl	8000d78 <Error_handler>
	}

	if(RxHeader.StdId == 0x5B0 && RxHeader.RTR == 0 )
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f5b3 6fb6 	cmp.w	r3, #1456	; 0x5b0
 8000ab4:	d10d      	bne.n	8000ad2 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d109      	bne.n	8000ad2 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
	{
		//This is data frame sent by n1 to n2
	//	LED_Manage_Output(rcvd_msg[0]);
		sprintf(msg,"Message Received : #%x\r\n",rcvd_msg[0]);
 8000abe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	491d      	ldr	r1, [pc, #116]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f004 fb1a 	bl	8005104 <siprintf>
 8000ad0:	e023      	b.n	8000b1a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
	}
	else if ( RxHeader.StdId == 0x5B0 && RxHeader.RTR == 1)
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f5b3 6fb6 	cmp.w	r3, #1456	; 0x5b0
 8000ada:	d109      	bne.n	8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d105      	bne.n	8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
	{
		//This is a remote frame sent by n1 to n2
		CAN_Send_response(RxHeader.StdId);
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f863 	bl	8000bb4 <CAN_Send_response>
 8000aee:	e022      	b.n	8000b36 <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
		return;
	}
	else if ( RxHeader.StdId == 0x5A0 && RxHeader.RTR == 0)
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8000af8:	d10f      	bne.n	8000b1a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10b      	bne.n	8000b1a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
	{
		//its a reply ( data frame) by n2 to n1
		sprintf(msg,"Reply Received : %#X\r\n",rcvd_msg[0] << 8 | rcvd_msg[1]);
 8000b02:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	490c      	ldr	r1, [pc, #48]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 faf5 	bl	8005104 <siprintf>
	}

	 HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb66 	bl	80001f0 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f107 010c 	add.w	r1, r7, #12
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000b32:	f004 f9bd 	bl	8004eb0 <HAL_UART_Transmit>

}
 8000b36:	3748      	adds	r7, #72	; 0x48
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001f0 	.word	0x200001f0
 8000b40:	08005a64 	.word	0x08005a64
 8000b44:	08005a80 	.word	0x08005a80
 8000b48:	20000138 	.word	0x20000138

08000b4c <HAL_TIM_PeriodElapsedCallback>:



 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	 uint32_t TxMailbox;

	 uint8_t message; //no meaning for data frame

	if ( req_counter  == 4)
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d11a      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		//N1 sending Remote frame to N2
		TxHeader.DLC = 2; //N1 demanding 2 bytes of reply
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = 0x5B0;
 8000b60:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
 8000b64:	613b      	str	r3, [r7, #16]
		TxHeader.IDE   = CAN_ID_STD;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_REMOTE;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61fb      	str	r3, [r7, #28]

		if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	f107 020b 	add.w	r2, r7, #11
 8000b76:	f107 0110 	add.w	r1, r7, #16
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b7c:	f000 fd60 	bl	8001640 <HAL_CAN_AddTxMessage>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			Error_handler();
 8000b86:	f000 f8f7 	bl	8000d78 <Error_handler>
		}
		req_counter = 0;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
	{
		CAN1_Tx();
		req_counter++;
	}

 }
 8000b90:	e007      	b.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x56>
		CAN1_Tx();
 8000b92:	f7ff fe13 	bl	80007bc <CAN1_Tx>
		req_counter++;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ba0:	701a      	strb	r2, [r3, #0]
 }
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001ec 	.word	0x200001ec
 8000bb0:	2000017c 	.word	0x2000017c

08000bb4 <CAN_Send_response>:
 }
#endif


 void CAN_Send_response(uint32_t StdId)
 {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

 	CAN_TxHeaderTypeDef TxHeader;

 	uint32_t TxMailbox;

 	uint8_t response[2] = { 0xAB,0XCD};
 8000bbc:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 8000bc0:	813b      	strh	r3, [r7, #8]

 	TxHeader.DLC = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	623b      	str	r3, [r7, #32]
 	TxHeader.StdId = StdId;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	613b      	str	r3, [r7, #16]
 	TxHeader.IDE   = 0x5A0;
 8000bca:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8000bce:	61bb      	str	r3, [r7, #24]
 	TxHeader.RTR = CAN_RTR_DATA;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]

 	if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,response,&TxMailbox) != HAL_OK)
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	f107 0110 	add.w	r1, r7, #16
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <CAN_Send_response+0x44>)
 8000be2:	f000 fd2d 	bl	8001640 <HAL_CAN_AddTxMessage>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <CAN_Send_response+0x3c>
 	{
 		Error_handler();
 8000bec:	f000 f8c4 	bl	8000d78 <Error_handler>
 	}

 }
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000017c 	.word	0x2000017c

08000bfc <I2C1_Init>:
 void I2C1_Init(void)
	 {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	   /* USER CODE END I2C1_Init 0 */

	   /* USER CODE BEGIN I2C1_Init 1 */

	   /* USER CODE END I2C1_Init 1 */
	   hi2c1.Instance = I2C1;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <I2C1_Init+0x50>)
 8000c02:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <I2C1_Init+0x54>)
 8000c04:	601a      	str	r2, [r3, #0]
	   hi2c1.Init.ClockSpeed = 400000;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <I2C1_Init+0x50>)
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <I2C1_Init+0x58>)
 8000c0a:	605a      	str	r2, [r3, #4]
	   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <I2C1_Init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
	   hi2c1.Init.OwnAddress1 = 0;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <I2C1_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
	   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <I2C1_Init+0x50>)
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	611a      	str	r2, [r3, #16]
	   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <I2C1_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
	   hi2c1.Init.OwnAddress2 = 0;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <I2C1_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
	   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
	   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
	   if(HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <I2C1_Init+0x50>)
 8000c3a:	f001 fc71 	bl	8002520 <HAL_I2C_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <I2C1_Init+0x4c>
	   	     {
	   	       /* Initialization Error */
	   	       Error_handler();
 8000c44:	f000 f898 	bl	8000d78 <Error_handler>
	   	     }

	 }
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000090 	.word	0x20000090
 8000c50:	40005400 	.word	0x40005400
 8000c54:	00061a80 	.word	0x00061a80

08000c58 <I2C2_Init>:
	   * @brief I2C2 Initialization Function
	   * @param None
	   * @retval None
	   */
	  void I2C2_Init(void)
	 {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	   /* USER CODE END I2C2_Init 0 */

	   /* USER CODE BEGIN I2C2_Init 1 */

	   /* USER CODE END I2C2_Init 1 */
	   hi2c2.Instance = I2C2;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <I2C2_Init+0x50>)
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <I2C2_Init+0x54>)
 8000c60:	601a      	str	r2, [r3, #0]
	   hi2c2.Init.ClockSpeed = 400000;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <I2C2_Init+0x50>)
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <I2C2_Init+0x58>)
 8000c66:	605a      	str	r2, [r3, #4]
	   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <I2C2_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
	   hi2c2.Init.OwnAddress1 = ADDR_SLAVE;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <I2C2_Init+0x50>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	60da      	str	r2, [r3, #12]
	   hi2c2.Init.OwnAddress2 = 0xFF;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <I2C2_Init+0x50>)
 8000c76:	22ff      	movs	r2, #255	; 0xff
 8000c78:	619a      	str	r2, [r3, #24]
	   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <I2C2_Init+0x50>)
 8000c7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c80:	611a      	str	r2, [r3, #16]
	   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <I2C2_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
	   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <I2C2_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
	   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <I2C2_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
	   if(HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <I2C2_Init+0x50>)
 8000c96:	f001 fc43 	bl	8002520 <HAL_I2C_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <I2C2_Init+0x4c>
	     {
	       /* Initialization Error */
	       Error_handler();
 8000ca0:	f000 f86a 	bl	8000d78 <Error_handler>
	     }




	 }
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000e4 	.word	0x200000e4
 8000cac:	40005800 	.word	0x40005800
 8000cb0:	00061a80 	.word	0x00061a80

08000cb4 <I2C1_EV_IRQHandler>:

	  void I2C1_EV_IRQHandler(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

	  	HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <I2C1_EV_IRQHandler+0x10>)
 8000cba:	f001 fd75 	bl	80027a8 <HAL_I2C_EV_IRQHandler>
	  }
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000090 	.word	0x20000090

08000cc8 <I2C1_ER_IRQHandler>:
	  void I2C1_ER_IRQHandler(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	  	HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <I2C1_ER_IRQHandler+0x10>)
 8000cce:	f001 fedc 	bl	8002a8a <HAL_I2C_ER_IRQHandler>
	  }
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000090 	.word	0x20000090

08000cdc <I2C2_EV_IRQHandler>:
	  void I2C2_EV_IRQHandler(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	  	HAL_I2C_EV_IRQHandler(&hi2c2);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <I2C2_EV_IRQHandler+0x10>)
 8000ce2:	f001 fd61 	bl	80027a8 <HAL_I2C_EV_IRQHandler>
	  }
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000e4 	.word	0x200000e4

08000cf0 <I2C2_ER_IRQHandler>:
	  void I2C2_ER_IRQHandler(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	  	HAL_I2C_ER_IRQHandler(&hi2c2);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <I2C2_ER_IRQHandler+0x10>)
 8000cf6:	f001 fec8 	bl	8002a8a <HAL_I2C_ER_IRQHandler>
	  }
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000e4 	.word	0x200000e4

08000d04 <HAL_I2C_MasterTxCpltCallback>:
	    *         you can add your own implementation.
	    * @retval None
	    */
	  #ifdef MASTER_BOARD
	  void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
	  {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	    /* Turn LED3 on: Transfer in transmission process is correct */
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,  1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8000d14:	f001 fbd0 	bl	80024b8 <HAL_GPIO_WritePin>
	  }
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40020400 	.word	0x40020400

08000d24 <HAL_I2C_MasterRxCpltCallback>:
	    *         you can add your own implementation.
	    * @retval None
	    */
	  #ifdef MASTER_BOARD
	  void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
	  {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	    /* Turn LED1 on: Transfer in reception process is correct */
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8000d32:	f001 fbc1 	bl	80024b8 <HAL_GPIO_WritePin>
	  }
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020400 	.word	0x40020400

08000d44 <HAL_I2C_ErrorCallback>:
	    /* Turn LED2 off: Communication is completed */
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  1);
	  }
	  #endif
	  void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
	  {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	    /* Turn Off LED1 */
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <HAL_I2C_ErrorCallback+0x30>)
 8000d52:	f001 fbb1 	bl	80024b8 <HAL_GPIO_WritePin>

	    /* Turn Off LED2 */
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <HAL_I2C_ErrorCallback+0x30>)
 8000d5c:	f001 fbac 	bl	80024b8 <HAL_GPIO_WritePin>


	    /* Turn Off LED3 */
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,  1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <HAL_I2C_ErrorCallback+0x30>)
 8000d68:	f001 fba6 	bl	80024b8 <HAL_GPIO_WritePin>
	  }
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40020400 	.word	0x40020400

08000d78 <Error_handler>:

	  void Error_handler(void)
	  {
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	  	while(1);
 8000d7c:	e7fe      	b.n	8000d7c <Error_handler+0x4>
	...

08000d80 <HAL_MspInit>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f001 f94f 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x40>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_MspInit+0x40>)
 8000d90:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000d94:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f06f 000b 	mvn.w	r0, #11
 8000d9e:	f001 f94e 	bl	800203e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	f06f 000a 	mvn.w	r0, #10
 8000daa:	f001 f948 	bl	800203e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	f06f 0009 	mvn.w	r0, #9
 8000db6:	f001 f942 	bl	800203e <HAL_NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <HAL_CAN_MspInit>:




  void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_CAN_MspInit+0x90>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <HAL_CAN_MspInit+0x90>)
 8000dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_CAN_MspInit+0x90>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

	/**CAN1 GPIO Configuration
	PA11     ------> CAN1_RX
	PA12     ------> CAN1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000de8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dfa:	2309      	movs	r3, #9
 8000dfc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <HAL_CAN_MspInit+0x94>)
 8000e06:	f001 f9ab 	bl	8002160 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	2013      	movs	r0, #19
 8000e10:	f001 f915 	bl	800203e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	210f      	movs	r1, #15
 8000e18:	2014      	movs	r0, #20
 8000e1a:	f001 f910 	bl	800203e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	210f      	movs	r1, #15
 8000e22:	2015      	movs	r0, #21
 8000e24:	f001 f90b 	bl	800203e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	2016      	movs	r0, #22
 8000e2e:	f001 f906 	bl	800203e <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e32:	2013      	movs	r0, #19
 8000e34:	f001 f91f 	bl	8002076 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e38:	2014      	movs	r0, #20
 8000e3a:	f001 f91c 	bl	8002076 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e3e:	2015      	movs	r0, #21
 8000e40:	f001 f919 	bl	8002076 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e44:	2016      	movs	r0, #22
 8000e46:	f001 f916 	bl	8002076 <HAL_NVIC_EnableIRQ>

 }
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_TIM_Base_MspInit>:


  void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
  {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  	//1. enable the clock for the TIM6 peripheral
  	__HAL_RCC_TIM6_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_TIM_Base_MspInit+0x3c>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

  	//2. Enable the IRQ of TIM6
  	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e80:	2036      	movs	r0, #54	; 0x36
 8000e82:	f001 f8f8 	bl	8002076 <HAL_NVIC_EnableIRQ>

  	//3. setup the priority for TIM6_DAC_IRQn
  	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	210f      	movs	r1, #15
 8000e8a:	2036      	movs	r0, #54	; 0x36
 8000e8c:	f001 f8d7 	bl	800203e <HAL_NVIC_SetPriority>

  }
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a42      	ldr	r2, [pc, #264]	; (8000fc4 <HAL_I2C_MspInit+0x128>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d13d      	bne.n	8000f3a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b3e      	ldr	r3, [pc, #248]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eec:	2304      	movs	r3, #4
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4835      	ldr	r0, [pc, #212]	; (8000fcc <HAL_I2C_MspInit+0x130>)
 8000ef8:	f001 f932 	bl	8002160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	201f      	movs	r0, #31
 8000f1e:	f001 f88e 	bl	800203e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f22:	201f      	movs	r0, #31
 8000f24:	f001 f8a7 	bl	8002076 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2105      	movs	r1, #5
 8000f2c:	2020      	movs	r0, #32
 8000f2e:	f001 f886 	bl	800203e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f32:	2020      	movs	r0, #32
 8000f34:	f001 f89f 	bl	8002076 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
        HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f38:	e040      	b.n	8000fbc <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <HAL_I2C_MspInit+0x134>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13b      	bne.n	8000fbc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 0320 	and.w	r3, r3, #32
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f60:	2303      	movs	r3, #3
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f70:	2304      	movs	r3, #4
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <HAL_I2C_MspInit+0x138>)
 8000f7c:	f001 f8f0 	bl	8002160 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_I2C_MspInit+0x12c>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2105      	movs	r1, #5
 8000fa0:	2021      	movs	r0, #33	; 0x21
 8000fa2:	f001 f84c 	bl	800203e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000fa6:	2021      	movs	r0, #33	; 0x21
 8000fa8:	f001 f865 	bl	8002076 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2105      	movs	r1, #5
 8000fb0:	2022      	movs	r0, #34	; 0x22
 8000fb2:	f001 f844 	bl	800203e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000fb6:	2022      	movs	r0, #34	; 0x22
 8000fb8:	f001 f85d 	bl	8002076 <HAL_NVIC_EnableIRQ>
}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	; 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40005800 	.word	0x40005800
 8000fd4:	40021400 	.word	0x40021400

08000fd8 <SysTick_Handler>:
extern I2C_HandleTypeDef I2cHandle;
extern void CAN1_Tx(uint8_t remote);
uint16_t portn;
extern void I2C_DETERMINE_TRACE(uint16_t pinn);
void SysTick_Handler (void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000fdc:	f000 f8f0 	bl	80011c0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000fe0:	f001 f880 	bl	80020e4 <HAL_SYSTICK_IRQHandler>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <CAN1_TX_IRQHandler>:


void CAN1_TX_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <CAN1_TX_IRQHandler+0x10>)
 8000fee:	f000 fd3a 	bl	8001a66 <HAL_CAN_IRQHandler>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000017c 	.word	0x2000017c

08000ffc <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <CAN1_RX0_IRQHandler+0x10>)
 8001002:	f000 fd30 	bl	8001a66 <HAL_CAN_IRQHandler>

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000017c 	.word	0x2000017c

08001010 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <CAN1_SCE_IRQHandler+0x10>)
 8001016:	f000 fd26 	bl	8001a66 <HAL_CAN_IRQHandler>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000017c 	.word	0x2000017c

08001024 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM6_DAC_IRQHandler+0x10>)
 800102a:	f003 fd5c 	bl	8004ae6 <HAL_TIM_IRQHandler>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001a4 	.word	0x200001a4

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f004 f822 	bl	80050b0 <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20030000 	.word	0x20030000
 8001098:	00000400 	.word	0x00000400
 800109c:	20000218 	.word	0x20000218
 80010a0:	20000230 	.word	0x20000230

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ce:	490e      	ldr	r1, [pc, #56]	; (8001108 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e4:	4c0b      	ldr	r4, [pc, #44]	; (8001114 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f2:	f7ff ffd7 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f003 ffe1 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fa53 	bl	80005a4 <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001100:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800110c:	08005af4 	.word	0x08005af4
  ldr r2, =_sbss
 8001110:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001114:	20000230 	.word	0x20000230

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <HAL_Init+0x40>)
 8001126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_Init+0x40>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x40>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 ff6f 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fe16 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 ff87 	bl	8002092 <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 ff4f 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	2000021c 	.word	0x2000021c

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000021c 	.word	0x2000021c

08001200 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0ed      	b.n	80013ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fdd0 	bl	8000dc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff ffd8 	bl	80011e8 <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123a:	e012      	b.n	8001262 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800123c:	f7ff ffd4 	bl	80011e8 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b0a      	cmp	r3, #10
 8001248:	d90b      	bls.n	8001262 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2205      	movs	r2, #5
 800125a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0c5      	b.n	80013ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0e5      	beq.n	800123c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0202 	bic.w	r2, r2, #2
 800127e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff ffb2 	bl	80011e8 <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001286:	e012      	b.n	80012ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001288:	f7ff ffae 	bl	80011e8 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b0a      	cmp	r3, #10
 8001294:	d90b      	bls.n	80012ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2205      	movs	r2, #5
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e09f      	b.n	80013ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e5      	bne.n	8001288 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e1b      	ldrb	r3, [r3, #24]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d108      	bne.n	80012d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e007      	b.n	80012e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7e5b      	ldrb	r3, [r3, #25]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e007      	b.n	8001310 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800130e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e9b      	ldrb	r3, [r3, #26]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d108      	bne.n	800132a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e007      	b.n	800133a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0220 	bic.w	r2, r2, #32
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7edb      	ldrb	r3, [r3, #27]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d108      	bne.n	8001354 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0210 	bic.w	r2, r2, #16
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e007      	b.n	8001364 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0210 	orr.w	r2, r2, #16
 8001362:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7f1b      	ldrb	r3, [r3, #28]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0208 	orr.w	r2, r2, #8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	e007      	b.n	800138e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0208 	bic.w	r2, r2, #8
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7f5b      	ldrb	r3, [r3, #29]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d108      	bne.n	80013a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e007      	b.n	80013b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	ea42 0103 	orr.w	r1, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	1e5a      	subs	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001410:	7cfb      	ldrb	r3, [r7, #19]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d003      	beq.n	800141e <HAL_CAN_ConfigFilter+0x26>
 8001416:	7cfb      	ldrb	r3, [r7, #19]
 8001418:	2b02      	cmp	r3, #2
 800141a:	f040 80be 	bne.w	800159a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800141e:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001420:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001438:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	431a      	orrs	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	2201      	movs	r2, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	401a      	ands	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d123      	bne.n	80014c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3248      	adds	r2, #72	; 0x48
 80014a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014be:	6979      	ldr	r1, [r7, #20]
 80014c0:	3348      	adds	r3, #72	; 0x48
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d122      	bne.n	8001516 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3248      	adds	r2, #72	; 0x48
 80014f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800150a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800150c:	6979      	ldr	r1, [r7, #20]
 800150e:	3348      	adds	r3, #72	; 0x48
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001530:	e007      	b.n	8001542 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	401a      	ands	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800155c:	e007      	b.n	800156e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	431a      	orrs	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d107      	bne.n	8001586 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	431a      	orrs	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800158c:	f023 0201 	bic.w	r2, r3, #1
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e006      	b.n	80015a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
  }
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40006400 	.word	0x40006400

080015b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d12e      	bne.n	800162a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff fe00 	bl	80011e8 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015ea:	e012      	b.n	8001612 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ec:	f7ff fdfc 	bl	80011e8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d90b      	bls.n	8001612 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2205      	movs	r2, #5
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e012      	b.n	8001638 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e5      	bne.n	80015ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e006      	b.n	8001638 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
  }
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001654:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800165e:	7ffb      	ldrb	r3, [r7, #31]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d003      	beq.n	800166c <HAL_CAN_AddTxMessage+0x2c>
 8001664:	7ffb      	ldrb	r3, [r7, #31]
 8001666:	2b02      	cmp	r3, #2
 8001668:	f040 80b8 	bne.w	80017dc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10a      	bne.n	800168c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80a0 	beq.w	80017cc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	0e1b      	lsrs	r3, r3, #24
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d907      	bls.n	80016ac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e09e      	b.n	80017ea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016ac:	2201      	movs	r2, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	409a      	lsls	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10d      	bne.n	80016da <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	6809      	ldr	r1, [r1, #0]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3318      	adds	r3, #24
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	440b      	add	r3, r1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e00f      	b.n	80016fa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ea:	68f9      	ldr	r1, [r7, #12]
 80016ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3318      	adds	r3, #24
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	440b      	add	r3, r1
 80016f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3318      	adds	r3, #24
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	440b      	add	r3, r1
 800170a:	3304      	adds	r3, #4
 800170c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	7d1b      	ldrb	r3, [r3, #20]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d111      	bne.n	800173a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3318      	adds	r3, #24
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	3304      	adds	r3, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	6811      	ldr	r1, [r2, #0]
 800172a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3318      	adds	r3, #24
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	440b      	add	r3, r1
 8001736:	3304      	adds	r3, #4
 8001738:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3307      	adds	r3, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	061a      	lsls	r2, r3, #24
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3306      	adds	r3, #6
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3305      	adds	r3, #5
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	4313      	orrs	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	3204      	adds	r2, #4
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	4610      	mov	r0, r2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	6811      	ldr	r1, [r2, #0]
 8001762:	ea43 0200 	orr.w	r2, r3, r0
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	440b      	add	r3, r1
 800176c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001770:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3303      	adds	r3, #3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	061a      	lsls	r2, r3, #24
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3302      	adds	r3, #2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3301      	adds	r3, #1
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	4313      	orrs	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	4610      	mov	r0, r2
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	6811      	ldr	r1, [r2, #0]
 8001798:	ea43 0200 	orr.w	r2, r3, r0
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	440b      	add	r3, r1
 80017a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3318      	adds	r3, #24
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	6811      	ldr	r1, [r2, #0]
 80017ba:	f043 0201 	orr.w	r2, r3, #1
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3318      	adds	r3, #24
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	440b      	add	r3, r1
 80017c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e00e      	b.n	80017ea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e006      	b.n	80017ea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
  }
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017f6:	b480      	push	{r7}
 80017f8:	b087      	sub	sp, #28
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d003      	beq.n	800181a <HAL_CAN_GetRxMessage+0x24>
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b02      	cmp	r3, #2
 8001816:	f040 80f3 	bne.w	8001a00 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10e      	bne.n	800183e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0e7      	b.n	8001a0e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0d8      	b.n	8001a0e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	331b      	adds	r3, #27
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0204 	and.w	r2, r3, #4
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	331b      	adds	r3, #27
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0d5b      	lsrs	r3, r3, #21
 800188a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e00b      	b.n	80018ac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	331b      	adds	r3, #27
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4413      	add	r3, r2
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	331b      	adds	r3, #27
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0202 	and.w	r2, r3, #2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	331b      	adds	r3, #27
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4413      	add	r3, r2
 80018ce:	3304      	adds	r3, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 020f 	and.w	r2, r3, #15
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	331b      	adds	r3, #27
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	3304      	adds	r3, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	331b      	adds	r3, #27
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	3304      	adds	r3, #4
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0c1b      	lsrs	r3, r3, #16
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	4413      	add	r3, r2
 8001914:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0a1a      	lsrs	r2, r3, #8
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0c1a      	lsrs	r2, r3, #16
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	3302      	adds	r3, #2
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4413      	add	r3, r2
 800195e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0e1a      	lsrs	r2, r3, #24
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3303      	adds	r3, #3
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	3304      	adds	r3, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	0a1a      	lsrs	r2, r3, #8
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3305      	adds	r3, #5
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0c1a      	lsrs	r2, r3, #16
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3306      	adds	r3, #6
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0e1a      	lsrs	r2, r3, #24
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3307      	adds	r3, #7
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d108      	bne.n	80019ec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0220 	orr.w	r2, r2, #32
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	e007      	b.n	80019fc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0220 	orr.w	r2, r2, #32
 80019fa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e006      	b.n	8001a0e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
  }
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d002      	beq.n	8001a38 <HAL_CAN_ActivateNotification+0x1e>
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d109      	bne.n	8001a4c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6959      	ldr	r1, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e006      	b.n	8001a5a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
  }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b08a      	sub	sp, #40	; 0x28
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d07c      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d023      	beq.n	8001afe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2201      	movs	r2, #1
 8001abc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe ff7f 	bl	80009cc <HAL_CAN_TxMailbox0CompleteCallback>
 8001ace:	e016      	b.n	8001afe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae2:	e00c      	b.n	8001afe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	e002      	b.n	8001afe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f96b 	bl	8001dd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d024      	beq.n	8001b52 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7fe ff75 	bl	8000a0c <HAL_CAN_TxMailbox1CompleteCallback>
 8001b22:	e016      	b.n	8001b52 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d004      	beq.n	8001b38 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	e00c      	b.n	8001b52 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4a:	e002      	b.n	8001b52 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f94b 	bl	8001de8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d024      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7fe ff6b 	bl	8000a4c <HAL_CAN_TxMailbox2CompleteCallback>
 8001b76:	e016      	b.n	8001ba6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	e00c      	b.n	8001ba6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9e:	e002      	b.n	8001ba6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f92b 	bl	8001dfc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00c      	beq.n	8001bca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2208      	movs	r2, #8
 8001be4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f912 	bl	8001e10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7fe ff41 	bl	8000a8c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00c      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00b      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2208      	movs	r2, #8
 8001c48:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8f4 	bl	8001e38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8db 	bl	8001e24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00b      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2210      	movs	r2, #16
 8001c88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8de 	bl	8001e4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2208      	movs	r2, #8
 8001caa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f8d7 	bl	8001e60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d07b      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d072      	beq.n	8001dac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d043      	beq.n	8001dac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d03e      	beq.n	8001dac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d34:	2b60      	cmp	r3, #96	; 0x60
 8001d36:	d02b      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x32a>
 8001d38:	2b60      	cmp	r3, #96	; 0x60
 8001d3a:	d82e      	bhi.n	8001d9a <HAL_CAN_IRQHandler+0x334>
 8001d3c:	2b50      	cmp	r3, #80	; 0x50
 8001d3e:	d022      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x320>
 8001d40:	2b50      	cmp	r3, #80	; 0x50
 8001d42:	d82a      	bhi.n	8001d9a <HAL_CAN_IRQHandler+0x334>
 8001d44:	2b40      	cmp	r3, #64	; 0x40
 8001d46:	d019      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x316>
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d826      	bhi.n	8001d9a <HAL_CAN_IRQHandler+0x334>
 8001d4c:	2b30      	cmp	r3, #48	; 0x30
 8001d4e:	d010      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x30c>
 8001d50:	2b30      	cmp	r3, #48	; 0x30
 8001d52:	d822      	bhi.n	8001d9a <HAL_CAN_IRQHandler+0x334>
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d002      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x2f8>
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d005      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d5c:	e01d      	b.n	8001d9a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d66:	e019      	b.n	8001d9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d70:	e014      	b.n	8001d9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f043 0320 	orr.w	r3, r3, #32
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d7a:	e00f      	b.n	8001d9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d84:	e00a      	b.n	8001d9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d8e:	e005      	b.n	8001d9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d98:	e000      	b.n	8001d9c <HAL_CAN_IRQHandler+0x336>
            break;
 8001d9a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001daa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2204      	movs	r2, #4
 8001db2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f854 	bl	8001e74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4907      	ldr	r1, [pc, #28]	; (8001f24 <__NVIC_EnableIRQ+0x38>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff29 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff3e 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff8e 	bl	8001f7c <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5d 	bl	8001f28 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff31 	bl	8001eec <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffa2 	bl	8001fe4 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d106      	bne.n	80020c8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80020c6:	e005      	b.n	80020d4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80020ce:	f023 0304 	bic.w	r3, r3, #4
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80020e8:	f000 f802 	bl	80020f0 <HAL_SYSTICK_Callback>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d004      	beq.n	800211c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e00c      	b.n	8002136 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2205      	movs	r2, #5
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e177      	b.n	800246c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 8166 	bne.w	8002466 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d005      	beq.n	80021b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d130      	bne.n	8002214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0201 	and.w	r2, r3, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d017      	beq.n	8002250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d123      	bne.n	80022a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80c0 	beq.w	8002466 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_GPIO_Init+0x324>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_GPIO_Init+0x324>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_GPIO_Init+0x324>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002302:	4a61      	ldr	r2, [pc, #388]	; (8002488 <HAL_GPIO_Init+0x328>)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a58      	ldr	r2, [pc, #352]	; (800248c <HAL_GPIO_Init+0x32c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d037      	beq.n	800239e <HAL_GPIO_Init+0x23e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a57      	ldr	r2, [pc, #348]	; (8002490 <HAL_GPIO_Init+0x330>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d031      	beq.n	800239a <HAL_GPIO_Init+0x23a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a56      	ldr	r2, [pc, #344]	; (8002494 <HAL_GPIO_Init+0x334>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d02b      	beq.n	8002396 <HAL_GPIO_Init+0x236>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a55      	ldr	r2, [pc, #340]	; (8002498 <HAL_GPIO_Init+0x338>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d025      	beq.n	8002392 <HAL_GPIO_Init+0x232>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a54      	ldr	r2, [pc, #336]	; (800249c <HAL_GPIO_Init+0x33c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01f      	beq.n	800238e <HAL_GPIO_Init+0x22e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a53      	ldr	r2, [pc, #332]	; (80024a0 <HAL_GPIO_Init+0x340>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_Init+0x22a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_GPIO_Init+0x344>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x226>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a51      	ldr	r2, [pc, #324]	; (80024a8 <HAL_GPIO_Init+0x348>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_Init+0x222>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a50      	ldr	r2, [pc, #320]	; (80024ac <HAL_GPIO_Init+0x34c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x21e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4f      	ldr	r2, [pc, #316]	; (80024b0 <HAL_GPIO_Init+0x350>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_Init+0x21a>
 8002376:	2309      	movs	r3, #9
 8002378:	e012      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 800237a:	230a      	movs	r3, #10
 800237c:	e010      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 800237e:	2308      	movs	r3, #8
 8002380:	e00e      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 8002382:	2307      	movs	r3, #7
 8002384:	e00c      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 8002386:	2306      	movs	r3, #6
 8002388:	e00a      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 800238a:	2305      	movs	r3, #5
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 800238e:	2304      	movs	r3, #4
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x240>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	; (8002488 <HAL_GPIO_Init+0x328>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_GPIO_Init+0x354>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a34      	ldr	r2, [pc, #208]	; (80024b4 <HAL_GPIO_Init+0x354>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_GPIO_Init+0x354>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <HAL_GPIO_Init+0x354>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002412:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <HAL_GPIO_Init+0x354>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002436:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_GPIO_Init+0x354>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_GPIO_Init+0x354>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_GPIO_Init+0x354>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f ae84 	bls.w	800217c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40021400 	.word	0x40021400
 80024a4:	40021800 	.word	0x40021800
 80024a8:	40021c00 	.word	0x40021c00
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40022400 	.word	0x40022400
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	619a      	str	r2, [r3, #24]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024fc:	887a      	ldrh	r2, [r7, #2]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	041a      	lsls	r2, r3, #16
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43d9      	mvns	r1, r3
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	400b      	ands	r3, r1
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e12b      	b.n	800278a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fca8 	bl	8000e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002584:	f002 fa4c 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a81      	ldr	r2, [pc, #516]	; (8002794 <HAL_I2C_Init+0x274>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d807      	bhi.n	80025a4 <HAL_I2C_Init+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_I2C_Init+0x278>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e006      	b.n	80025b2 <HAL_I2C_Init+0x92>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a7d      	ldr	r2, [pc, #500]	; (800279c <HAL_I2C_Init+0x27c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0e7      	b.n	800278a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <HAL_I2C_Init+0x280>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_I2C_Init+0x274>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_Init+0xd4>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e009      	b.n	8002608 <HAL_I2C_Init+0xe8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a69      	ldr	r2, [pc, #420]	; (80027a4 <HAL_I2C_Init+0x284>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800261a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	495c      	ldr	r1, [pc, #368]	; (8002794 <HAL_I2C_Init+0x274>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d819      	bhi.n	800265c <HAL_I2C_Init+0x13c>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fbb1 f3f3 	udiv	r3, r1, r3
 8002636:	1c59      	adds	r1, r3, #1
 8002638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800263c:	400b      	ands	r3, r1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_I2C_Init+0x138>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e59      	subs	r1, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	e051      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 8002658:	2304      	movs	r3, #4
 800265a:	e04f      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <HAL_I2C_Init+0x168>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e012      	b.n	80026ae <HAL_I2C_Init+0x18e>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	0099      	lsls	r1, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x196>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e022      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10e      	bne.n	80026dc <HAL_I2C_Init+0x1bc>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e58      	subs	r0, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	440b      	add	r3, r1
 80026cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026da:	e00f      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6809      	ldr	r1, [r1, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800272a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6911      	ldr	r1, [r2, #16]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	000186a0 	.word	0x000186a0
 8002798:	001e847f 	.word	0x001e847f
 800279c:	003d08ff 	.word	0x003d08ff
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d003      	beq.n	80027e0 <HAL_I2C_EV_IRQHandler+0x38>
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	f040 80c1 	bne.w	8002962 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <HAL_I2C_EV_IRQHandler+0x6e>
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002800:	d003      	beq.n	800280a <HAL_I2C_EV_IRQHandler+0x62>
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002808:	d101      	bne.n	800280e <HAL_I2C_EV_IRQHandler+0x66>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_I2C_EV_IRQHandler+0x68>
 800280e:	2300      	movs	r3, #0
 8002810:	2b01      	cmp	r3, #1
 8002812:	f000 8132 	beq.w	8002a7a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <HAL_I2C_EV_IRQHandler+0x92>
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	0a5b      	lsrs	r3, r3, #9
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f001 fc6b 	bl	8004108 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fd73 	bl	800331e <I2C_Master_SB>
 8002838:	e092      	b.n	8002960 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_I2C_EV_IRQHandler+0xb2>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	0a5b      	lsrs	r3, r3, #9
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fde9 	bl	800342a <I2C_Master_ADD10>
 8002858:	e082      	b.n	8002960 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0xd2>
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	0a5b      	lsrs	r3, r3, #9
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fe03 	bl	800347e <I2C_Master_ADDR>
 8002878:	e072      	b.n	8002960 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d03b      	beq.n	80028fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002894:	f000 80f3 	beq.w	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	09db      	lsrs	r3, r3, #7
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00f      	beq.n	80028c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f9e3 	bl	8002c88 <I2C_MasterTransmit_TXE>
 80028c2:	e04d      	b.n	8002960 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80d6 	beq.w	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	0a5b      	lsrs	r3, r3, #9
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80cf 	beq.w	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	2b21      	cmp	r3, #33	; 0x21
 80028e4:	d103      	bne.n	80028ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa6a 	bl	8002dc0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ec:	e0c7      	b.n	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	f040 80c4 	bne.w	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fad8 	bl	8002eac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028fc:	e0bf      	b.n	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800290c:	f000 80b7 	beq.w	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00f      	beq.n	800293c <HAL_I2C_EV_IRQHandler+0x194>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	0a9b      	lsrs	r3, r3, #10
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <HAL_I2C_EV_IRQHandler+0x194>
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d103      	bne.n	800293c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fb4d 	bl	8002fd4 <I2C_MasterReceive_RXNE>
 800293a:	e011      	b.n	8002960 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 809a 	beq.w	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	0a5b      	lsrs	r3, r3, #9
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8093 	beq.w	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fbf6 	bl	800314a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800295e:	e08e      	b.n	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002960:	e08d      	b.n	8002a7e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e007      	b.n	8002984 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d012      	beq.n	80029b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	0a5b      	lsrs	r3, r3, #9
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00c      	beq.n	80029b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80029ac:	69b9      	ldr	r1, [r7, #24]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 ffb4 	bl	800391c <I2C_Slave_ADDR>
 80029b4:	e066      	b.n	8002a84 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	0a5b      	lsrs	r3, r3, #9
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 ffee 	bl	80039b0 <I2C_Slave_STOPF>
 80029d4:	e056      	b.n	8002a84 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029d6:	7bbb      	ldrb	r3, [r7, #14]
 80029d8:	2b21      	cmp	r3, #33	; 0x21
 80029da:	d002      	beq.n	80029e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80029dc:	7bbb      	ldrb	r3, [r7, #14]
 80029de:	2b29      	cmp	r3, #41	; 0x29
 80029e0:	d125      	bne.n	8002a2e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	09db      	lsrs	r3, r3, #7
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00f      	beq.n	8002a0e <HAL_I2C_EV_IRQHandler+0x266>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	0a9b      	lsrs	r3, r3, #10
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_I2C_EV_IRQHandler+0x266>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 feca 	bl	80037a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a0c:	e039      	b.n	8002a82 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d033      	beq.n	8002a82 <HAL_I2C_EV_IRQHandler+0x2da>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	0a5b      	lsrs	r3, r3, #9
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d02d      	beq.n	8002a82 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fef7 	bl	800381a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a2c:	e029      	b.n	8002a82 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00f      	beq.n	8002a5a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	0a9b      	lsrs	r3, r3, #10
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 ff02 	bl	800385c <I2C_SlaveReceive_RXNE>
 8002a58:	e014      	b.n	8002a84 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00e      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	0a5b      	lsrs	r3, r3, #9
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 ff30 	bl	80038d8 <I2C_SlaveReceive_BTF>
 8002a78:	e004      	b.n	8002a84 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002a7a:	bf00      	nop
 8002a7c:	e002      	b.n	8002a84 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b08a      	sub	sp, #40	; 0x28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_I2C_ER_IRQHandler+0x4e>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ad6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	0a5b      	lsrs	r3, r3, #9
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <HAL_I2C_ER_IRQHandler+0x78>
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002b00:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	0a9b      	lsrs	r3, r3, #10
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d03f      	beq.n	8002b8e <HAL_I2C_ER_IRQHandler+0x104>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d039      	beq.n	8002b8e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002b1a:	7efb      	ldrb	r3, [r7, #27]
 8002b1c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002b34:	7ebb      	ldrb	r3, [r7, #26]
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d112      	bne.n	8002b60 <HAL_I2C_ER_IRQHandler+0xd6>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <HAL_I2C_ER_IRQHandler+0xd6>
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b21      	cmp	r3, #33	; 0x21
 8002b44:	d008      	beq.n	8002b58 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	2b29      	cmp	r3, #41	; 0x29
 8002b4a:	d005      	beq.n	8002b58 <HAL_I2C_ER_IRQHandler+0xce>
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	2b28      	cmp	r3, #40	; 0x28
 8002b50:	d106      	bne.n	8002b60 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b21      	cmp	r3, #33	; 0x21
 8002b56:	d103      	bne.n	8002b60 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f001 f859 	bl	8003c10 <I2C_Slave_AF>
 8002b5e:	e016      	b.n	8002b8e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b68:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b72:	7efb      	ldrb	r3, [r7, #27]
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d002      	beq.n	8002b7e <HAL_I2C_ER_IRQHandler+0xf4>
 8002b78:	7efb      	ldrb	r3, [r7, #27]
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d107      	bne.n	8002b8e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	0adb      	lsrs	r3, r3, #11
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00e      	beq.n	8002bb8 <HAL_I2C_ER_IRQHandler+0x12e>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002bb6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f001 f890 	bl	8003cf0 <I2C_ITError>
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d150      	bne.n	8002d50 <I2C_MasterTransmit_TXE+0xc8>
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b21      	cmp	r3, #33	; 0x21
 8002cb2:	d14d      	bne.n	8002d50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d01d      	beq.n	8002cf6 <I2C_MasterTransmit_TXE+0x6e>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d01a      	beq.n	8002cf6 <I2C_MasterTransmit_TXE+0x6e>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc6:	d016      	beq.n	8002cf6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cd6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2211      	movs	r2, #17
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe f808 	bl	8000d04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cf4:	e060      	b.n	8002db8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d107      	bne.n	8002d40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff79 	bl	8002c30 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d3e:	e03b      	b.n	8002db8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fd ffdb 	bl	8000d04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d4e:	e033      	b.n	8002db8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b21      	cmp	r3, #33	; 0x21
 8002d54:	d005      	beq.n	8002d62 <I2C_MasterTransmit_TXE+0xda>
 8002d56:	7bbb      	ldrb	r3, [r7, #14]
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d12d      	bne.n	8002db8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b22      	cmp	r3, #34	; 0x22
 8002d60:	d12a      	bne.n	8002db8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d7c:	e01c      	b.n	8002db8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d103      	bne.n	8002d92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f88e 	bl	8002eac <I2C_MemoryTransmit_TXE_BTF>
}
 8002d90:	e012      	b.n	8002db8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002db6:	e7ff      	b.n	8002db8 <I2C_MasterTransmit_TXE+0x130>
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b21      	cmp	r3, #33	; 0x21
 8002dd8:	d164      	bne.n	8002ea4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e08:	e04c      	b.n	8002ea4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d01d      	beq.n	8002e4c <I2C_MasterTransmit_BTF+0x8c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d01a      	beq.n	8002e4c <I2C_MasterTransmit_BTF+0x8c>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e1c:	d016      	beq.n	8002e4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2211      	movs	r2, #17
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd ff5d 	bl	8000d04 <HAL_I2C_MasterTxCpltCallback>
}
 8002e4a:	e02b      	b.n	8002ea4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d107      	bne.n	8002e96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fece 	bl	8002c30 <HAL_I2C_MemTxCpltCallback>
}
 8002e94:	e006      	b.n	8002ea4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd ff30 	bl	8000d04 <HAL_I2C_MasterTxCpltCallback>
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11d      	bne.n	8002f00 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10b      	bne.n	8002ee4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	1c9a      	adds	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002ee2:	e073      	b.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	121b      	asrs	r3, r3, #8
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002efe:	e065      	b.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10b      	bne.n	8002f20 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f1e:	e055      	b.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d151      	bne.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b22      	cmp	r3, #34	; 0x22
 8002f2c:	d10d      	bne.n	8002f4a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f48:	e040      	b.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b21      	cmp	r3, #33	; 0x21
 8002f58:	d112      	bne.n	8002f80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f7e:	e025      	b.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d120      	bne.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b21      	cmp	r3, #33	; 0x21
 8002f8e:	d11d      	bne.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f9e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fe32 	bl	8002c30 <HAL_I2C_MemTxCpltCallback>
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b22      	cmp	r3, #34	; 0x22
 8002fe6:	f040 80ac 	bne.w	8003142 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d921      	bls.n	800303c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b03      	cmp	r3, #3
 8003026:	f040 808c 	bne.w	8003142 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003038:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800303a:	e082      	b.n	8003142 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	2b02      	cmp	r3, #2
 8003042:	d075      	beq.n	8003130 <I2C_MasterReceive_RXNE+0x15c>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d002      	beq.n	8003050 <I2C_MasterReceive_RXNE+0x7c>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d16f      	bne.n	8003130 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f001 f827 	bl	80040a4 <I2C_WaitOnSTOPRequestThroughIT>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d142      	bne.n	80030e2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800307a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d10a      	bne.n	80030cc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fdbd 	bl	8002c44 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030ca:	e03a      	b.n	8003142 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2212      	movs	r2, #18
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fe22 	bl	8000d24 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030e0:	e02f      	b.n	8003142 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd fe0b 	bl	8000d44 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800312e:	e008      	b.n	8003142 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313e:	605a      	str	r2, [r3, #4]
}
 8003140:	e7ff      	b.n	8003142 <I2C_MasterReceive_RXNE+0x16e>
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b04      	cmp	r3, #4
 8003160:	d11b      	bne.n	800319a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003170:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003198:	e0bd      	b.n	8003316 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d129      	bne.n	80031f8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d00a      	beq.n	80031d0 <I2C_MasterReceive_BTF+0x86>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d007      	beq.n	80031d0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031f6:	e08e      	b.n	8003316 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d176      	bne.n	80032f0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d002      	beq.n	800320e <I2C_MasterReceive_BTF+0xc4>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b10      	cmp	r3, #16
 800320c:	d108      	bne.n	8003220 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e019      	b.n	8003254 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d002      	beq.n	800322c <I2C_MasterReceive_BTF+0xe2>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d108      	bne.n	800323e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e00a      	b.n	8003254 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b10      	cmp	r3, #16
 8003242:	d007      	beq.n	8003254 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003252:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d10a      	bne.n	80032da <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fcb6 	bl	8002c44 <HAL_I2C_MemRxCpltCallback>
}
 80032d8:	e01d      	b.n	8003316 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2212      	movs	r2, #18
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fd fd1b 	bl	8000d24 <HAL_I2C_MasterRxCpltCallback>
}
 80032ee:	e012      	b.n	8003316 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d117      	bne.n	8003362 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800334a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800334c:	e067      	b.n	800341e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]
}
 8003360:	e05d      	b.n	800341e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800336a:	d133      	bne.n	80033d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b21      	cmp	r3, #33	; 0x21
 8003376:	d109      	bne.n	800338c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003388:	611a      	str	r2, [r3, #16]
 800338a:	e008      	b.n	800339e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	b2da      	uxtb	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <I2C_Master_SB+0x92>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d108      	bne.n	80033c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d032      	beq.n	800341e <I2C_Master_SB+0x100>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d02d      	beq.n	800341e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d0:	605a      	str	r2, [r3, #4]
}
 80033d2:	e024      	b.n	800341e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10e      	bne.n	80033fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	11db      	asrs	r3, r3, #7
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f003 0306 	and.w	r3, r3, #6
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f063 030f 	orn	r3, r3, #15
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]
}
 80033f8:	e011      	b.n	800341e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d10d      	bne.n	800341e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	b29b      	uxth	r3, r3
 8003408:	11db      	asrs	r3, r3, #7
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f003 0306 	and.w	r3, r3, #6
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f063 030e 	orn	r3, r3, #14
 8003416:	b2da      	uxtb	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	611a      	str	r2, [r3, #16]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	b2da      	uxtb	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <I2C_Master_ADD10+0x26>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d108      	bne.n	8003462 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <I2C_Master_ADD10+0x48>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003470:	605a      	str	r2, [r3, #4]
  }
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800347e:	b480      	push	{r7}
 8003480:	b091      	sub	sp, #68	; 0x44
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b22      	cmp	r3, #34	; 0x22
 80034a6:	f040 8169 	bne.w	800377c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <I2C_Master_ADDR+0x54>
 80034b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d10b      	bne.n	80034d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	e160      	b.n	8003794 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11d      	bne.n	8003516 <I2C_Master_ADDR+0x98>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034e2:	d118      	bne.n	8003516 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e4:	2300      	movs	r3, #0
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003508:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	651a      	str	r2, [r3, #80]	; 0x50
 8003514:	e13e      	b.n	8003794 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d113      	bne.n	8003548 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003520:	2300      	movs	r3, #0
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e115      	b.n	8003774 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	f040 808a 	bne.w	8003668 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800355a:	d137      	bne.n	80035cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800357a:	d113      	bne.n	80035a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	e0e7      	b.n	8003774 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a4:	2300      	movs	r3, #0
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e0d3      	b.n	8003774 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d02e      	beq.n	8003630 <I2C_Master_ADDR+0x1b2>
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d02b      	beq.n	8003630 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d102      	bne.n	80035e4 <I2C_Master_ADDR+0x166>
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d125      	bne.n	8003630 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d00e      	beq.n	8003608 <I2C_Master_ADDR+0x18a>
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d00b      	beq.n	8003608 <I2C_Master_ADDR+0x18a>
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d008      	beq.n	8003608 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003616:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	e0a1      	b.n	8003774 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e085      	b.n	8003774 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d14d      	bne.n	800370e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b04      	cmp	r3, #4
 8003676:	d016      	beq.n	80036a6 <I2C_Master_ADDR+0x228>
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b02      	cmp	r3, #2
 800367c:	d013      	beq.n	80036a6 <I2C_Master_ADDR+0x228>
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	2b10      	cmp	r3, #16
 8003682:	d010      	beq.n	80036a6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003692:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e007      	b.n	80036b6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c4:	d117      	bne.n	80036f6 <I2C_Master_ADDR+0x278>
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036cc:	d00b      	beq.n	80036e6 <I2C_Master_ADDR+0x268>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d008      	beq.n	80036e6 <I2C_Master_ADDR+0x268>
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d005      	beq.n	80036e6 <I2C_Master_ADDR+0x268>
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d002      	beq.n	80036e6 <I2C_Master_ADDR+0x268>
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d107      	bne.n	80036f6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	e032      	b.n	8003774 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800371c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372c:	d117      	bne.n	800375e <I2C_Master_ADDR+0x2e0>
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003734:	d00b      	beq.n	800374e <I2C_Master_ADDR+0x2d0>
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	2b01      	cmp	r3, #1
 800373a:	d008      	beq.n	800374e <I2C_Master_ADDR+0x2d0>
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	2b08      	cmp	r3, #8
 8003740:	d005      	beq.n	800374e <I2C_Master_ADDR+0x2d0>
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003744:	2b10      	cmp	r3, #16
 8003746:	d002      	beq.n	800374e <I2C_Master_ADDR+0x2d0>
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	2b20      	cmp	r3, #32
 800374c:	d107      	bne.n	800375e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800375c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800377a:	e00b      	b.n	8003794 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
}
 8003792:	e7ff      	b.n	8003794 <I2C_Master_ADDR+0x316>
 8003794:	bf00      	nop
 8003796:	3744      	adds	r7, #68	; 0x44
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d02b      	beq.n	8003812 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d114      	bne.n	8003812 <I2C_SlaveTransmit_TXE+0x72>
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b29      	cmp	r3, #41	; 0x29
 80037ec:	d111      	bne.n	8003812 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2221      	movs	r2, #33	; 0x21
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2228      	movs	r2, #40	; 0x28
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff f9e3 	bl	8002bd8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d011      	beq.n	8003850 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02c      	beq.n	80038d0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d114      	bne.n	80038d0 <I2C_SlaveReceive_RXNE+0x74>
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b2a      	cmp	r3, #42	; 0x2a
 80038aa:	d111      	bne.n	80038d0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2222      	movs	r2, #34	; 0x22
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2228      	movs	r2, #40	; 0x28
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff f98e 	bl	8002bec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003936:	2b28      	cmp	r3, #40	; 0x28
 8003938:	d127      	bne.n	800398a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003948:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	09db      	lsrs	r3, r3, #7
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	81bb      	strh	r3, [r7, #12]
 800396c:	e002      	b.n	8003974 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800397c:	89ba      	ldrh	r2, [r7, #12]
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff f93c 	bl	8002c00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003988:	e00e      	b.n	80039a8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0c:	d172      	bne.n	8003af4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b22      	cmp	r3, #34	; 0x22
 8003a12:	d002      	beq.n	8003a1a <I2C_Slave_STOPF+0x6a>
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b2a      	cmp	r3, #42	; 0x2a
 8003a18:	d135      	bne.n	8003a86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fb75 	bl	8002142 <HAL_DMA_GetState>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d049      	beq.n	8003af2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	4a69      	ldr	r2, [pc, #420]	; (8003c08 <I2C_Slave_STOPF+0x258>)
 8003a64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fb47 	bl	80020fe <HAL_DMA_Abort_IT>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03d      	beq.n	8003af2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a84:	e035      	b.n	8003af2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fb3f 	bl	8002142 <HAL_DMA_GetState>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d014      	beq.n	8003af4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <I2C_Slave_STOPF+0x258>)
 8003ad0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fb11 	bl	80020fe <HAL_DMA_Abort_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
 8003af0:	e000      	b.n	8003af4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003af2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d03e      	beq.n	8003b7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d112      	bne.n	8003b32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d112      	bne.n	8003b66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f043 0204 	orr.w	r2, r3, #4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f8b3 	bl	8003cf0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b8a:	e039      	b.n	8003c00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b90:	d109      	bne.n	8003ba6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2228      	movs	r2, #40	; 0x28
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff f823 	bl	8002bec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b28      	cmp	r3, #40	; 0x28
 8003bb0:	d111      	bne.n	8003bd6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <I2C_Slave_STOPF+0x25c>)
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff f824 	bl	8002c1c <HAL_I2C_ListenCpltCallback>
}
 8003bd4:	e014      	b.n	8003c00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	2b22      	cmp	r3, #34	; 0x22
 8003bdc:	d002      	beq.n	8003be4 <I2C_Slave_STOPF+0x234>
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b22      	cmp	r3, #34	; 0x22
 8003be2:	d10d      	bne.n	8003c00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fe fff6 	bl	8002bec <HAL_I2C_SlaveRxCpltCallback>
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	08003f55 	.word	0x08003f55
 8003c0c:	ffff0000 	.word	0xffff0000

08003c10 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d002      	beq.n	8003c32 <I2C_Slave_AF+0x22>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d129      	bne.n	8003c86 <I2C_Slave_AF+0x76>
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b28      	cmp	r3, #40	; 0x28
 8003c36:	d126      	bne.n	8003c86 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <I2C_Slave_AF+0xdc>)
 8003c3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c4c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c56:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fe ffcc 	bl	8002c1c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003c84:	e02e      	b.n	8003ce4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b21      	cmp	r3, #33	; 0x21
 8003c8a:	d126      	bne.n	8003cda <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <I2C_Slave_AF+0xdc>)
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2221      	movs	r2, #33	; 0x21
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cb6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe ff80 	bl	8002bd8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003cd8:	e004      	b.n	8003ce4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ce2:	615a      	str	r2, [r3, #20]
}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	ffff0000 	.word	0xffff0000

08003cf0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d08:	7bbb      	ldrb	r3, [r7, #14]
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d002      	beq.n	8003d14 <I2C_ITError+0x24>
 8003d0e:	7bbb      	ldrb	r3, [r7, #14]
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d10a      	bne.n	8003d2a <I2C_ITError+0x3a>
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b22      	cmp	r3, #34	; 0x22
 8003d18:	d107      	bne.n	8003d2a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d28:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d30:	2b28      	cmp	r3, #40	; 0x28
 8003d32:	d107      	bne.n	8003d44 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2228      	movs	r2, #40	; 0x28
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d42:	e015      	b.n	8003d70 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d52:	d00a      	beq.n	8003d6a <I2C_ITError+0x7a>
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b60      	cmp	r3, #96	; 0x60
 8003d58:	d007      	beq.n	8003d6a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d162      	bne.n	8003e46 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d8e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d020      	beq.n	8003de0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	4a6a      	ldr	r2, [pc, #424]	; (8003f4c <I2C_ITError+0x25c>)
 8003da4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe f9a7 	bl	80020fe <HAL_DMA_Abort_IT>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8089 	beq.w	8003eca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4798      	blx	r3
 8003dde:	e074      	b.n	8003eca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	4a59      	ldr	r2, [pc, #356]	; (8003f4c <I2C_ITError+0x25c>)
 8003de6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe f986 	bl	80020fe <HAL_DMA_Abort_IT>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d068      	beq.n	8003eca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d10b      	bne.n	8003e1e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e40:	4610      	mov	r0, r2
 8003e42:	4798      	blx	r3
 8003e44:	e041      	b.n	8003eca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b60      	cmp	r3, #96	; 0x60
 8003e50:	d125      	bne.n	8003e9e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d10b      	bne.n	8003e86 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fe fede 	bl	8002c58 <HAL_I2C_AbortCpltCallback>
 8003e9c:	e015      	b.n	8003eca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d10b      	bne.n	8003ec4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fc ff3d 	bl	8000d44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10e      	bne.n	8003ef8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f06:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d113      	bne.n	8003f44 <I2C_ITError+0x254>
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b28      	cmp	r3, #40	; 0x28
 8003f20:	d110      	bne.n	8003f44 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <I2C_ITError+0x260>)
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fe fe6c 	bl	8002c1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	08003f55 	.word	0x08003f55
 8003f50:	ffff0000 	.word	0xffff0000

08003f54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f6e:	4b4b      	ldr	r3, [pc, #300]	; (800409c <I2C_DMAAbort+0x148>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	08db      	lsrs	r3, r3, #3
 8003f74:	4a4a      	ldr	r2, [pc, #296]	; (80040a0 <I2C_DMAAbort+0x14c>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0a1a      	lsrs	r2, r3, #8
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	00da      	lsls	r2, r3, #3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003f9a:	e00a      	b.n	8003fb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb0:	d0ea      	beq.n	8003f88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	2200      	movs	r2, #0
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	2200      	movs	r2, #0
 8004006:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b60      	cmp	r3, #96	; 0x60
 8004022:	d10e      	bne.n	8004042 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800403a:	6978      	ldr	r0, [r7, #20]
 800403c:	f7fe fe0c 	bl	8002c58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004040:	e027      	b.n	8004092 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004048:	2b28      	cmp	r3, #40	; 0x28
 800404a:	d117      	bne.n	800407c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800406a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2228      	movs	r2, #40	; 0x28
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800407a:	e007      	b.n	800408c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800408c:	6978      	ldr	r0, [r7, #20]
 800408e:	f7fc fe59 	bl	8000d44 <HAL_I2C_ErrorCallback>
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000000 	.word	0x20000000
 80040a0:	14f8b589 	.word	0x14f8b589

080040a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	08db      	lsrs	r3, r3, #3
 80040b6:	4a13      	ldr	r2, [pc, #76]	; (8004104 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	0a1a      	lsrs	r2, r3, #8
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d107      	bne.n	80040e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0220 	orr.w	r2, r3, #32
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e008      	b.n	80040f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f0:	d0e9      	beq.n	80040c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20000000 	.word	0x20000000
 8004104:	14f8b589 	.word	0x14f8b589

08004108 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004118:	d103      	bne.n	8004122 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004120:	e007      	b.n	8004132 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800412a:	d102      	bne.n	8004132 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2208      	movs	r2, #8
 8004130:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e267      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d075      	beq.n	800424a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415e:	4b88      	ldr	r3, [pc, #544]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b04      	cmp	r3, #4
 8004168:	d00c      	beq.n	8004184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416a:	4b85      	ldr	r3, [pc, #532]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004172:	2b08      	cmp	r3, #8
 8004174:	d112      	bne.n	800419c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004176:	4b82      	ldr	r3, [pc, #520]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004182:	d10b      	bne.n	800419c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	4b7e      	ldr	r3, [pc, #504]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d05b      	beq.n	8004248 <HAL_RCC_OscConfig+0x108>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d157      	bne.n	8004248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e242      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a4:	d106      	bne.n	80041b4 <HAL_RCC_OscConfig+0x74>
 80041a6:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a75      	ldr	r2, [pc, #468]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e01d      	b.n	80041f0 <HAL_RCC_OscConfig+0xb0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x98>
 80041be:	4b70      	ldr	r3, [pc, #448]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6f      	ldr	r2, [pc, #444]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b6d      	ldr	r3, [pc, #436]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a6c      	ldr	r2, [pc, #432]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e00b      	b.n	80041f0 <HAL_RCC_OscConfig+0xb0>
 80041d8:	4b69      	ldr	r3, [pc, #420]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a68      	ldr	r2, [pc, #416]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b66      	ldr	r3, [pc, #408]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a65      	ldr	r2, [pc, #404]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80041ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fc fff6 	bl	80011e8 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fc fff2 	bl	80011e8 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e207      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b5b      	ldr	r3, [pc, #364]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0xc0>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fc ffe2 	bl	80011e8 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fc ffde 	bl	80011e8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e1f3      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	4b51      	ldr	r3, [pc, #324]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0xe8>
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d063      	beq.n	800431e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004256:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800426a:	2b08      	cmp	r3, #8
 800426c:	d11c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426e:	4b44      	ldr	r3, [pc, #272]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d116      	bne.n	80042a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	4b41      	ldr	r3, [pc, #260]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_RCC_OscConfig+0x152>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e1c7      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004292:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4937      	ldr	r1, [pc, #220]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	e03a      	b.n	800431e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b0:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCC_OscConfig+0x244>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fc ff97 	bl	80011e8 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042be:	f7fc ff93 	bl	80011e8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1a8      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d0:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	4b28      	ldr	r3, [pc, #160]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4925      	ldr	r1, [pc, #148]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]
 80042f0:	e015      	b.n	800431e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCC_OscConfig+0x244>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fc ff76 	bl	80011e8 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004300:	f7fc ff72 	bl	80011e8 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e187      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004312:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d036      	beq.n	8004398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_RCC_OscConfig+0x248>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f7fc ff56 	bl	80011e8 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004340:	f7fc ff52 	bl	80011e8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e167      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_OscConfig+0x240>)
 8004354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x200>
 800435e:	e01b      	b.n	8004398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_OscConfig+0x248>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004366:	f7fc ff3f 	bl	80011e8 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	e00e      	b.n	800438c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436e:	f7fc ff3b 	bl	80011e8 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d907      	bls.n	800438c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e150      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
 8004380:	40023800 	.word	0x40023800
 8004384:	42470000 	.word	0x42470000
 8004388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800438c:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 800438e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ea      	bne.n	800436e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8097 	beq.w	80044d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043aa:	4b81      	ldr	r3, [pc, #516]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	4b7d      	ldr	r3, [pc, #500]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	4a7c      	ldr	r2, [pc, #496]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6413      	str	r3, [r2, #64]	; 0x40
 80043c6:	4b7a      	ldr	r3, [pc, #488]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	60bb      	str	r3, [r7, #8]
 80043d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d6:	4b77      	ldr	r3, [pc, #476]	; (80045b4 <HAL_RCC_OscConfig+0x474>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d118      	bne.n	8004414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e2:	4b74      	ldr	r3, [pc, #464]	; (80045b4 <HAL_RCC_OscConfig+0x474>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a73      	ldr	r2, [pc, #460]	; (80045b4 <HAL_RCC_OscConfig+0x474>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ee:	f7fc fefb 	bl	80011e8 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f6:	f7fc fef7 	bl	80011e8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e10c      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004408:	4b6a      	ldr	r3, [pc, #424]	; (80045b4 <HAL_RCC_OscConfig+0x474>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d106      	bne.n	800442a <HAL_RCC_OscConfig+0x2ea>
 800441c:	4b64      	ldr	r3, [pc, #400]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	4a63      	ldr	r2, [pc, #396]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6713      	str	r3, [r2, #112]	; 0x70
 8004428:	e01c      	b.n	8004464 <HAL_RCC_OscConfig+0x324>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b05      	cmp	r3, #5
 8004430:	d10c      	bne.n	800444c <HAL_RCC_OscConfig+0x30c>
 8004432:	4b5f      	ldr	r3, [pc, #380]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	4a5e      	ldr	r2, [pc, #376]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	6713      	str	r3, [r2, #112]	; 0x70
 800443e:	4b5c      	ldr	r3, [pc, #368]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a5b      	ldr	r2, [pc, #364]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0x324>
 800444c:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4a57      	ldr	r2, [pc, #348]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	6713      	str	r3, [r2, #112]	; 0x70
 8004458:	4b55      	ldr	r3, [pc, #340]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	4a54      	ldr	r2, [pc, #336]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 800445e:	f023 0304 	bic.w	r3, r3, #4
 8004462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d015      	beq.n	8004498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fc febc 	bl	80011e8 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004472:	e00a      	b.n	800448a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004474:	f7fc feb8 	bl	80011e8 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e0cb      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	4b49      	ldr	r3, [pc, #292]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ee      	beq.n	8004474 <HAL_RCC_OscConfig+0x334>
 8004496:	e014      	b.n	80044c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004498:	f7fc fea6 	bl	80011e8 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fc fea2 	bl	80011e8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0b5      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b6:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ee      	bne.n	80044a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c8:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	4a38      	ldr	r2, [pc, #224]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 80044ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a1 	beq.w	8004620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044de:	4b34      	ldr	r3, [pc, #208]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d05c      	beq.n	80045a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d141      	bne.n	8004576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <HAL_RCC_OscConfig+0x478>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fc fe76 	bl	80011e8 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004500:	f7fc fe72 	bl	80011e8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e087      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	3b01      	subs	r3, #1
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	491b      	ldr	r1, [pc, #108]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <HAL_RCC_OscConfig+0x478>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fc fe4b 	bl	80011e8 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004556:	f7fc fe47 	bl	80011e8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e05c      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x416>
 8004574:	e054      	b.n	8004620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_RCC_OscConfig+0x478>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fc fe34 	bl	80011e8 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fc fe30 	bl	80011e8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e045      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_RCC_OscConfig+0x470>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x444>
 80045a2:	e03d      	b.n	8004620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e038      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40007000 	.word	0x40007000
 80045b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_RCC_OscConfig+0x4ec>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d028      	beq.n	800461c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d121      	bne.n	800461c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d11a      	bne.n	800461c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045ec:	4013      	ands	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d111      	bne.n	800461c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	3b01      	subs	r3, #1
 8004606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d107      	bne.n	800461c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800

08004630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0cc      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004644:	4b68      	ldr	r3, [pc, #416]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d90c      	bls.n	800466c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b65      	ldr	r3, [pc, #404]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b63      	ldr	r3, [pc, #396]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0b8      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d020      	beq.n	80046ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004684:	4b59      	ldr	r3, [pc, #356]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4a58      	ldr	r2, [pc, #352]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800468e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a52      	ldr	r2, [pc, #328]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a8:	4b50      	ldr	r3, [pc, #320]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	494d      	ldr	r1, [pc, #308]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d044      	beq.n	8004750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	4b47      	ldr	r3, [pc, #284]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d119      	bne.n	800470e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e07f      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d107      	bne.n	80046fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ee:	4b3f      	ldr	r3, [pc, #252]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e06f      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fe:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e067      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f023 0203 	bic.w	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4934      	ldr	r1, [pc, #208]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004720:	f7fc fd62 	bl	80011e8 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004726:	e00a      	b.n	800473e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004728:	f7fc fd5e 	bl	80011e8 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e04f      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 020c 	and.w	r2, r3, #12
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	429a      	cmp	r2, r3
 800474e:	d1eb      	bne.n	8004728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004750:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d20c      	bcs.n	8004778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e032      	b.n	80047de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4916      	ldr	r1, [pc, #88]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	490e      	ldr	r1, [pc, #56]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047b6:	f000 f821 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 80047ba:	4602      	mov	r2, r0
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	490a      	ldr	r1, [pc, #40]	; (80047f0 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	5ccb      	ldrb	r3, [r1, r3]
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fc fcc2 	bl	8001160 <HAL_InitTick>

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40023c00 	.word	0x40023c00
 80047ec:	40023800 	.word	0x40023800
 80047f0:	08005a98 	.word	0x08005a98
 80047f4:	20000000 	.word	0x20000000
 80047f8:	20000004 	.word	0x20000004

080047fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b094      	sub	sp, #80	; 0x50
 8004802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	647b      	str	r3, [r7, #68]	; 0x44
 8004808:	2300      	movs	r3, #0
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	2300      	movs	r3, #0
 800480e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004814:	4b79      	ldr	r3, [pc, #484]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d00d      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0x40>
 8004820:	2b08      	cmp	r3, #8
 8004822:	f200 80e1 	bhi.w	80049e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x34>
 800482a:	2b04      	cmp	r3, #4
 800482c:	d003      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0x3a>
 800482e:	e0db      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004830:	4b73      	ldr	r3, [pc, #460]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004832:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004834:	e0db      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004836:	4b73      	ldr	r3, [pc, #460]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8004838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800483a:	e0d8      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800483c:	4b6f      	ldr	r3, [pc, #444]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004844:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004846:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d063      	beq.n	800491a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004852:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	2200      	movs	r2, #0
 800485a:	63bb      	str	r3, [r7, #56]	; 0x38
 800485c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
 800486a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800486e:	4622      	mov	r2, r4
 8004870:	462b      	mov	r3, r5
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	0159      	lsls	r1, r3, #5
 800487c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004880:	0150      	lsls	r0, r2, #5
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4621      	mov	r1, r4
 8004888:	1a51      	subs	r1, r2, r1
 800488a:	6139      	str	r1, [r7, #16]
 800488c:	4629      	mov	r1, r5
 800488e:	eb63 0301 	sbc.w	r3, r3, r1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a0:	4659      	mov	r1, fp
 80048a2:	018b      	lsls	r3, r1, #6
 80048a4:	4651      	mov	r1, sl
 80048a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048aa:	4651      	mov	r1, sl
 80048ac:	018a      	lsls	r2, r1, #6
 80048ae:	4651      	mov	r1, sl
 80048b0:	ebb2 0801 	subs.w	r8, r2, r1
 80048b4:	4659      	mov	r1, fp
 80048b6:	eb63 0901 	sbc.w	r9, r3, r1
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ce:	4690      	mov	r8, r2
 80048d0:	4699      	mov	r9, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	eb18 0303 	adds.w	r3, r8, r3
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	462b      	mov	r3, r5
 80048dc:	eb49 0303 	adc.w	r3, r9, r3
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ee:	4629      	mov	r1, r5
 80048f0:	024b      	lsls	r3, r1, #9
 80048f2:	4621      	mov	r1, r4
 80048f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048f8:	4621      	mov	r1, r4
 80048fa:	024a      	lsls	r2, r1, #9
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004902:	2200      	movs	r2, #0
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
 8004906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800490c:	f7fb fcc8 	bl	80002a0 <__aeabi_uldivmod>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4613      	mov	r3, r2
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004918:	e058      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491a:	4b38      	ldr	r3, [pc, #224]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	2200      	movs	r2, #0
 8004922:	4618      	mov	r0, r3
 8004924:	4611      	mov	r1, r2
 8004926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	2300      	movs	r3, #0
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
 8004930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	f04f 0000 	mov.w	r0, #0
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	0159      	lsls	r1, r3, #5
 8004942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004946:	0150      	lsls	r0, r2, #5
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4641      	mov	r1, r8
 800494e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004952:	4649      	mov	r1, r9
 8004954:	eb63 0b01 	sbc.w	fp, r3, r1
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800496c:	ebb2 040a 	subs.w	r4, r2, sl
 8004970:	eb63 050b 	sbc.w	r5, r3, fp
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	00eb      	lsls	r3, r5, #3
 800497e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004982:	00e2      	lsls	r2, r4, #3
 8004984:	4614      	mov	r4, r2
 8004986:	461d      	mov	r5, r3
 8004988:	4643      	mov	r3, r8
 800498a:	18e3      	adds	r3, r4, r3
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	464b      	mov	r3, r9
 8004990:	eb45 0303 	adc.w	r3, r5, r3
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049a2:	4629      	mov	r1, r5
 80049a4:	028b      	lsls	r3, r1, #10
 80049a6:	4621      	mov	r1, r4
 80049a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049ac:	4621      	mov	r1, r4
 80049ae:	028a      	lsls	r2, r1, #10
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b6:	2200      	movs	r2, #0
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	61fa      	str	r2, [r7, #28]
 80049bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c0:	f7fb fc6e 	bl	80002a0 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCC_GetSysClockFreq+0x200>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	3301      	adds	r3, #1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049e6:	e002      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3750      	adds	r7, #80	; 0x50
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	007a1200 	.word	0x007a1200

08004a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000000 	.word	0x20000000

08004a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a24:	f7ff fff0 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	08005aa8 	.word	0x08005aa8

08004a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e041      	b.n	8004ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc f9f4 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f000 f95e 	bl	8004d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d122      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d11b      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f06f 0202 	mvn.w	r2, #2
 8004b12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f8ee 	bl	8004d0a <HAL_TIM_IC_CaptureCallback>
 8004b2e:	e005      	b.n	8004b3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f8e0 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8f1 	bl	8004d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d122      	bne.n	8004b96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d11b      	bne.n	8004b96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0204 	mvn.w	r2, #4
 8004b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f8c4 	bl	8004d0a <HAL_TIM_IC_CaptureCallback>
 8004b82:	e005      	b.n	8004b90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8b6 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8c7 	bl	8004d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d122      	bne.n	8004bea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d11b      	bne.n	8004bea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f06f 0208 	mvn.w	r2, #8
 8004bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f89a 	bl	8004d0a <HAL_TIM_IC_CaptureCallback>
 8004bd6:	e005      	b.n	8004be4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f88c 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f89d 	bl	8004d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d122      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d11b      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0210 	mvn.w	r2, #16
 8004c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2208      	movs	r2, #8
 8004c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f870 	bl	8004d0a <HAL_TIM_IC_CaptureCallback>
 8004c2a:	e005      	b.n	8004c38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f862 	bl	8004cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f873 	bl	8004d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d10e      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0201 	mvn.w	r2, #1
 8004c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fb ff71 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b80      	cmp	r3, #128	; 0x80
 8004c76:	d10e      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d107      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f903 	bl	8004e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d10e      	bne.n	8004cc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d107      	bne.n	8004cc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f838 	bl	8004d32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d10e      	bne.n	8004cee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d107      	bne.n	8004cee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0220 	mvn.w	r2, #32
 8004ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f8cd 	bl	8004e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a40      	ldr	r2, [pc, #256]	; (8004e5c <TIM_Base_SetConfig+0x114>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d66:	d00f      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3d      	ldr	r2, [pc, #244]	; (8004e60 <TIM_Base_SetConfig+0x118>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00b      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3c      	ldr	r2, [pc, #240]	; (8004e64 <TIM_Base_SetConfig+0x11c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d007      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3b      	ldr	r2, [pc, #236]	; (8004e68 <TIM_Base_SetConfig+0x120>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3a      	ldr	r2, [pc, #232]	; (8004e6c <TIM_Base_SetConfig+0x124>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d108      	bne.n	8004d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <TIM_Base_SetConfig+0x114>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02b      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d027      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2c      	ldr	r2, [pc, #176]	; (8004e60 <TIM_Base_SetConfig+0x118>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d023      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2b      	ldr	r2, [pc, #172]	; (8004e64 <TIM_Base_SetConfig+0x11c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01f      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <TIM_Base_SetConfig+0x120>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01b      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <TIM_Base_SetConfig+0x124>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d017      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a28      	ldr	r2, [pc, #160]	; (8004e70 <TIM_Base_SetConfig+0x128>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a27      	ldr	r2, [pc, #156]	; (8004e74 <TIM_Base_SetConfig+0x12c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00f      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <TIM_Base_SetConfig+0x130>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <TIM_Base_SetConfig+0x134>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <TIM_Base_SetConfig+0x138>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <TIM_Base_SetConfig+0x13c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d108      	bne.n	8004e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <TIM_Base_SetConfig+0x114>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_Base_SetConfig+0xf8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <TIM_Base_SetConfig+0x124>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d103      	bne.n	8004e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	615a      	str	r2, [r3, #20]
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40000c00 	.word	0x40000c00
 8004e6c:	40010400 	.word	0x40010400
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800
 8004e7c:	40001800 	.word	0x40001800
 8004e80:	40001c00 	.word	0x40001c00
 8004e84:	40002000 	.word	0x40002000

08004e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d17c      	bne.n	8004fca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_UART_Transmit+0x2c>
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e075      	b.n	8004fcc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_UART_Transmit+0x3e>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e06e      	b.n	8004fcc <HAL_UART_Transmit+0x11c>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2221      	movs	r2, #33	; 0x21
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f04:	f7fc f970 	bl	80011e8 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d108      	bne.n	8004f32 <HAL_UART_Transmit+0x82>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e003      	b.n	8004f3a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f42:	e02a      	b.n	8004f9a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f840 	bl	8004fd4 <UART_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e036      	b.n	8004fcc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	3302      	adds	r3, #2
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	e007      	b.n	8004f8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	781a      	ldrb	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1cf      	bne.n	8004f44 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2200      	movs	r2, #0
 8004fac:	2140      	movs	r1, #64	; 0x40
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f810 	bl	8004fd4 <UART_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e006      	b.n	8004fcc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fca:	2302      	movs	r3, #2
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b090      	sub	sp, #64	; 0x40
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe4:	e050      	b.n	8005088 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d04c      	beq.n	8005088 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff4:	f7fc f8f8 	bl	80011e8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005000:	429a      	cmp	r2, r3
 8005002:	d241      	bcs.n	8005088 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005024:	637a      	str	r2, [r7, #52]	; 0x34
 8005026:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800502a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e5      	bne.n	8005004 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3314      	adds	r3, #20
 800503e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	613b      	str	r3, [r7, #16]
   return(result);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005058:	623a      	str	r2, [r7, #32]
 800505a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	69f9      	ldr	r1, [r7, #28]
 800505e:	6a3a      	ldr	r2, [r7, #32]
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	61bb      	str	r3, [r7, #24]
   return(result);
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e00f      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4013      	ands	r3, r2
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	bf0c      	ite	eq
 8005098:	2301      	moveq	r3, #1
 800509a:	2300      	movne	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d09f      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3740      	adds	r7, #64	; 0x40
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <__errno>:
 80050b0:	4b01      	ldr	r3, [pc, #4]	; (80050b8 <__errno+0x8>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	2000000c 	.word	0x2000000c

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4d0d      	ldr	r5, [pc, #52]	; (80050f4 <__libc_init_array+0x38>)
 80050c0:	4c0d      	ldr	r4, [pc, #52]	; (80050f8 <__libc_init_array+0x3c>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	2600      	movs	r6, #0
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	4d0b      	ldr	r5, [pc, #44]	; (80050fc <__libc_init_array+0x40>)
 80050ce:	4c0c      	ldr	r4, [pc, #48]	; (8005100 <__libc_init_array+0x44>)
 80050d0:	f000 fc86 	bl	80059e0 <_init>
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	2600      	movs	r6, #0
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	08005aec 	.word	0x08005aec
 80050f8:	08005aec 	.word	0x08005aec
 80050fc:	08005aec 	.word	0x08005aec
 8005100:	08005af0 	.word	0x08005af0

08005104 <siprintf>:
 8005104:	b40e      	push	{r1, r2, r3}
 8005106:	b500      	push	{lr}
 8005108:	b09c      	sub	sp, #112	; 0x70
 800510a:	ab1d      	add	r3, sp, #116	; 0x74
 800510c:	9002      	str	r0, [sp, #8]
 800510e:	9006      	str	r0, [sp, #24]
 8005110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005114:	4809      	ldr	r0, [pc, #36]	; (800513c <siprintf+0x38>)
 8005116:	9107      	str	r1, [sp, #28]
 8005118:	9104      	str	r1, [sp, #16]
 800511a:	4909      	ldr	r1, [pc, #36]	; (8005140 <siprintf+0x3c>)
 800511c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005120:	9105      	str	r1, [sp, #20]
 8005122:	6800      	ldr	r0, [r0, #0]
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	a902      	add	r1, sp, #8
 8005128:	f000 f868 	bl	80051fc <_svfiprintf_r>
 800512c:	9b02      	ldr	r3, [sp, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	b01c      	add	sp, #112	; 0x70
 8005134:	f85d eb04 	ldr.w	lr, [sp], #4
 8005138:	b003      	add	sp, #12
 800513a:	4770      	bx	lr
 800513c:	2000000c 	.word	0x2000000c
 8005140:	ffff0208 	.word	0xffff0208

08005144 <__ssputs_r>:
 8005144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	688e      	ldr	r6, [r1, #8]
 800514a:	429e      	cmp	r6, r3
 800514c:	4682      	mov	sl, r0
 800514e:	460c      	mov	r4, r1
 8005150:	4690      	mov	r8, r2
 8005152:	461f      	mov	r7, r3
 8005154:	d838      	bhi.n	80051c8 <__ssputs_r+0x84>
 8005156:	898a      	ldrh	r2, [r1, #12]
 8005158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800515c:	d032      	beq.n	80051c4 <__ssputs_r+0x80>
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	6909      	ldr	r1, [r1, #16]
 8005162:	eba5 0901 	sub.w	r9, r5, r1
 8005166:	6965      	ldr	r5, [r4, #20]
 8005168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800516c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005170:	3301      	adds	r3, #1
 8005172:	444b      	add	r3, r9
 8005174:	106d      	asrs	r5, r5, #1
 8005176:	429d      	cmp	r5, r3
 8005178:	bf38      	it	cc
 800517a:	461d      	movcc	r5, r3
 800517c:	0553      	lsls	r3, r2, #21
 800517e:	d531      	bpl.n	80051e4 <__ssputs_r+0xa0>
 8005180:	4629      	mov	r1, r5
 8005182:	f000 fb63 	bl	800584c <_malloc_r>
 8005186:	4606      	mov	r6, r0
 8005188:	b950      	cbnz	r0, 80051a0 <__ssputs_r+0x5c>
 800518a:	230c      	movs	r3, #12
 800518c:	f8ca 3000 	str.w	r3, [sl]
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	6921      	ldr	r1, [r4, #16]
 80051a2:	464a      	mov	r2, r9
 80051a4:	f000 fabe 	bl	8005724 <memcpy>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	6126      	str	r6, [r4, #16]
 80051b6:	6165      	str	r5, [r4, #20]
 80051b8:	444e      	add	r6, r9
 80051ba:	eba5 0509 	sub.w	r5, r5, r9
 80051be:	6026      	str	r6, [r4, #0]
 80051c0:	60a5      	str	r5, [r4, #8]
 80051c2:	463e      	mov	r6, r7
 80051c4:	42be      	cmp	r6, r7
 80051c6:	d900      	bls.n	80051ca <__ssputs_r+0x86>
 80051c8:	463e      	mov	r6, r7
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	4632      	mov	r2, r6
 80051ce:	4641      	mov	r1, r8
 80051d0:	f000 fab6 	bl	8005740 <memmove>
 80051d4:	68a3      	ldr	r3, [r4, #8]
 80051d6:	1b9b      	subs	r3, r3, r6
 80051d8:	60a3      	str	r3, [r4, #8]
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	4433      	add	r3, r6
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	2000      	movs	r0, #0
 80051e2:	e7db      	b.n	800519c <__ssputs_r+0x58>
 80051e4:	462a      	mov	r2, r5
 80051e6:	f000 fba5 	bl	8005934 <_realloc_r>
 80051ea:	4606      	mov	r6, r0
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d1e1      	bne.n	80051b4 <__ssputs_r+0x70>
 80051f0:	6921      	ldr	r1, [r4, #16]
 80051f2:	4650      	mov	r0, sl
 80051f4:	f000 fabe 	bl	8005774 <_free_r>
 80051f8:	e7c7      	b.n	800518a <__ssputs_r+0x46>
	...

080051fc <_svfiprintf_r>:
 80051fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005200:	4698      	mov	r8, r3
 8005202:	898b      	ldrh	r3, [r1, #12]
 8005204:	061b      	lsls	r3, r3, #24
 8005206:	b09d      	sub	sp, #116	; 0x74
 8005208:	4607      	mov	r7, r0
 800520a:	460d      	mov	r5, r1
 800520c:	4614      	mov	r4, r2
 800520e:	d50e      	bpl.n	800522e <_svfiprintf_r+0x32>
 8005210:	690b      	ldr	r3, [r1, #16]
 8005212:	b963      	cbnz	r3, 800522e <_svfiprintf_r+0x32>
 8005214:	2140      	movs	r1, #64	; 0x40
 8005216:	f000 fb19 	bl	800584c <_malloc_r>
 800521a:	6028      	str	r0, [r5, #0]
 800521c:	6128      	str	r0, [r5, #16]
 800521e:	b920      	cbnz	r0, 800522a <_svfiprintf_r+0x2e>
 8005220:	230c      	movs	r3, #12
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	e0d1      	b.n	80053ce <_svfiprintf_r+0x1d2>
 800522a:	2340      	movs	r3, #64	; 0x40
 800522c:	616b      	str	r3, [r5, #20]
 800522e:	2300      	movs	r3, #0
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	2320      	movs	r3, #32
 8005234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005238:	f8cd 800c 	str.w	r8, [sp, #12]
 800523c:	2330      	movs	r3, #48	; 0x30
 800523e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80053e8 <_svfiprintf_r+0x1ec>
 8005242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005246:	f04f 0901 	mov.w	r9, #1
 800524a:	4623      	mov	r3, r4
 800524c:	469a      	mov	sl, r3
 800524e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005252:	b10a      	cbz	r2, 8005258 <_svfiprintf_r+0x5c>
 8005254:	2a25      	cmp	r2, #37	; 0x25
 8005256:	d1f9      	bne.n	800524c <_svfiprintf_r+0x50>
 8005258:	ebba 0b04 	subs.w	fp, sl, r4
 800525c:	d00b      	beq.n	8005276 <_svfiprintf_r+0x7a>
 800525e:	465b      	mov	r3, fp
 8005260:	4622      	mov	r2, r4
 8005262:	4629      	mov	r1, r5
 8005264:	4638      	mov	r0, r7
 8005266:	f7ff ff6d 	bl	8005144 <__ssputs_r>
 800526a:	3001      	adds	r0, #1
 800526c:	f000 80aa 	beq.w	80053c4 <_svfiprintf_r+0x1c8>
 8005270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005272:	445a      	add	r2, fp
 8005274:	9209      	str	r2, [sp, #36]	; 0x24
 8005276:	f89a 3000 	ldrb.w	r3, [sl]
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80a2 	beq.w	80053c4 <_svfiprintf_r+0x1c8>
 8005280:	2300      	movs	r3, #0
 8005282:	f04f 32ff 	mov.w	r2, #4294967295
 8005286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800528a:	f10a 0a01 	add.w	sl, sl, #1
 800528e:	9304      	str	r3, [sp, #16]
 8005290:	9307      	str	r3, [sp, #28]
 8005292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005296:	931a      	str	r3, [sp, #104]	; 0x68
 8005298:	4654      	mov	r4, sl
 800529a:	2205      	movs	r2, #5
 800529c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a0:	4851      	ldr	r0, [pc, #324]	; (80053e8 <_svfiprintf_r+0x1ec>)
 80052a2:	f7fa ffad 	bl	8000200 <memchr>
 80052a6:	9a04      	ldr	r2, [sp, #16]
 80052a8:	b9d8      	cbnz	r0, 80052e2 <_svfiprintf_r+0xe6>
 80052aa:	06d0      	lsls	r0, r2, #27
 80052ac:	bf44      	itt	mi
 80052ae:	2320      	movmi	r3, #32
 80052b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052b4:	0711      	lsls	r1, r2, #28
 80052b6:	bf44      	itt	mi
 80052b8:	232b      	movmi	r3, #43	; 0x2b
 80052ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052be:	f89a 3000 	ldrb.w	r3, [sl]
 80052c2:	2b2a      	cmp	r3, #42	; 0x2a
 80052c4:	d015      	beq.n	80052f2 <_svfiprintf_r+0xf6>
 80052c6:	9a07      	ldr	r2, [sp, #28]
 80052c8:	4654      	mov	r4, sl
 80052ca:	2000      	movs	r0, #0
 80052cc:	f04f 0c0a 	mov.w	ip, #10
 80052d0:	4621      	mov	r1, r4
 80052d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052d6:	3b30      	subs	r3, #48	; 0x30
 80052d8:	2b09      	cmp	r3, #9
 80052da:	d94e      	bls.n	800537a <_svfiprintf_r+0x17e>
 80052dc:	b1b0      	cbz	r0, 800530c <_svfiprintf_r+0x110>
 80052de:	9207      	str	r2, [sp, #28]
 80052e0:	e014      	b.n	800530c <_svfiprintf_r+0x110>
 80052e2:	eba0 0308 	sub.w	r3, r0, r8
 80052e6:	fa09 f303 	lsl.w	r3, r9, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	9304      	str	r3, [sp, #16]
 80052ee:	46a2      	mov	sl, r4
 80052f0:	e7d2      	b.n	8005298 <_svfiprintf_r+0x9c>
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	1d19      	adds	r1, r3, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	9103      	str	r1, [sp, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfbb      	ittet	lt
 80052fe:	425b      	neglt	r3, r3
 8005300:	f042 0202 	orrlt.w	r2, r2, #2
 8005304:	9307      	strge	r3, [sp, #28]
 8005306:	9307      	strlt	r3, [sp, #28]
 8005308:	bfb8      	it	lt
 800530a:	9204      	strlt	r2, [sp, #16]
 800530c:	7823      	ldrb	r3, [r4, #0]
 800530e:	2b2e      	cmp	r3, #46	; 0x2e
 8005310:	d10c      	bne.n	800532c <_svfiprintf_r+0x130>
 8005312:	7863      	ldrb	r3, [r4, #1]
 8005314:	2b2a      	cmp	r3, #42	; 0x2a
 8005316:	d135      	bne.n	8005384 <_svfiprintf_r+0x188>
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	9203      	str	r2, [sp, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	bfb8      	it	lt
 8005324:	f04f 33ff 	movlt.w	r3, #4294967295
 8005328:	3402      	adds	r4, #2
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053f8 <_svfiprintf_r+0x1fc>
 8005330:	7821      	ldrb	r1, [r4, #0]
 8005332:	2203      	movs	r2, #3
 8005334:	4650      	mov	r0, sl
 8005336:	f7fa ff63 	bl	8000200 <memchr>
 800533a:	b140      	cbz	r0, 800534e <_svfiprintf_r+0x152>
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	eba0 000a 	sub.w	r0, r0, sl
 8005342:	fa03 f000 	lsl.w	r0, r3, r0
 8005346:	9b04      	ldr	r3, [sp, #16]
 8005348:	4303      	orrs	r3, r0
 800534a:	3401      	adds	r4, #1
 800534c:	9304      	str	r3, [sp, #16]
 800534e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005352:	4826      	ldr	r0, [pc, #152]	; (80053ec <_svfiprintf_r+0x1f0>)
 8005354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005358:	2206      	movs	r2, #6
 800535a:	f7fa ff51 	bl	8000200 <memchr>
 800535e:	2800      	cmp	r0, #0
 8005360:	d038      	beq.n	80053d4 <_svfiprintf_r+0x1d8>
 8005362:	4b23      	ldr	r3, [pc, #140]	; (80053f0 <_svfiprintf_r+0x1f4>)
 8005364:	bb1b      	cbnz	r3, 80053ae <_svfiprintf_r+0x1b2>
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	3307      	adds	r3, #7
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	3308      	adds	r3, #8
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005374:	4433      	add	r3, r6
 8005376:	9309      	str	r3, [sp, #36]	; 0x24
 8005378:	e767      	b.n	800524a <_svfiprintf_r+0x4e>
 800537a:	fb0c 3202 	mla	r2, ip, r2, r3
 800537e:	460c      	mov	r4, r1
 8005380:	2001      	movs	r0, #1
 8005382:	e7a5      	b.n	80052d0 <_svfiprintf_r+0xd4>
 8005384:	2300      	movs	r3, #0
 8005386:	3401      	adds	r4, #1
 8005388:	9305      	str	r3, [sp, #20]
 800538a:	4619      	mov	r1, r3
 800538c:	f04f 0c0a 	mov.w	ip, #10
 8005390:	4620      	mov	r0, r4
 8005392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005396:	3a30      	subs	r2, #48	; 0x30
 8005398:	2a09      	cmp	r2, #9
 800539a:	d903      	bls.n	80053a4 <_svfiprintf_r+0x1a8>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0c5      	beq.n	800532c <_svfiprintf_r+0x130>
 80053a0:	9105      	str	r1, [sp, #20]
 80053a2:	e7c3      	b.n	800532c <_svfiprintf_r+0x130>
 80053a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053a8:	4604      	mov	r4, r0
 80053aa:	2301      	movs	r3, #1
 80053ac:	e7f0      	b.n	8005390 <_svfiprintf_r+0x194>
 80053ae:	ab03      	add	r3, sp, #12
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	462a      	mov	r2, r5
 80053b4:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <_svfiprintf_r+0x1f8>)
 80053b6:	a904      	add	r1, sp, #16
 80053b8:	4638      	mov	r0, r7
 80053ba:	f3af 8000 	nop.w
 80053be:	1c42      	adds	r2, r0, #1
 80053c0:	4606      	mov	r6, r0
 80053c2:	d1d6      	bne.n	8005372 <_svfiprintf_r+0x176>
 80053c4:	89ab      	ldrh	r3, [r5, #12]
 80053c6:	065b      	lsls	r3, r3, #25
 80053c8:	f53f af2c 	bmi.w	8005224 <_svfiprintf_r+0x28>
 80053cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ce:	b01d      	add	sp, #116	; 0x74
 80053d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d4:	ab03      	add	r3, sp, #12
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	462a      	mov	r2, r5
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <_svfiprintf_r+0x1f8>)
 80053dc:	a904      	add	r1, sp, #16
 80053de:	4638      	mov	r0, r7
 80053e0:	f000 f87a 	bl	80054d8 <_printf_i>
 80053e4:	e7eb      	b.n	80053be <_svfiprintf_r+0x1c2>
 80053e6:	bf00      	nop
 80053e8:	08005ab0 	.word	0x08005ab0
 80053ec:	08005aba 	.word	0x08005aba
 80053f0:	00000000 	.word	0x00000000
 80053f4:	08005145 	.word	0x08005145
 80053f8:	08005ab6 	.word	0x08005ab6

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4699      	mov	r9, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800540c:	4293      	cmp	r3, r2
 800540e:	bfb8      	it	lt
 8005410:	4613      	movlt	r3, r2
 8005412:	6033      	str	r3, [r6, #0]
 8005414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005418:	4607      	mov	r7, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc26      	bgt.n	8005492 <_printf_common+0x96>
 8005444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005448:	1e13      	subs	r3, r2, #0
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42b      	bmi.n	80054ac <_printf_common+0xb0>
 8005454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005458:	4649      	mov	r1, r9
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	3001      	adds	r0, #1
 8005460:	d01e      	beq.n	80054a0 <_printf_common+0xa4>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	68e5      	ldr	r5, [r4, #12]
 8005466:	6832      	ldr	r2, [r6, #0]
 8005468:	f003 0306 	and.w	r3, r3, #6
 800546c:	2b04      	cmp	r3, #4
 800546e:	bf08      	it	eq
 8005470:	1aad      	subeq	r5, r5, r2
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	6922      	ldr	r2, [r4, #16]
 8005476:	bf0c      	ite	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	2500      	movne	r5, #0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfc4      	itt	gt
 8005482:	1a9b      	subgt	r3, r3, r2
 8005484:	18ed      	addgt	r5, r5, r3
 8005486:	2600      	movs	r6, #0
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xa8>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4649      	mov	r1, r9
 8005498:	4638      	mov	r0, r7
 800549a:	47c0      	blx	r8
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xac>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c6      	b.n	800543a <_printf_common+0x3e>
 80054ac:	18e1      	adds	r1, r4, r3
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	2030      	movs	r0, #48	; 0x30
 80054b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b6:	4422      	add	r2, r4
 80054b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7c7      	b.n	8005454 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c0      	blx	r8
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa4>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x8e>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e0:	2f78      	cmp	r7, #120	; 0x78
 80054e2:	4691      	mov	r9, r2
 80054e4:	4680      	mov	r8, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	469a      	mov	sl, r3
 80054ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	; 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d8 	beq.w	80056aa <_printf_i+0x1d2>
 80054fa:	2f58      	cmp	r7, #88	; 0x58
 80054fc:	f000 80a3 	beq.w	8005646 <_printf_i+0x16e>
 8005500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	; (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005691 	.word	0x08005691
 8005548:	080055b5 	.word	0x080055b5
 800554c:	08005673 	.word	0x08005673
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056b3 	.word	0x080056b3
 800555c:	08005501 	.word	0x08005501
 8005560:	080055b5 	.word	0x080055b5
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	0800567b 	.word	0x0800567b
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	602a      	str	r2, [r5, #0]
 8005578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e0a3      	b.n	80056cc <_printf_i+0x1f4>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	6829      	ldr	r1, [r5, #0]
 8005588:	0606      	lsls	r6, r0, #24
 800558a:	f101 0304 	add.w	r3, r1, #4
 800558e:	d50a      	bpl.n	80055a6 <_printf_i+0xce>
 8005590:	680e      	ldr	r6, [r1, #0]
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	2e00      	cmp	r6, #0
 8005596:	da03      	bge.n	80055a0 <_printf_i+0xc8>
 8005598:	232d      	movs	r3, #45	; 0x2d
 800559a:	4276      	negs	r6, r6
 800559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a0:	485e      	ldr	r0, [pc, #376]	; (800571c <_printf_i+0x244>)
 80055a2:	230a      	movs	r3, #10
 80055a4:	e019      	b.n	80055da <_printf_i+0x102>
 80055a6:	680e      	ldr	r6, [r1, #0]
 80055a8:	602b      	str	r3, [r5, #0]
 80055aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055ae:	bf18      	it	ne
 80055b0:	b236      	sxthne	r6, r6
 80055b2:	e7ef      	b.n	8005594 <_printf_i+0xbc>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	1d19      	adds	r1, r3, #4
 80055ba:	6029      	str	r1, [r5, #0]
 80055bc:	0601      	lsls	r1, r0, #24
 80055be:	d501      	bpl.n	80055c4 <_printf_i+0xec>
 80055c0:	681e      	ldr	r6, [r3, #0]
 80055c2:	e002      	b.n	80055ca <_printf_i+0xf2>
 80055c4:	0646      	lsls	r6, r0, #25
 80055c6:	d5fb      	bpl.n	80055c0 <_printf_i+0xe8>
 80055c8:	881e      	ldrh	r6, [r3, #0]
 80055ca:	4854      	ldr	r0, [pc, #336]	; (800571c <_printf_i+0x244>)
 80055cc:	2f6f      	cmp	r7, #111	; 0x6f
 80055ce:	bf0c      	ite	eq
 80055d0:	2308      	moveq	r3, #8
 80055d2:	230a      	movne	r3, #10
 80055d4:	2100      	movs	r1, #0
 80055d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055da:	6865      	ldr	r5, [r4, #4]
 80055dc:	60a5      	str	r5, [r4, #8]
 80055de:	2d00      	cmp	r5, #0
 80055e0:	bfa2      	ittt	ge
 80055e2:	6821      	ldrge	r1, [r4, #0]
 80055e4:	f021 0104 	bicge.w	r1, r1, #4
 80055e8:	6021      	strge	r1, [r4, #0]
 80055ea:	b90e      	cbnz	r6, 80055f0 <_printf_i+0x118>
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	d04d      	beq.n	800568c <_printf_i+0x1b4>
 80055f0:	4615      	mov	r5, r2
 80055f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055f6:	fb03 6711 	mls	r7, r3, r1, r6
 80055fa:	5dc7      	ldrb	r7, [r0, r7]
 80055fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005600:	4637      	mov	r7, r6
 8005602:	42bb      	cmp	r3, r7
 8005604:	460e      	mov	r6, r1
 8005606:	d9f4      	bls.n	80055f2 <_printf_i+0x11a>
 8005608:	2b08      	cmp	r3, #8
 800560a:	d10b      	bne.n	8005624 <_printf_i+0x14c>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	07de      	lsls	r6, r3, #31
 8005610:	d508      	bpl.n	8005624 <_printf_i+0x14c>
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	6861      	ldr	r1, [r4, #4]
 8005616:	4299      	cmp	r1, r3
 8005618:	bfde      	ittt	le
 800561a:	2330      	movle	r3, #48	; 0x30
 800561c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005624:	1b52      	subs	r2, r2, r5
 8005626:	6122      	str	r2, [r4, #16]
 8005628:	f8cd a000 	str.w	sl, [sp]
 800562c:	464b      	mov	r3, r9
 800562e:	aa03      	add	r2, sp, #12
 8005630:	4621      	mov	r1, r4
 8005632:	4640      	mov	r0, r8
 8005634:	f7ff fee2 	bl	80053fc <_printf_common>
 8005638:	3001      	adds	r0, #1
 800563a:	d14c      	bne.n	80056d6 <_printf_i+0x1fe>
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	b004      	add	sp, #16
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	4835      	ldr	r0, [pc, #212]	; (800571c <_printf_i+0x244>)
 8005648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800564c:	6829      	ldr	r1, [r5, #0]
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	f851 6b04 	ldr.w	r6, [r1], #4
 8005654:	6029      	str	r1, [r5, #0]
 8005656:	061d      	lsls	r5, r3, #24
 8005658:	d514      	bpl.n	8005684 <_printf_i+0x1ac>
 800565a:	07df      	lsls	r7, r3, #31
 800565c:	bf44      	itt	mi
 800565e:	f043 0320 	orrmi.w	r3, r3, #32
 8005662:	6023      	strmi	r3, [r4, #0]
 8005664:	b91e      	cbnz	r6, 800566e <_printf_i+0x196>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f023 0320 	bic.w	r3, r3, #32
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	2310      	movs	r3, #16
 8005670:	e7b0      	b.n	80055d4 <_printf_i+0xfc>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	f043 0320 	orr.w	r3, r3, #32
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	2378      	movs	r3, #120	; 0x78
 800567c:	4828      	ldr	r0, [pc, #160]	; (8005720 <_printf_i+0x248>)
 800567e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005682:	e7e3      	b.n	800564c <_printf_i+0x174>
 8005684:	0659      	lsls	r1, r3, #25
 8005686:	bf48      	it	mi
 8005688:	b2b6      	uxthmi	r6, r6
 800568a:	e7e6      	b.n	800565a <_printf_i+0x182>
 800568c:	4615      	mov	r5, r2
 800568e:	e7bb      	b.n	8005608 <_printf_i+0x130>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	6826      	ldr	r6, [r4, #0]
 8005694:	6961      	ldr	r1, [r4, #20]
 8005696:	1d18      	adds	r0, r3, #4
 8005698:	6028      	str	r0, [r5, #0]
 800569a:	0635      	lsls	r5, r6, #24
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	d501      	bpl.n	80056a4 <_printf_i+0x1cc>
 80056a0:	6019      	str	r1, [r3, #0]
 80056a2:	e002      	b.n	80056aa <_printf_i+0x1d2>
 80056a4:	0670      	lsls	r0, r6, #25
 80056a6:	d5fb      	bpl.n	80056a0 <_printf_i+0x1c8>
 80056a8:	8019      	strh	r1, [r3, #0]
 80056aa:	2300      	movs	r3, #0
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	4615      	mov	r5, r2
 80056b0:	e7ba      	b.n	8005628 <_printf_i+0x150>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	602a      	str	r2, [r5, #0]
 80056b8:	681d      	ldr	r5, [r3, #0]
 80056ba:	6862      	ldr	r2, [r4, #4]
 80056bc:	2100      	movs	r1, #0
 80056be:	4628      	mov	r0, r5
 80056c0:	f7fa fd9e 	bl	8000200 <memchr>
 80056c4:	b108      	cbz	r0, 80056ca <_printf_i+0x1f2>
 80056c6:	1b40      	subs	r0, r0, r5
 80056c8:	6060      	str	r0, [r4, #4]
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	2300      	movs	r3, #0
 80056d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d4:	e7a8      	b.n	8005628 <_printf_i+0x150>
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	462a      	mov	r2, r5
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	47d0      	blx	sl
 80056e0:	3001      	adds	r0, #1
 80056e2:	d0ab      	beq.n	800563c <_printf_i+0x164>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	079b      	lsls	r3, r3, #30
 80056e8:	d413      	bmi.n	8005712 <_printf_i+0x23a>
 80056ea:	68e0      	ldr	r0, [r4, #12]
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	4298      	cmp	r0, r3
 80056f0:	bfb8      	it	lt
 80056f2:	4618      	movlt	r0, r3
 80056f4:	e7a4      	b.n	8005640 <_printf_i+0x168>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4632      	mov	r2, r6
 80056fa:	4649      	mov	r1, r9
 80056fc:	4640      	mov	r0, r8
 80056fe:	47d0      	blx	sl
 8005700:	3001      	adds	r0, #1
 8005702:	d09b      	beq.n	800563c <_printf_i+0x164>
 8005704:	3501      	adds	r5, #1
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	9903      	ldr	r1, [sp, #12]
 800570a:	1a5b      	subs	r3, r3, r1
 800570c:	42ab      	cmp	r3, r5
 800570e:	dcf2      	bgt.n	80056f6 <_printf_i+0x21e>
 8005710:	e7eb      	b.n	80056ea <_printf_i+0x212>
 8005712:	2500      	movs	r5, #0
 8005714:	f104 0619 	add.w	r6, r4, #25
 8005718:	e7f5      	b.n	8005706 <_printf_i+0x22e>
 800571a:	bf00      	nop
 800571c:	08005ac1 	.word	0x08005ac1
 8005720:	08005ad2 	.word	0x08005ad2

08005724 <memcpy>:
 8005724:	440a      	add	r2, r1
 8005726:	4291      	cmp	r1, r2
 8005728:	f100 33ff 	add.w	r3, r0, #4294967295
 800572c:	d100      	bne.n	8005730 <memcpy+0xc>
 800572e:	4770      	bx	lr
 8005730:	b510      	push	{r4, lr}
 8005732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800573a:	4291      	cmp	r1, r2
 800573c:	d1f9      	bne.n	8005732 <memcpy+0xe>
 800573e:	bd10      	pop	{r4, pc}

08005740 <memmove>:
 8005740:	4288      	cmp	r0, r1
 8005742:	b510      	push	{r4, lr}
 8005744:	eb01 0402 	add.w	r4, r1, r2
 8005748:	d902      	bls.n	8005750 <memmove+0x10>
 800574a:	4284      	cmp	r4, r0
 800574c:	4623      	mov	r3, r4
 800574e:	d807      	bhi.n	8005760 <memmove+0x20>
 8005750:	1e43      	subs	r3, r0, #1
 8005752:	42a1      	cmp	r1, r4
 8005754:	d008      	beq.n	8005768 <memmove+0x28>
 8005756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800575a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800575e:	e7f8      	b.n	8005752 <memmove+0x12>
 8005760:	4402      	add	r2, r0
 8005762:	4601      	mov	r1, r0
 8005764:	428a      	cmp	r2, r1
 8005766:	d100      	bne.n	800576a <memmove+0x2a>
 8005768:	bd10      	pop	{r4, pc}
 800576a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800576e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005772:	e7f7      	b.n	8005764 <memmove+0x24>

08005774 <_free_r>:
 8005774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005776:	2900      	cmp	r1, #0
 8005778:	d044      	beq.n	8005804 <_free_r+0x90>
 800577a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577e:	9001      	str	r0, [sp, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f1a1 0404 	sub.w	r4, r1, #4
 8005786:	bfb8      	it	lt
 8005788:	18e4      	addlt	r4, r4, r3
 800578a:	f000 f913 	bl	80059b4 <__malloc_lock>
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <_free_r+0x94>)
 8005790:	9801      	ldr	r0, [sp, #4]
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	b933      	cbnz	r3, 80057a4 <_free_r+0x30>
 8005796:	6063      	str	r3, [r4, #4]
 8005798:	6014      	str	r4, [r2, #0]
 800579a:	b003      	add	sp, #12
 800579c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057a0:	f000 b90e 	b.w	80059c0 <__malloc_unlock>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d908      	bls.n	80057ba <_free_r+0x46>
 80057a8:	6825      	ldr	r5, [r4, #0]
 80057aa:	1961      	adds	r1, r4, r5
 80057ac:	428b      	cmp	r3, r1
 80057ae:	bf01      	itttt	eq
 80057b0:	6819      	ldreq	r1, [r3, #0]
 80057b2:	685b      	ldreq	r3, [r3, #4]
 80057b4:	1949      	addeq	r1, r1, r5
 80057b6:	6021      	streq	r1, [r4, #0]
 80057b8:	e7ed      	b.n	8005796 <_free_r+0x22>
 80057ba:	461a      	mov	r2, r3
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b10b      	cbz	r3, 80057c4 <_free_r+0x50>
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d9fa      	bls.n	80057ba <_free_r+0x46>
 80057c4:	6811      	ldr	r1, [r2, #0]
 80057c6:	1855      	adds	r5, r2, r1
 80057c8:	42a5      	cmp	r5, r4
 80057ca:	d10b      	bne.n	80057e4 <_free_r+0x70>
 80057cc:	6824      	ldr	r4, [r4, #0]
 80057ce:	4421      	add	r1, r4
 80057d0:	1854      	adds	r4, r2, r1
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	d1e0      	bne.n	800579a <_free_r+0x26>
 80057d8:	681c      	ldr	r4, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	6053      	str	r3, [r2, #4]
 80057de:	4421      	add	r1, r4
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	e7da      	b.n	800579a <_free_r+0x26>
 80057e4:	d902      	bls.n	80057ec <_free_r+0x78>
 80057e6:	230c      	movs	r3, #12
 80057e8:	6003      	str	r3, [r0, #0]
 80057ea:	e7d6      	b.n	800579a <_free_r+0x26>
 80057ec:	6825      	ldr	r5, [r4, #0]
 80057ee:	1961      	adds	r1, r4, r5
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf04      	itt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	6063      	str	r3, [r4, #4]
 80057fa:	bf04      	itt	eq
 80057fc:	1949      	addeq	r1, r1, r5
 80057fe:	6021      	streq	r1, [r4, #0]
 8005800:	6054      	str	r4, [r2, #4]
 8005802:	e7ca      	b.n	800579a <_free_r+0x26>
 8005804:	b003      	add	sp, #12
 8005806:	bd30      	pop	{r4, r5, pc}
 8005808:	20000220 	.word	0x20000220

0800580c <sbrk_aligned>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4e0e      	ldr	r6, [pc, #56]	; (8005848 <sbrk_aligned+0x3c>)
 8005810:	460c      	mov	r4, r1
 8005812:	6831      	ldr	r1, [r6, #0]
 8005814:	4605      	mov	r5, r0
 8005816:	b911      	cbnz	r1, 800581e <sbrk_aligned+0x12>
 8005818:	f000 f8bc 	bl	8005994 <_sbrk_r>
 800581c:	6030      	str	r0, [r6, #0]
 800581e:	4621      	mov	r1, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 f8b7 	bl	8005994 <_sbrk_r>
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	d00a      	beq.n	8005840 <sbrk_aligned+0x34>
 800582a:	1cc4      	adds	r4, r0, #3
 800582c:	f024 0403 	bic.w	r4, r4, #3
 8005830:	42a0      	cmp	r0, r4
 8005832:	d007      	beq.n	8005844 <sbrk_aligned+0x38>
 8005834:	1a21      	subs	r1, r4, r0
 8005836:	4628      	mov	r0, r5
 8005838:	f000 f8ac 	bl	8005994 <_sbrk_r>
 800583c:	3001      	adds	r0, #1
 800583e:	d101      	bne.n	8005844 <sbrk_aligned+0x38>
 8005840:	f04f 34ff 	mov.w	r4, #4294967295
 8005844:	4620      	mov	r0, r4
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	20000224 	.word	0x20000224

0800584c <_malloc_r>:
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	1ccd      	adds	r5, r1, #3
 8005852:	f025 0503 	bic.w	r5, r5, #3
 8005856:	3508      	adds	r5, #8
 8005858:	2d0c      	cmp	r5, #12
 800585a:	bf38      	it	cc
 800585c:	250c      	movcc	r5, #12
 800585e:	2d00      	cmp	r5, #0
 8005860:	4607      	mov	r7, r0
 8005862:	db01      	blt.n	8005868 <_malloc_r+0x1c>
 8005864:	42a9      	cmp	r1, r5
 8005866:	d905      	bls.n	8005874 <_malloc_r+0x28>
 8005868:	230c      	movs	r3, #12
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	2600      	movs	r6, #0
 800586e:	4630      	mov	r0, r6
 8005870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005874:	4e2e      	ldr	r6, [pc, #184]	; (8005930 <_malloc_r+0xe4>)
 8005876:	f000 f89d 	bl	80059b4 <__malloc_lock>
 800587a:	6833      	ldr	r3, [r6, #0]
 800587c:	461c      	mov	r4, r3
 800587e:	bb34      	cbnz	r4, 80058ce <_malloc_r+0x82>
 8005880:	4629      	mov	r1, r5
 8005882:	4638      	mov	r0, r7
 8005884:	f7ff ffc2 	bl	800580c <sbrk_aligned>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	4604      	mov	r4, r0
 800588c:	d14d      	bne.n	800592a <_malloc_r+0xde>
 800588e:	6834      	ldr	r4, [r6, #0]
 8005890:	4626      	mov	r6, r4
 8005892:	2e00      	cmp	r6, #0
 8005894:	d140      	bne.n	8005918 <_malloc_r+0xcc>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	4631      	mov	r1, r6
 800589a:	4638      	mov	r0, r7
 800589c:	eb04 0803 	add.w	r8, r4, r3
 80058a0:	f000 f878 	bl	8005994 <_sbrk_r>
 80058a4:	4580      	cmp	r8, r0
 80058a6:	d13a      	bne.n	800591e <_malloc_r+0xd2>
 80058a8:	6821      	ldr	r1, [r4, #0]
 80058aa:	3503      	adds	r5, #3
 80058ac:	1a6d      	subs	r5, r5, r1
 80058ae:	f025 0503 	bic.w	r5, r5, #3
 80058b2:	3508      	adds	r5, #8
 80058b4:	2d0c      	cmp	r5, #12
 80058b6:	bf38      	it	cc
 80058b8:	250c      	movcc	r5, #12
 80058ba:	4629      	mov	r1, r5
 80058bc:	4638      	mov	r0, r7
 80058be:	f7ff ffa5 	bl	800580c <sbrk_aligned>
 80058c2:	3001      	adds	r0, #1
 80058c4:	d02b      	beq.n	800591e <_malloc_r+0xd2>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	442b      	add	r3, r5
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	e00e      	b.n	80058ec <_malloc_r+0xa0>
 80058ce:	6822      	ldr	r2, [r4, #0]
 80058d0:	1b52      	subs	r2, r2, r5
 80058d2:	d41e      	bmi.n	8005912 <_malloc_r+0xc6>
 80058d4:	2a0b      	cmp	r2, #11
 80058d6:	d916      	bls.n	8005906 <_malloc_r+0xba>
 80058d8:	1961      	adds	r1, r4, r5
 80058da:	42a3      	cmp	r3, r4
 80058dc:	6025      	str	r5, [r4, #0]
 80058de:	bf18      	it	ne
 80058e0:	6059      	strne	r1, [r3, #4]
 80058e2:	6863      	ldr	r3, [r4, #4]
 80058e4:	bf08      	it	eq
 80058e6:	6031      	streq	r1, [r6, #0]
 80058e8:	5162      	str	r2, [r4, r5]
 80058ea:	604b      	str	r3, [r1, #4]
 80058ec:	4638      	mov	r0, r7
 80058ee:	f104 060b 	add.w	r6, r4, #11
 80058f2:	f000 f865 	bl	80059c0 <__malloc_unlock>
 80058f6:	f026 0607 	bic.w	r6, r6, #7
 80058fa:	1d23      	adds	r3, r4, #4
 80058fc:	1af2      	subs	r2, r6, r3
 80058fe:	d0b6      	beq.n	800586e <_malloc_r+0x22>
 8005900:	1b9b      	subs	r3, r3, r6
 8005902:	50a3      	str	r3, [r4, r2]
 8005904:	e7b3      	b.n	800586e <_malloc_r+0x22>
 8005906:	6862      	ldr	r2, [r4, #4]
 8005908:	42a3      	cmp	r3, r4
 800590a:	bf0c      	ite	eq
 800590c:	6032      	streq	r2, [r6, #0]
 800590e:	605a      	strne	r2, [r3, #4]
 8005910:	e7ec      	b.n	80058ec <_malloc_r+0xa0>
 8005912:	4623      	mov	r3, r4
 8005914:	6864      	ldr	r4, [r4, #4]
 8005916:	e7b2      	b.n	800587e <_malloc_r+0x32>
 8005918:	4634      	mov	r4, r6
 800591a:	6876      	ldr	r6, [r6, #4]
 800591c:	e7b9      	b.n	8005892 <_malloc_r+0x46>
 800591e:	230c      	movs	r3, #12
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	4638      	mov	r0, r7
 8005924:	f000 f84c 	bl	80059c0 <__malloc_unlock>
 8005928:	e7a1      	b.n	800586e <_malloc_r+0x22>
 800592a:	6025      	str	r5, [r4, #0]
 800592c:	e7de      	b.n	80058ec <_malloc_r+0xa0>
 800592e:	bf00      	nop
 8005930:	20000220 	.word	0x20000220

08005934 <_realloc_r>:
 8005934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005938:	4680      	mov	r8, r0
 800593a:	4614      	mov	r4, r2
 800593c:	460e      	mov	r6, r1
 800593e:	b921      	cbnz	r1, 800594a <_realloc_r+0x16>
 8005940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	4611      	mov	r1, r2
 8005946:	f7ff bf81 	b.w	800584c <_malloc_r>
 800594a:	b92a      	cbnz	r2, 8005958 <_realloc_r+0x24>
 800594c:	f7ff ff12 	bl	8005774 <_free_r>
 8005950:	4625      	mov	r5, r4
 8005952:	4628      	mov	r0, r5
 8005954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005958:	f000 f838 	bl	80059cc <_malloc_usable_size_r>
 800595c:	4284      	cmp	r4, r0
 800595e:	4607      	mov	r7, r0
 8005960:	d802      	bhi.n	8005968 <_realloc_r+0x34>
 8005962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005966:	d812      	bhi.n	800598e <_realloc_r+0x5a>
 8005968:	4621      	mov	r1, r4
 800596a:	4640      	mov	r0, r8
 800596c:	f7ff ff6e 	bl	800584c <_malloc_r>
 8005970:	4605      	mov	r5, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d0ed      	beq.n	8005952 <_realloc_r+0x1e>
 8005976:	42bc      	cmp	r4, r7
 8005978:	4622      	mov	r2, r4
 800597a:	4631      	mov	r1, r6
 800597c:	bf28      	it	cs
 800597e:	463a      	movcs	r2, r7
 8005980:	f7ff fed0 	bl	8005724 <memcpy>
 8005984:	4631      	mov	r1, r6
 8005986:	4640      	mov	r0, r8
 8005988:	f7ff fef4 	bl	8005774 <_free_r>
 800598c:	e7e1      	b.n	8005952 <_realloc_r+0x1e>
 800598e:	4635      	mov	r5, r6
 8005990:	e7df      	b.n	8005952 <_realloc_r+0x1e>
	...

08005994 <_sbrk_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4d06      	ldr	r5, [pc, #24]	; (80059b0 <_sbrk_r+0x1c>)
 8005998:	2300      	movs	r3, #0
 800599a:	4604      	mov	r4, r0
 800599c:	4608      	mov	r0, r1
 800599e:	602b      	str	r3, [r5, #0]
 80059a0:	f7fb fb4a 	bl	8001038 <_sbrk>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_sbrk_r+0x1a>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_sbrk_r+0x1a>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	20000228 	.word	0x20000228

080059b4 <__malloc_lock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	; (80059bc <__malloc_lock+0x8>)
 80059b6:	f000 b811 	b.w	80059dc <__retarget_lock_acquire_recursive>
 80059ba:	bf00      	nop
 80059bc:	2000022c 	.word	0x2000022c

080059c0 <__malloc_unlock>:
 80059c0:	4801      	ldr	r0, [pc, #4]	; (80059c8 <__malloc_unlock+0x8>)
 80059c2:	f000 b80c 	b.w	80059de <__retarget_lock_release_recursive>
 80059c6:	bf00      	nop
 80059c8:	2000022c 	.word	0x2000022c

080059cc <_malloc_usable_size_r>:
 80059cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059d0:	1f18      	subs	r0, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bfbc      	itt	lt
 80059d6:	580b      	ldrlt	r3, [r1, r0]
 80059d8:	18c0      	addlt	r0, r0, r3
 80059da:	4770      	bx	lr

080059dc <__retarget_lock_acquire_recursive>:
 80059dc:	4770      	bx	lr

080059de <__retarget_lock_release_recursive>:
 80059de:	4770      	bx	lr

080059e0 <_init>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr

080059ec <_fini>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr
